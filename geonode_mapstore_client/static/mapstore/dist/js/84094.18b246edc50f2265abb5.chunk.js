/*! For license information please see 84094.18b246edc50f2265abb5.chunk.js.LICENSE.txt */
(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[84094],{14560:(e,n,t)=>{"use strict";t.r(n),t.d(n,{AlphaMode:()=>Br.Z,AlphaPipelineStage:()=>vf.Z,Animation:()=>zg.Z,AnimationViewModel:()=>Ag.Z,Appearance:()=>Ur.Z,ApproximateTerrainHeights:()=>o.Z,ArcGISTiledElevationTerrainProvider:()=>i.Z,ArcGisMapServerImageryProvider:()=>Vr.Z,ArcType:()=>a.Z,AssociativeArray:()=>r.Z,AttributeCompression:()=>s.Z,AttributeType:()=>kr.Z,AutoExposure:()=>Yr.Z,Autolinker:()=>_p.Z,AutomaticUniforms:()=>nr.Z,Axis:()=>Xr.Z,AxisAlignedBoundingBox:()=>l.Z,B3dmLoader:()=>yf.Z,B3dmParser:()=>qr.Z,BaseLayerPicker:()=>bg.Z,BaseLayerPickerViewModel:()=>Pg.Z,BatchTable:()=>jr.Z,BatchTableHierarchy:()=>Qr.Z,BatchTexture:()=>Kr.Z,BatchTexturePipelineStage:()=>xf.Z,Batched3DModel3DTileContent:()=>Jr.Z,Billboard:()=>$r.Z,BillboardCollection:()=>es.Z,BillboardGraphics:()=>ai.Z,BillboardVisualizer:()=>ri.Z,BingMapsGeocoderService:()=>c.Z,BingMapsImageryProvider:()=>ns.Z,BingMapsStyle:()=>ts.Z,BlendEquation:()=>os.Z,BlendFunction:()=>is.Z,BlendOption:()=>as.Z,BlendingState:()=>rs.Z,BoundingRectangle:()=>d.Z,BoundingSphere:()=>m.Z,BoundingSphereState:()=>si.Z,BoxEmitter:()=>ss.Z,BoxGeometry:()=>u.Z,BoxGeometryUpdater:()=>li.Z,BoxGraphics:()=>ci.Z,BoxOutlineGeometry:()=>p.Z,BrdfLutGenerator:()=>ls.Z,Buffer:()=>tr.Z,BufferLoader:()=>cs.Z,BufferUsage:()=>or.Z,CPUStylingPipelineStage:()=>Cf.Z,CallbackProperty:()=>di.Z,Camera:()=>ds.Z,CameraEventAggregator:()=>ms.Z,CameraEventType:()=>us.Z,CameraFlightPath:()=>ps.Z,Cartesian2:()=>f.Z,Cartesian3:()=>h.Z,Cartesian4:()=>g.Z,Cartographic:()=>_.Z,CartographicGeocoderService:()=>v.Z,CatmullRomSpline:()=>y.Z,Cesium3DTile:()=>fs.Z,Cesium3DTileBatchTable:()=>hs.Z,Cesium3DTileColorBlendMode:()=>gs.Z,Cesium3DTileContent:()=>_s.Z,Cesium3DTileContentFactory:()=>vs.Z,Cesium3DTileContentState:()=>ys.Z,Cesium3DTileContentType:()=>xs.Z,Cesium3DTileFeature:()=>Cs.Z,Cesium3DTileFeatureTable:()=>Zs.Z,Cesium3DTileOptimizationHint:()=>Ts.Z,Cesium3DTileOptimizations:()=>Es.Z,Cesium3DTilePass:()=>ws.Z,Cesium3DTilePassState:()=>Ss.Z,Cesium3DTilePointFeature:()=>zs.Z,Cesium3DTileRefine:()=>As.Z,Cesium3DTileStyle:()=>bs.Z,Cesium3DTileStyleEngine:()=>Ps.Z,Cesium3DTilesInspector:()=>Lg.Z,Cesium3DTilesInspectorViewModel:()=>Ng.Z,Cesium3DTileset:()=>Ds.Z,Cesium3DTilesetCache:()=>Is.Z,Cesium3DTilesetGraphics:()=>mi.Z,Cesium3DTilesetHeatmap:()=>Fs.Z,Cesium3DTilesetMetadata:()=>Ls.Z,Cesium3DTilesetMostDetailedTraversal:()=>Ns.Z,Cesium3DTilesetStatistics:()=>Rs.Z,Cesium3DTilesetTraversal:()=>Os.Z,Cesium3DTilesetVisualizer:()=>ui.Z,CesiumInspector:()=>Rg.Z,CesiumInspectorViewModel:()=>Og.Z,CesiumTerrainProvider:()=>x.Z,CesiumWidget:()=>Mg.Z,Check:()=>C.Z,CheckerboardMaterialProperty:()=>pi.Z,CircleEmitter:()=>Ms.Z,CircleGeometry:()=>Z.Z,CircleOutlineGeometry:()=>T.Z,ClassificationModel:()=>Hs.Z,ClassificationPrimitive:()=>Ws.Z,ClassificationType:()=>Gs.Z,ClearCommand:()=>ir.Z,ClippingPlane:()=>Bs.Z,ClippingPlaneCollection:()=>Us.Z,Clock:()=>E.Z,ClockRange:()=>w.Z,ClockStep:()=>S.Z,ClockViewModel:()=>Wp.Z,CloudCollection:()=>Vs.Z,CloudType:()=>ks.Z,Color:()=>z.Z,ColorBlendMode:()=>Ys.Z,ColorGeometryInstanceAttribute:()=>A.Z,ColorMaterialProperty:()=>fi.Z,Command:()=>Gp.Z,ComponentDatatype:()=>b.Z,Composite3DTileContent:()=>Xs.Z,CompositeEntityCollection:()=>hi.Z,CompositeMaterialProperty:()=>gi.Z,CompositePositionProperty:()=>_i.Z,CompositeProperty:()=>vi.Z,CompressedTextureBuffer:()=>P.Z,ComputeCommand:()=>ar.Z,ComputeEngine:()=>rr.Z,ConditionsExpression:()=>qs.Z,ConeEmitter:()=>js.Z,ConstantPositionProperty:()=>yi.Z,ConstantProperty:()=>xi.Z,Context:()=>sr.Z,ContextLimits:()=>lr.Z,CoplanarPolygonGeometry:()=>D.Z,CoplanarPolygonGeometryLibrary:()=>I.Z,CoplanarPolygonOutlineGeometry:()=>F.Z,CornerType:()=>L.Z,CorridorGeometry:()=>N.Z,CorridorGeometryLibrary:()=>R.Z,CorridorGeometryUpdater:()=>Ci.Z,CorridorGraphics:()=>Zi.Z,CorridorOutlineGeometry:()=>O.Z,Credit:()=>M.Z,CreditDisplay:()=>Qs.Z,CubeMap:()=>cr.Z,CubeMapFace:()=>dr.Z,CubicRealPolynomial:()=>H.Z,CullFace:()=>Ks.Z,CullingVolume:()=>W.Z,CumulusCloud:()=>Js.Z,CustomDataSource:()=>Ti.Z,CustomHeightmapTerrainProvider:()=>G.Z,CustomShader:()=>Zf.Z,CustomShaderMode:()=>Tf.Z,CustomShaderPipelineStage:()=>Ef.Z,CylinderGeometry:()=>B.Z,CylinderGeometryLibrary:()=>U.Z,CylinderGeometryUpdater:()=>Ei.Z,CylinderGraphics:()=>wi.Z,CylinderOutlineGeometry:()=>V.Z,CzmlDataSource:()=>Si.Z,DataSource:()=>zi.Z,DataSourceClock:()=>Ai.Z,DataSourceCollection:()=>bi.Z,DataSourceDisplay:()=>Pi.Z,DebugAppearance:()=>$s.Z,DebugCameraPrimitive:()=>el.Z,DebugInspector:()=>nl.Z,DebugModelMatrixPrimitive:()=>tl.Z,DefaultProxy:()=>k.Z,DepthFunction:()=>ol.Z,DepthPlane:()=>il.Z,DequantizationPipelineStage:()=>wf.Z,DerivedCommand:()=>al.Z,DeveloperError:()=>Y.Z,DeviceOrientationCameraController:()=>rl.Z,DirectionalLight:()=>sl.Z,DiscardEmptyTileImagePolicy:()=>ll.Z,DiscardMissingTileImagePolicy:()=>cl.Z,DistanceDisplayCondition:()=>X.Z,DistanceDisplayConditionGeometryInstanceAttribute:()=>q.Z,DoubleEndedPriorityQueue:()=>j.Z,DoublyLinkedList:()=>Q.Z,DracoLoader:()=>dl.Z,DrawCommand:()=>mr.Z,DynamicGeometryBatch:()=>Di.Z,DynamicGeometryUpdater:()=>Ii.Z,EarthOrientationParameters:()=>K.Z,EarthOrientationParametersSample:()=>J.Z,EasingFunction:()=>$.Z,EllipseGeometry:()=>ee.Z,EllipseGeometryLibrary:()=>ne.Z,EllipseGeometryUpdater:()=>Fi.Z,EllipseGraphics:()=>Li.Z,EllipseOutlineGeometry:()=>te.Z,Ellipsoid:()=>oe.Z,EllipsoidGeodesic:()=>ie.Z,EllipsoidGeometry:()=>ae.Z,EllipsoidGeometryUpdater:()=>Ni.Z,EllipsoidGraphics:()=>Ri.Z,EllipsoidOutlineGeometry:()=>re.Z,EllipsoidPrimitive:()=>ml.Z,EllipsoidRhumbLine:()=>se.Z,EllipsoidSurfaceAppearance:()=>ul.Z,EllipsoidTangentPlane:()=>le.Z,EllipsoidTerrainProvider:()=>ce.Z,EllipsoidalOccluder:()=>de.Z,Empty3DTileContent:()=>pl.Z,EncodedCartesian3:()=>me.Z,Entity:()=>Oi.Z,EntityCluster:()=>Mi.Z,EntityCollection:()=>Hi.Z,EntityView:()=>Wi.Z,Event:()=>ue.Z,EventHelper:()=>pe.Z,ExperimentalFeatures:()=>fe.Z,Expression:()=>fl.Z,ExpressionNodeType:()=>hl.Z,ExtrapolationType:()=>he.Z,FeatureDetection:()=>ge.Z,FeatureIdPipelineStage:()=>Sf.Z,FeatureMetadata:()=>gl.Z,Fog:()=>_l.Z,ForEach:()=>qp.Z,FrameRateMonitor:()=>vl.Z,FrameState:()=>yl.Z,Framebuffer:()=>ur.Z,FramebufferManager:()=>pr.Z,FrustumCommands:()=>xl.Z,FrustumGeometry:()=>_e.Z,FrustumOutlineGeometry:()=>ve.Z,Fullscreen:()=>ye.Z,FullscreenButton:()=>Hg.Z,FullscreenButtonViewModel:()=>Wg.Z,GeoJsonDataSource:()=>Gi.Z,GeocodeType:()=>xe.Z,Geocoder:()=>Gg.Z,GeocoderService:()=>Ce.Z,GeocoderViewModel:()=>Bg.Z,GeographicProjection:()=>Ze.Z,GeographicTilingScheme:()=>Te.Z,Geometry:()=>Ee.Z,Geometry3DTileContent:()=>Cl.Z,GeometryAttribute:()=>we.Z,GeometryAttributes:()=>Se.Z,GeometryFactory:()=>ze.Z,GeometryInstance:()=>Ae.Z,GeometryInstanceAttribute:()=>be.Z,GeometryOffsetAttribute:()=>Pe.Z,GeometryPipeline:()=>De.Z,GeometryPipelineStage:()=>zf.Z,GeometryType:()=>Ie.Z,GeometryUpdater:()=>Bi.Z,GeometryVisualizer:()=>Ui.Z,GetFeatureInfoFormat:()=>Zl.Z,Globe:()=>Tl.Z,GlobeDepth:()=>El.Z,GlobeSurfaceShaderSet:()=>wl.Z,GlobeSurfaceTile:()=>Sl.Z,GlobeSurfaceTileProvider:()=>zl.Z,GlobeTranslucency:()=>Al.Z,GlobeTranslucencyFramebuffer:()=>bl.Z,GlobeTranslucencyState:()=>Pl.Z,Gltf3DTileContent:()=>Dl.Z,GltfBufferViewLoader:()=>Il.Z,GltfDracoLoader:()=>Fl.Z,GltfFeatureMetadataLoader:()=>Ll.Z,GltfImageLoader:()=>Nl.Z,GltfIndexBufferLoader:()=>Rl.Z,GltfJsonLoader:()=>Ol.Z,GltfLoader:()=>Ml.Z,GltfLoaderUtil:()=>Hl.Z,GltfTextureLoader:()=>Wl.Z,GltfVertexBufferLoader:()=>Gl.Z,GoogleEarthEnterpriseImageryProvider:()=>Bl.Z,GoogleEarthEnterpriseMapsProvider:()=>Ul.Z,GoogleEarthEnterpriseMetadata:()=>Fe.Z,GoogleEarthEnterpriseTerrainData:()=>Le.Z,GoogleEarthEnterpriseTerrainProvider:()=>Ne.Z,GoogleEarthEnterpriseTileInformation:()=>Re.Z,GregorianDate:()=>Oe.Z,GridImageryProvider:()=>Vl.Z,GridMaterialProperty:()=>Vi.Z,GroundGeometryUpdater:()=>ki.Z,GroundPolylineGeometry:()=>Me.Z,GroundPolylinePrimitive:()=>kl.Z,GroundPrimitive:()=>Yl.Z,GroupMetadata:()=>Xl.Z,HeadingPitchRange:()=>He.Z,HeadingPitchRoll:()=>We.Z,Heap:()=>Ge.Z,HeightReference:()=>ql.Z,HeightmapEncoding:()=>Be.Z,HeightmapTerrainData:()=>Ue.Z,HeightmapTessellator:()=>Ve.Z,HermitePolynomialApproximation:()=>ke.Z,HermiteSpline:()=>Ye.Z,HilbertOrder:()=>Xe.Z,HomeButton:()=>Ug.Z,HomeButtonViewModel:()=>Vg.Z,HorizontalOrigin:()=>jl.Z,I3dmLoader:()=>Af.Z,I3dmParser:()=>Ql.Z,Iau2000Orientation:()=>qe.Z,Iau2006XysData:()=>je.Z,Iau2006XysSample:()=>Qe.Z,IauOrientationAxes:()=>Ke.Z,IauOrientationParameters:()=>Je.Z,ImageMaterialProperty:()=>Yi.Z,Imagery:()=>Kl.Z,ImageryLayer:()=>Jl.Z,ImageryLayerCollection:()=>$l.Z,ImageryLayerFeatureInfo:()=>ec.Z,ImageryProvider:()=>nc.Z,ImagerySplitDirection:()=>tc.Z,ImageryState:()=>oc.Z,Implicit3DTileContent:()=>ic.Z,ImplicitAvailabilityBitstream:()=>ac.Z,ImplicitSubdivisionScheme:()=>rc.Z,ImplicitSubtree:()=>sc.Z,ImplicitTileCoordinates:()=>lc.Z,ImplicitTileMetadata:()=>cc.Z,ImplicitTileset:()=>dc.Z,IndexDatatype:()=>$e.Z,InfoBox:()=>kg.Z,InfoBoxViewModel:()=>Yg.Z,InspectorShared:()=>Bp.Z,InstanceAttributeSemantic:()=>mc.Z,Instanced3DModel3DTileContent:()=>uc.Z,InstancingPipelineStage:()=>bf.Z,InterpolationAlgorithm:()=>en.Z,Intersect:()=>nn.Z,IntersectionTests:()=>tn.Z,Intersections2D:()=>on.Z,Interval:()=>an.Z,InvertClassification:()=>pc.Z,Ion:()=>rn.Z,IonGeocoderService:()=>sn.Z,IonImageryProvider:()=>fc.Z,IonResource:()=>ln.Z,IonWorldImageryStyle:()=>hc.Z,Iso8601:()=>cn.Z,JobScheduler:()=>gc.Z,JobType:()=>_c.Z,JsonMetadataTable:()=>vc.Z,JulianDate:()=>dn.Z,KTX2Transcoder:()=>mn.Z,KeyboardEventModifier:()=>un.Z,KmlCamera:()=>Xi.Z,KmlDataSource:()=>qi.Z,KmlLookAt:()=>ji.Z,KmlTour:()=>Qi.Z,KmlTourFlyTo:()=>Ki.Z,KmlTourWait:()=>Ji.Z,Label:()=>yc.Z,LabelCollection:()=>xc.Z,LabelGraphics:()=>$i.Z,LabelStyle:()=>Cc.Z,LabelVisualizer:()=>ea.Z,LagrangePolynomialApproximation:()=>pn.Z,LeapSecond:()=>fn.Z,Light:()=>Zc.Z,LightingModel:()=>Pf.Z,LightingPipelineStage:()=>Df.Z,LinearApproximation:()=>hn.Z,LinearSpline:()=>gn.Z,ManagedArray:()=>_n.Z,MapMode2D:()=>Tc.Z,MapProjection:()=>vn.Z,MapboxImageryProvider:()=>Ec.Z,MapboxStyleImageryProvider:()=>wc.Z,Material:()=>Sc.Z,MaterialAppearance:()=>zc.Z,MaterialPipelineStage:()=>If.Z,MaterialProperty:()=>na.Z,Math:()=>yn.Z,Matrix2:()=>xn.Z,Matrix3:()=>Cn.Z,Matrix4:()=>Zn.Z,MetadataClass:()=>Ac.Z,MetadataClassProperty:()=>bc.Z,MetadataComponentType:()=>Pc.Z,MetadataEntity:()=>Dc.Z,MetadataEnum:()=>Ic.Z,MetadataEnumValue:()=>Fc.Z,MetadataSchema:()=>Lc.Z,MetadataSchemaLoader:()=>Nc.Z,MetadataSemantic:()=>Rc.Z,MetadataTable:()=>Oc.Z,MetadataTableProperty:()=>Mc.Z,MetadataType:()=>Hc.Z,MipmapHint:()=>fr.Z,Model:()=>Wc.Z,ModelAlphaOptions:()=>Ff.Z,ModelAnimation:()=>Gc.Z,ModelAnimationCache:()=>Bc.Z,ModelAnimationCollection:()=>Uc.Z,ModelAnimationLoop:()=>Vc.Z,ModelAnimationState:()=>kc.Z,ModelColorPipelineStage:()=>Lf.Z,ModelComponents:()=>Yc.Z,ModelExperimental:()=>Nf.Z,ModelExperimental3DTileContent:()=>Rf.Z,ModelExperimentalNode:()=>Of.Z,ModelExperimentalPrimitive:()=>Mf.Z,ModelExperimentalSceneGraph:()=>Hf.Z,ModelExperimentalType:()=>Wf.Z,ModelExperimentalUtility:()=>Gf.Z,ModelFeature:()=>Bf.Z,ModelFeatureTable:()=>Uf.Z,ModelGraphics:()=>ta.Z,ModelInstance:()=>Xc.Z,ModelInstanceCollection:()=>qc.Z,ModelLightingOptions:()=>Vf.Z,ModelLoadResources:()=>jc.Z,ModelMaterial:()=>Qc.Z,ModelMatrixUpdateStage:()=>kf.Z,ModelMesh:()=>Kc.Z,ModelNode:()=>Jc.Z,ModelOutlineLoader:()=>$c.Z,ModelRenderResources:()=>Yf.Z,ModelUtility:()=>ed.Z,ModelVisualizer:()=>oa.Z,Moon:()=>nd.Z,MortonOrder:()=>Tn.Z,Multiple3DTileContent:()=>td.Z,NavigationHelpButton:()=>Xg.Z,NavigationHelpButtonViewModel:()=>qg.Z,NearFarScalar:()=>En.Z,NeverTileDiscardPolicy:()=>od.Z,NodeRenderResources:()=>Xf.Z,NodeTransformationProperty:()=>ia.Z,OIT:()=>id.Z,Occluder:()=>wn.Z,OctahedralProjectedCubeMap:()=>ad.Z,OffsetGeometryInstanceAttribute:()=>Sn.Z,OpenCageGeocoderService:()=>zn.Z,OpenStreetMapImageryProvider:()=>rd.Z,OrderedGroundPrimitiveCollection:()=>sd.Z,OrientedBoundingBox:()=>An.Z,OrthographicFrustum:()=>bn.Z,OrthographicOffCenterFrustum:()=>Pn.Z,Packable:()=>Dn.Z,PackableForInterpolation:()=>In.Z,Particle:()=>ld.Z,ParticleBurst:()=>cd.Z,ParticleEmitter:()=>dd.Z,ParticleSystem:()=>md.Z,Pass:()=>hr.Z,PassState:()=>gr.Z,PathGraphics:()=>aa.Z,PathVisualizer:()=>ra.Z,PeliasGeocoderService:()=>Fn.Z,PerInstanceColorAppearance:()=>ud.Z,PerformanceDisplay:()=>pd.Z,PerformanceWatchdog:()=>jg.Z,PerformanceWatchdogViewModel:()=>Qg.Z,PerspectiveFrustum:()=>Ln.Z,PerspectiveOffCenterFrustum:()=>Nn.Z,PickDepth:()=>fd.Z,PickDepthFramebuffer:()=>hd.Z,PickFramebuffer:()=>gd.Z,Picking:()=>_d.Z,PickingPipelineStage:()=>qf.Z,PinBuilder:()=>Rn.Z,PixelDatatype:()=>_r.Z,PixelFormat:()=>On.Z,Plane:()=>Mn.Z,PlaneGeometry:()=>Hn.Z,PlaneGeometryUpdater:()=>sa.Z,PlaneGraphics:()=>la.Z,PlaneOutlineGeometry:()=>Wn.Z,PntsLoader:()=>jf.Z,PntsParser:()=>vd.Z,PointCloud:()=>yd.Z,PointCloud3DTileContent:()=>xd.Z,PointCloudAttenuationPipelineStage:()=>Qf.Z,PointCloudEyeDomeLighting:()=>Cd.Z,PointCloudShading:()=>Zd.Z,PointGraphics:()=>ca.Z,PointPrimitive:()=>Td.Z,PointPrimitiveCollection:()=>Ed.Z,PointVisualizer:()=>da.Z,PolygonGeometry:()=>Gn.Z,PolygonGeometryLibrary:()=>Bn.Z,PolygonGeometryUpdater:()=>ma.Z,PolygonGraphics:()=>ua.Z,PolygonHierarchy:()=>Un.Z,PolygonOutlineGeometry:()=>Vn.Z,PolygonPipeline:()=>kn.Z,Polyline:()=>wd.Z,PolylineArrowMaterialProperty:()=>pa.Z,PolylineCollection:()=>Sd.Z,PolylineColorAppearance:()=>zd.Z,PolylineDashMaterialProperty:()=>fa.Z,PolylineGeometry:()=>Yn.Z,PolylineGeometryUpdater:()=>ha.Z,PolylineGlowMaterialProperty:()=>ga.Z,PolylineGraphics:()=>_a.Z,PolylineMaterialAppearance:()=>Ad.Z,PolylineOutlineMaterialProperty:()=>va.Z,PolylinePipeline:()=>Xn.Z,PolylineVisualizer:()=>ya.Z,PolylineVolumeGeometry:()=>qn.Z,PolylineVolumeGeometryLibrary:()=>jn.Z,PolylineVolumeGeometryUpdater:()=>xa.Z,PolylineVolumeGraphics:()=>Ca.Z,PolylineVolumeOutlineGeometry:()=>Qn.Z,PositionProperty:()=>Za.Z,PositionPropertyArray:()=>Ta.Z,PostProcessStage:()=>bd.Z,PostProcessStageCollection:()=>Pd.Z,PostProcessStageComposite:()=>Dd.Z,PostProcessStageLibrary:()=>Id.Z,PostProcessStageSampleMode:()=>Fd.Z,PostProcessStageTextureCache:()=>Ld.Z,Primitive:()=>Nd.Z,PrimitiveCollection:()=>Rd.Z,PrimitivePipeline:()=>Od.Z,PrimitiveRenderResources:()=>Kf.Z,PrimitiveState:()=>Md.Z,PrimitiveType:()=>Kn.Z,ProjectionPicker:()=>Kg.Z,ProjectionPickerViewModel:()=>Jg.Z,Property:()=>Ea.Z,PropertyArray:()=>wa.Z,PropertyBag:()=>Sa.Z,PropertyTable:()=>Hd.Z,PropertyTexture:()=>Wd.Z,PropertyTextureProperty:()=>Gd.Z,ProviderViewModel:()=>Dg.Z,Proxy:()=>Jn.Z,QuadraticRealPolynomial:()=>$n.Z,QuadtreeOccluders:()=>Bd.Z,QuadtreePrimitive:()=>Ud.Z,QuadtreeTile:()=>Vd.Z,QuadtreeTileLoadState:()=>kd.Z,QuadtreeTileProvider:()=>Yd.Z,QuantizedMeshTerrainData:()=>et.Z,QuarticRealPolynomial:()=>nt.Z,Quaternion:()=>tt.Z,QuaternionSpline:()=>ot.Z,Queue:()=>it.Z,Ray:()=>at.Z,Rectangle:()=>rt.Z,RectangleCollisionChecker:()=>st.Z,RectangleGeometry:()=>lt.Z,RectangleGeometryLibrary:()=>ct.Z,RectangleGeometryUpdater:()=>za.Z,RectangleGraphics:()=>Aa.Z,RectangleOutlineGeometry:()=>dt.Z,ReferenceFrame:()=>mt.Z,ReferenceProperty:()=>ba.Z,RenderState:()=>vr.Z,Renderbuffer:()=>yr.Z,RenderbufferFormat:()=>xr.Z,Request:()=>ut.Z,RequestErrorEvent:()=>pt.Z,RequestScheduler:()=>ft.Z,RequestState:()=>ht.Z,RequestType:()=>gt.Z,Resource:()=>_t.Z,ResourceCache:()=>Xd.Z,ResourceCacheKey:()=>qd.Z,ResourceLoader:()=>jd.Z,ResourceLoaderState:()=>Qd.Z,Rotation:()=>Pa.Z,RuntimeError:()=>vt.Z,S2Cell:()=>yt.Z,SDFSettings:()=>Kd.Z,SampledPositionProperty:()=>Da.Z,SampledProperty:()=>Ia.Z,Sampler:()=>Cr.Z,ScaledPositionProperty:()=>Fa.Z,Scene:()=>Jd.Z,SceneFramebuffer:()=>$d.Z,SceneMode:()=>em.Z,SceneModePicker:()=>$g.Z,SceneModePickerViewModel:()=>e_.Z,SceneTransforms:()=>nm.Z,SceneTransitioner:()=>tm.Z,ScreenSpaceCameraController:()=>om.Z,ScreenSpaceEventHandler:()=>xt.Z,ScreenSpaceEventType:()=>Ct.Z,SelectedFeatureIdPipelineStage:()=>Jf.Z,SelectionIndicator:()=>n_.Z,SelectionIndicatorViewModel:()=>t_.Z,ShaderBuilder:()=>Zr.Z,ShaderCache:()=>Tr.Z,ShaderDestination:()=>Er.Z,ShaderFunction:()=>wr.Z,ShaderProgram:()=>Sr.Z,ShaderSource:()=>zr.Z,ShaderStruct:()=>Ar.Z,ShadowMap:()=>im.Z,ShadowMapShader:()=>am.Z,ShadowMode:()=>rm.Z,ShadowVolumeAppearance:()=>sm.Z,ShowGeometryInstanceAttribute:()=>Zt.Z,Simon1994PlanetaryPositions:()=>Tt.Z,SimplePolylineGeometry:()=>Et.Z,SingleTileImageryProvider:()=>lm.Z,SkyAtmosphere:()=>cm.Z,SkyBox:()=>dm.Z,SphereEmitter:()=>mm.Z,SphereGeometry:()=>wt.Z,SphereOutlineGeometry:()=>St.Z,Spherical:()=>zt.Z,Spline:()=>At.Z,StaticGeometryColorBatch:()=>La.Z,StaticGeometryPerMaterialBatch:()=>Na.Z,StaticGroundGeometryColorBatch:()=>Ra.Z,StaticGroundGeometryPerMaterialBatch:()=>Oa.Z,StaticGroundPolylinePerMaterialBatch:()=>Ma.Z,StaticOutlineGeometryBatch:()=>Ha.Z,StencilConstants:()=>um.Z,StencilFunction:()=>pm.Z,StencilOperation:()=>fm.Z,StripeMaterialProperty:()=>Wa.Z,StripeOrientation:()=>Ga.Z,StyleCommandsNeeded:()=>$f.Z,StyleExpression:()=>hm.Z,Sun:()=>gm.Z,SunLight:()=>_m.Z,SunPostProcess:()=>vm.Z,SupportedImageFormats:()=>ym.Z,SvgPathBindingHandler:()=>Up.Z,TaskProcessor:()=>bt.Z,TerrainData:()=>Pt.Z,TerrainEncoding:()=>Dt.Z,TerrainExaggeration:()=>It.Z,TerrainFillMesh:()=>xm.Z,TerrainMesh:()=>Ft.Z,TerrainOffsetProperty:()=>Ba.Z,TerrainProvider:()=>Lt.Z,TerrainQuantization:()=>Nt.Z,TerrainState:()=>Cm.Z,Texture:()=>br.Z,TextureAtlas:()=>Zm.Z,TextureCache:()=>Pr.Z,TextureMagnificationFilter:()=>Dr.Z,TextureManager:()=>eh.Z,TextureMinificationFilter:()=>Ir.Z,TextureUniform:()=>nh.Z,TextureWrap:()=>Fr.Z,TileAvailability:()=>Rt.Z,TileBoundingRegion:()=>Tm.Z,TileBoundingS2Cell:()=>Em.Z,TileBoundingSphere:()=>wm.Z,TileBoundingVolume:()=>Sm.Z,TileCoordinatesImageryProvider:()=>zm.Z,TileDiscardPolicy:()=>Am.Z,TileEdge:()=>Ot.Z,TileImagery:()=>bm.Z,TileMapServiceImageryProvider:()=>Pm.Z,TileMetadata:()=>Dm.Z,TileOrientedBoundingBox:()=>Im.Z,TileProviderError:()=>Mt.Z,TileReplacementQueue:()=>Fm.Z,TileSelectionResult:()=>Lm.Z,TileState:()=>Nm.Z,Tileset3DTileContent:()=>Rm.Z,TilesetMetadata:()=>Om.Z,TilingScheme:()=>Ht.Z,TimeConstants:()=>Wt.Z,TimeDynamicImagery:()=>Mm.Z,TimeDynamicPointCloud:()=>Hm.Z,TimeInterval:()=>Gt.Z,TimeIntervalCollection:()=>Bt.Z,TimeIntervalCollectionPositionProperty:()=>Ua.Z,TimeIntervalCollectionProperty:()=>Va.Z,TimeStandard:()=>Ut.Z,Timeline:()=>o_.Z,TimelineHighlightRange:()=>i_.Z,TimelineTrack:()=>a_.Z,Tipsify:()=>Vt.Z,ToggleButtonViewModel:()=>Vp.Z,Tonemapper:()=>Wm.Z,Transforms:()=>kt.Z,TranslationRotationScale:()=>Yt.Z,TranslucentTileClassification:()=>Gm.Z,TridiagonalSystemSolver:()=>Xt.Z,TrustedServers:()=>qt.Z,Tween:()=>vp.Z,TweenCollection:()=>Bm.Z,UniformState:()=>Lr.Z,UniformType:()=>th.Z,Uri:()=>yp.Z,UrlTemplateImageryProvider:()=>Um.Z,VERSION:()=>Vy,VRButton:()=>r_.Z,VRButtonViewModel:()=>s_.Z,VRTheWorldTerrainProvider:()=>jt.Z,VaryingType:()=>oh.Z,Vector3DTileBatch:()=>Vm.Z,Vector3DTileClampedPolylines:()=>km.Z,Vector3DTileContent:()=>Ym.Z,Vector3DTileGeometry:()=>Xm.Z,Vector3DTilePoints:()=>qm.Z,Vector3DTilePolygons:()=>jm.Z,Vector3DTilePolylines:()=>Qm.Z,Vector3DTilePrimitive:()=>Km.Z,VelocityOrientationProperty:()=>ka.Z,VelocityVectorProperty:()=>Ya.Z,VertexArray:()=>Nr.Z,VertexArrayFacade:()=>Rr.Z,VertexAttributeSemantic:()=>Jm.Z,VertexFormat:()=>Qt.Z,VerticalOrigin:()=>$m.Z,VideoSynchronizer:()=>Kt.Z,View:()=>eu.Z,Viewer:()=>C_,ViewportQuad:()=>nu.Z,Visibility:()=>Jt.Z,Visualizer:()=>Xa.Z,VulkanConstants:()=>$t.Z,WallGeometry:()=>eo.Z,WallGeometryLibrary:()=>no.Z,WallGeometryUpdater:()=>qa.Z,WallGraphics:()=>ja.Z,WallOutlineGeometry:()=>to.Z,WebGLConstants:()=>oo.Z,WebMapServiceImageryProvider:()=>tu.Z,WebMapTileServiceImageryProvider:()=>ou.Z,WebMercatorProjection:()=>io.Z,WebMercatorTilingScheme:()=>ao.Z,WeightSpline:()=>ro.Z,WindingOrder:()=>so.Z,_shadersAcesTonemappingStage:()=>tg.Z,_shadersAdditiveBlend:()=>og.Z,_shadersAdjustTranslucentFS:()=>Zu.Z,_shadersAllMaterialAppearanceFS:()=>ah.Z,_shadersAllMaterialAppearanceVS:()=>rh.Z,_shadersAmbientOcclusionGenerate:()=>ig.Z,_shadersAmbientOcclusionModulate:()=>ag.Z,_shadersAspectRampMaterial:()=>xh.Z,_shadersBasicMaterialAppearanceFS:()=>sh.Z,_shadersBasicMaterialAppearanceVS:()=>lh.Z,_shadersBillboardCollectionFS:()=>Tu.Z,_shadersBillboardCollectionVS:()=>Eu.Z,_shadersBlackAndWhite:()=>rg.Z,_shadersBloomComposite:()=>sg.Z,_shadersBrdfLutGeneratorFS:()=>wu.Z,_shadersBrightPass:()=>lg.Z,_shadersBrightness:()=>cg.Z,_shadersBumpMapMaterial:()=>Ch.Z,_shadersCPUStylingStageFS:()=>Mh.Z,_shadersCPUStylingStageVS:()=>Hh.Z,_shadersCheckerboardMaterial:()=>Zh.Z,_shadersCloudCollectionFS:()=>Su.Z,_shadersCloudCollectionVS:()=>zu.Z,_shadersCloudNoiseFS:()=>Au.Z,_shadersCloudNoiseVS:()=>bu.Z,_shadersCompareAndPackTranslucentDepth:()=>Pu.Z,_shadersCompositeOITFS:()=>Du.Z,_shadersCompositeTranslucentClassification:()=>dg.Z,_shadersContrastBias:()=>mg.Z,_shadersCustomShaderStageFS:()=>Wh.Z,_shadersCustomShaderStageVS:()=>Gh.Z,_shadersCzmBuiltins:()=>yh.Z,_shadersDepthOfField:()=>ug.Z,_shadersDepthPlaneFS:()=>Iu.Z,_shadersDepthPlaneVS:()=>Fu.Z,_shadersDepthView:()=>pg.Z,_shadersDepthViewPacked:()=>fg,_shadersDotMaterial:()=>Th.Z,_shadersEdgeDetection:()=>hg.Z,_shadersElevationBandMaterial:()=>Eh.Z,_shadersElevationContourMaterial:()=>wh.Z,_shadersElevationRampMaterial:()=>Sh.Z,_shadersEllipsoidFS:()=>Lu.Z,_shadersEllipsoidSurfaceAppearanceFS:()=>ch.Z,_shadersEllipsoidSurfaceAppearanceVS:()=>dh.Z,_shadersEllipsoidVS:()=>Nu.Z,_shadersFXAA:()=>gg.Z,_shadersFXAA3_11:()=>Ru.Z,_shadersFadeMaterial:()=>zh.Z,_shadersFeatureIdStageFS:()=>Bh.Z,_shadersFeatureIdStageVS:()=>Uh.Z,_shadersFilmicTonemapping:()=>_g.Z,_shadersGaussianBlur1D:()=>vg.Z,_shadersGeometryStageFS:()=>Vh.Z,_shadersGeometryStageVS:()=>kh.Z,_shadersGlobeFS:()=>Ou.Z,_shadersGlobeVS:()=>Mu.Z,_shadersGridMaterial:()=>Ah.Z,_shadersGroundAtmosphere:()=>Hu.Z,_shadersHSBToRGB:()=>cv.Z,_shadersHSLToRGB:()=>dv.Z,_shadersInstancingStageCommon:()=>Yh.Z,_shadersInstancingStageVS:()=>Xh.Z,_shadersLegacyInstancingStageVS:()=>qh.Z,_shadersLensFlare:()=>yg.Z,_shadersLightingStageFS:()=>jh.Z,_shadersMaterialStageFS:()=>Qh.Z,_shadersModelColorStageFS:()=>Kh.Z,_shadersModelExperimentalFS:()=>Jh.Z,_shadersModelExperimentalVS:()=>$h.Z,_shadersModifiedReinhardTonemapping:()=>xg.Z,_shadersNightVision:()=>Cg.Z,_shadersNormalMapMaterial:()=>bh.Z,_shadersOctahedralProjectionAtlasFS:()=>Wu.Z,_shadersOctahedralProjectionFS:()=>Gu.Z,_shadersOctahedralProjectionVS:()=>Bu.Z,_shadersPassThrough:()=>Zg.Z,_shadersPassThroughDepth:()=>Tg.Z,_shadersPerInstanceColorAppearanceFS:()=>mh.Z,_shadersPerInstanceColorAppearanceVS:()=>uh.Z,_shadersPerInstanceFlatColorAppearanceFS:()=>ph.Z,_shadersPerInstanceFlatColorAppearanceVS:()=>fh.Z,_shadersPointCloudAttenuationStageVS:()=>eg.Z,_shadersPointCloudEyeDomeLighting:()=>Eg.Z,_shadersPointPrimitiveCollectionFS:()=>Uu.Z,_shadersPointPrimitiveCollectionVS:()=>Vu.Z,_shadersPolylineArrowMaterial:()=>Ph.Z,_shadersPolylineColorAppearanceVS:()=>hh.Z,_shadersPolylineCommon:()=>ku.Z,_shadersPolylineDashMaterial:()=>Dh.Z,_shadersPolylineFS:()=>Yu.Z,_shadersPolylineGlowMaterial:()=>Ih.Z,_shadersPolylineMaterialAppearanceVS:()=>gh.Z,_shadersPolylineOutlineMaterial:()=>Fh.Z,_shadersPolylineShadowVolumeFS:()=>Xu.Z,_shadersPolylineShadowVolumeMorphFS:()=>qu.Z,_shadersPolylineShadowVolumeMorphVS:()=>ju.Z,_shadersPolylineShadowVolumeVS:()=>Qu.Z,_shadersPolylineVS:()=>Ku.Z,_shadersRGBToHSB:()=>mv.Z,_shadersRGBToHSL:()=>uv.Z,_shadersRGBToXYZ:()=>pv.Z,_shadersReinhardTonemapping:()=>wg.Z,_shadersReprojectWebMercatorFS:()=>Ju.Z,_shadersReprojectWebMercatorVS:()=>$u.Z,_shadersRimLightingMaterial:()=>Lh.Z,_shadersSelectedFeatureIdStageCommon:()=>ng.Z,_shadersShadowVolumeAppearanceFS:()=>ep.Z,_shadersShadowVolumeAppearanceVS:()=>np.Z,_shadersShadowVolumeFS:()=>tp.Z,_shadersSilhouette:()=>Sg.Z,_shadersSkyAtmosphereCommon:()=>op.Z,_shadersSkyAtmosphereFS:()=>ip.Z,_shadersSkyAtmosphereVS:()=>ap.Z,_shadersSkyBoxFS:()=>rp.Z,_shadersSkyBoxVS:()=>sp.Z,_shadersSlopeRampMaterial:()=>Nh.Z,_shadersStripeMaterial:()=>Rh.Z,_shadersSunFS:()=>lp.Z,_shadersSunTextureFS:()=>cp.Z,_shadersSunVS:()=>dp.Z,_shadersTexturedMaterialAppearanceFS:()=>_h.Z,_shadersTexturedMaterialAppearanceVS:()=>vh.Z,_shadersVector3DTileClampedPolylinesFS:()=>mp.Z,_shadersVector3DTileClampedPolylinesVS:()=>up.Z,_shadersVector3DTilePolylinesVS:()=>pp.Z,_shadersVectorTileVS:()=>fp.Z,_shadersViewportQuadFS:()=>hp.Z,_shadersViewportQuadVS:()=>gp.Z,_shadersWater:()=>Oh.Z,_shadersXYZToRGB:()=>fv.Z,_shadersacesTonemapping:()=>hv.Z,_shadersalphaWeight:()=>gv.Z,_shadersantialias:()=>_v.Z,_shadersapproximateSphericalCoordinates:()=>vv.Z,_shadersbackFacing:()=>yv.Z,_shadersbranchFreeTernary:()=>xv.Z,_shaderscascadeColor:()=>Cv.Z,_shaderscascadeDistance:()=>Zv.Z,_shaderscascadeMatrix:()=>Tv.Z,_shaderscascadeWeights:()=>Ev.Z,_shaderscolumbusViewMorph:()=>wv.Z,_shaderscomputePosition:()=>Sv.Z,_shaderscosineAndSine:()=>zv.Z,_shadersdecompressTextureCoordinates:()=>Av.Z,_shadersdefaultPbrMaterial:()=>bv.Z,_shadersdegreesPerRadian:()=>S_.Z,_shadersdepthClamp:()=>Pv.Z,_shadersdepthRange:()=>z_.Z,_shadersdepthRangeStruct:()=>Ly.Z,_shaderseastNorthUpToEyeCoordinates:()=>Dv.Z,_shadersellipsoidContainsPoint:()=>Iv.Z,_shadersellipsoidWgs84TextureCoordinates:()=>Fv.Z,_shadersepsilon1:()=>A_.Z,_shadersepsilon2:()=>b_.Z,_shadersepsilon3:()=>P_.Z,_shadersepsilon4:()=>D_.Z,_shadersepsilon5:()=>I_.Z,_shadersepsilon6:()=>F_.Z,_shadersepsilon7:()=>L_.Z,_shadersequalsEpsilon:()=>Lv.Z,_shaderseyeOffset:()=>Nv.Z,_shaderseyeToWindowCoordinates:()=>Rv.Z,_shadersfastApproximateAtan:()=>Ov.Z,_shadersfog:()=>Mv.Z,_shadersgammaCorrect:()=>Hv.Z,_shadersgeodeticSurfaceNormal:()=>Wv.Z,_shadersgetDefaultMaterial:()=>Gv.Z,_shadersgetLambertDiffuse:()=>Bv.Z,_shadersgetSpecular:()=>Uv.Z,_shadersgetWaterNoise:()=>Vv.Z,_shadershue:()=>kv.Z,_shadersinfinity:()=>N_.Z,_shadersinverseGamma:()=>Yv.Z,_shadersisEmpty:()=>Xv.Z,_shadersisFull:()=>qv.Z,_shaderslatitudeToWebMercatorFraction:()=>jv.Z,_shaderslineDistance:()=>Qv.Z,_shaderslinearToSrgb:()=>Kv.Z,_shadersluminance:()=>Jv.Z,_shadersmaterial:()=>Ny.Z,_shadersmaterialInput:()=>Ry.Z,_shadersmetersPerPixel:()=>$v.Z,_shadersmodelMaterial:()=>Oy.Z,_shadersmodelToWindowCoordinates:()=>ey.Z,_shadersmodelVertexOutput:()=>My.Z,_shadersmultiplyWithColorBalance:()=>ny.Z,_shadersnearFarScalar:()=>ty.Z,_shadersoctDecode:()=>oy.Z,_shadersoneOverPi:()=>R_.Z,_shadersoneOverTwoPi:()=>O_.Z,_shaderspackDepth:()=>iy.Z,_shaderspassCesium3DTile:()=>M_.Z,_shaderspassCesium3DTileClassification:()=>H_.Z,_shaderspassCesium3DTileClassificationIgnoreShow:()=>W_.Z,_shaderspassClassification:()=>G_.Z,_shaderspassCompute:()=>B_.Z,_shaderspassEnvironment:()=>U_.Z,_shaderspassGlobe:()=>V_.Z,_shaderspassOpaque:()=>k_.Z,_shaderspassOverlay:()=>Y_.Z,_shaderspassTerrainClassification:()=>X_.Z,_shaderspassTranslucent:()=>q_.Z,_shaderspbrLighting:()=>ay.Z,_shaderspbrMetallicRoughnessMaterial:()=>ry.Z,_shaderspbrParameters:()=>Hy.Z,_shaderspbrSpecularGlossinessMaterial:()=>sy.Z,_shadersphong:()=>ly.Z,_shaderspi:()=>j_.Z,_shaderspiOverFour:()=>Q_.Z,_shaderspiOverSix:()=>K_.Z,_shaderspiOverThree:()=>J_.Z,_shaderspiOverTwo:()=>$_.Z,_shadersplaneDistance:()=>cy.Z,_shaderspointAlongRay:()=>dy.Z,_shadersradiansPerDegree:()=>ev.Z,_shadersray:()=>Wy.Z,_shadersrayEllipsoidIntersectionInterval:()=>my.Z,_shadersraySegment:()=>Gy.Z,_shadersreadDepth:()=>uy.Z,_shadersreadNonPerspective:()=>py.Z,_shadersreverseLogDepth:()=>fy.Z,_shaderssampleOctahedralProjection:()=>hy.Z,_shaderssaturation:()=>gy.Z,_shaderssceneMode2D:()=>nv.Z,_shaderssceneMode3D:()=>tv.Z,_shaderssceneModeColumbusView:()=>ov.Z,_shaderssceneModeMorphing:()=>iv.Z,_shadersshadowDepthCompare:()=>_y.Z,_shadersshadowParameters:()=>By.Z,_shadersshadowVisibility:()=>vy.Z,_shaderssignNotZero:()=>yy.Z,_shaderssolarRadius:()=>av.Z,_shaderssphericalHarmonics:()=>xy.Z,_shaderssrgbToLinear:()=>Cy.Z,_shaderstangentToEyeSpaceMatrix:()=>Zy.Z,_shadersthreePiOver2:()=>rv.Z,_shaderstransformPlane:()=>Ty.Z,_shaderstranslateRelativeToEye:()=>Ey.Z,_shaderstranslucentPhong:()=>wy.Z,_shaderstranspose:()=>Sy.Z,_shaderstwoPi:()=>sv.Z,_shadersunpackDepth:()=>zy.Z,_shadersunpackFloat:()=>Ay.Z,_shadersvertexLogDepth:()=>by.Z,_shaderswebMercatorMaxLatitude:()=>lv.Z,_shaderswindowToEyeCoordinates:()=>Py.Z,_shaderswriteDepthClamp:()=>Dy.Z,_shaderswriteLogDepth:()=>Iy.Z,_shaderswriteNonPerspective:()=>Fy.Z,addBuffer:()=>jp.Z,addDefaults:()=>Qp.Z,addExtensionsRequired:()=>Kp.Z,addExtensionsUsed:()=>Jp.Z,addPipelineExtras:()=>$p.Z,addToArray:()=>ef.Z,appendForwardSlash:()=>lo.Z,arrayFill:()=>co.Z,arrayRemoveDuplicates:()=>mo.Z,arraySlice:()=>uo.Z,barycentricCoordinates:()=>po.Z,binarySearch:()=>fo.Z,bitmap_sdf:()=>xp.Z,buildDrawCommands:()=>ih.Z,buildModuleUrl:()=>ho.Z,cancelAnimationFrame:()=>go.Z,clone:()=>_o.Z,combine:()=>vo.Z,computeFlyToLocationForRectangle:()=>iu.Z,createBillboardPointCallback:()=>au.Z,createCommand:()=>kp.Z,createDefaultImageryProviderViewModels:()=>Ig.Z,createDefaultTerrainProviderViewModels:()=>Fg.Z,createElevationBandMaterial:()=>ru.Z,createGuid:()=>yo.Z,createMaterialPropertyDescriptor:()=>Qa.Z,createOsmBuildings:()=>su.Z,createPropertyDescriptor:()=>Ka.Z,createRawPropertyDescriptor:()=>Ja.Z,createTangentSpaceDebugPrimitive:()=>lu.Z,createTaskProcessorWorker:()=>Uy.Z,createUniform:()=>Or.Z,createUniformArray:()=>Mr.Z,createWorldImagery:()=>cu.Z,createWorldTerrain:()=>xo.Z,decodeGoogleEarthEnterpriseData:()=>Co.Z,decodeVectorPolylinePositions:()=>Zo.Z,defaultValue:()=>To.Z,defined:()=>Eo.Z,deprecationWarning:()=>wo.Z,destroyObject:()=>So.Z,dompurify:()=>Cp.Z,earcut:()=>Zp.Z,exportKml:()=>$a.Z,findAccessorMinMax:()=>nf.Z,findGroupMetadata:()=>du.Z,forEachTextureInMaterial:()=>tf.Z,formatError:()=>zo.Z,freezeRenderState:()=>Hr.Z,getAbsoluteUri:()=>Ao.Z,getAccessorByteStride:()=>of.Z,getBaseUri:()=>bo.Z,getBinaryAccessor:()=>mu.Z,getClipAndStyleCode:()=>uu.Z,getClippingFunction:()=>pu.Z,getComponentReader:()=>af.Z,getElement:()=>Yp.Z,getExtensionFromUri:()=>Po.Z,getFilenameFromUri:()=>Do.Z,getImagePixels:()=>Io.Z,getJsonFromTypedArray:()=>Fo.Z,getMagic:()=>Lo.Z,getStringFromTypedArray:()=>No.Z,getTimestamp:()=>Ro.Z,grapheme_splitter:()=>Tp.Z,hasExtension:()=>fu.Z,heightReferenceOnEntityPropertyChanged:()=>er.Z,isBitSet:()=>Oo.Z,isBlobUri:()=>Mo.Z,isCrossOriginUrl:()=>Ho.Z,isDataUri:()=>Wo.Z,isLeapYear:()=>Go.Z,jsep:()=>Ep.Z,kdbush:()=>wp.Z,knockout:()=>Ap.Z,knockout_3_5_1:()=>Sp.Z,knockout_es5:()=>zp.Z,ktx_parse:()=>bp.Z,lerc:()=>Pp.Z,loadAndExecuteScript:()=>Bo.Z,loadCubeMap:()=>Wr.Z,loadImageFromTypedArray:()=>Uo.Z,loadKTX2:()=>Vo.Z,mergeSort:()=>ko.Z,mersenne_twister:()=>Dp.Z,meshoptimizer:()=>Ip.Z,modernizeShader:()=>Gr.Z,moveTechniqueRenderStates:()=>rf.Z,moveTechniquesToExtension:()=>sf.Z,nosleep:()=>Fp.Z,numberOfComponentsForType:()=>lf.Z,objectToQuery:()=>Yo.Z,oneTimeWarning:()=>Xo.Z,pako:()=>Lp.Z,parseBatchTable:()=>hu.Z,parseBoundingVolumeSemantics:()=>gu.Z,parseFeatureMetadata:()=>_u.Z,parseFeatureMetadataLegacy:()=>vu.Z,parseGlb:()=>cf.Z,parseResponseHeaders:()=>qo.Z,pointInsideTriangle:()=>jo.Z,preprocess3DTileContent:()=>yu.Z,processModelMaterialsCommon:()=>xu.Z,processPbrMaterials:()=>Cu.Z,protobufjs:()=>Np.Z,queryToObject:()=>Qo.Z,rbush:()=>Rp.Z,readAccessorPacked:()=>df.Z,removeExtensionsRequired:()=>mf.Z,removeExtensionsUsed:()=>uf.Z,removePipelineExtras:()=>pf.Z,removeUnusedElements:()=>ff.Z,requestAnimationFrame:()=>Ko.Z,sampleTerrain:()=>Jo.Z,sampleTerrainMostDetailed:()=>$o.Z,scaleToGeodeticSurface:()=>ei.Z,subdivideArray:()=>ni.Z,subscribeAndEvaluate:()=>Xp.Z,topojson:()=>Op.Z,updateAccessorComponentTypes:()=>hf.Z,updateVersion:()=>gf.Z,usesExtension:()=>_f.Z,viewerCesium3DTilesInspectorMixin:()=>Z_.Z,viewerCesiumInspectorMixin:()=>T_.Z,viewerDragDropMixin:()=>E_.Z,viewerPerformanceWatchdogMixin:()=>w_.Z,webGLConstantToGlslType:()=>ti.Z,when:()=>Mp.Z,wrapFunction:()=>oi.Z,writeTextToCanvas:()=>ii.Z,zip:()=>Hp.Z});var o=t(593285),i=t(564215),a=t(840588),r=t(255635),s=t(484768),l=t(385674),c=t(445919),d=t(789685),m=t(406562),u=t(473188),p=t(140184),f=t(958469),h=t(607796),g=t(208564),_=t(924184),v=t(725897),y=t(203987),x=t(66985),C=t(528464),Z=t(56782),T=t(498399),E=t(487238),w=t(974072),S=t(717664),z=t(591382),A=t(549816),b=t(990124),P=t(287746),D=t(374761),I=t(256109),F=t(832420),L=t(128838),N=t(911192),R=t(887720),O=t(440145),M=t(765576),H=t(938738),W=t(376564),G=t(20237),B=t(258493),U=t(621432),V=t(408713),k=t(561973),Y=t(205857),X=t(83575),q=t(429087),j=t(32821),Q=t(61838),K=t(148220),J=t(902740),$=t(517650),ee=t(172751),ne=t(556763),te=t(777059),oe=t(961409),ie=t(240404),ae=t(182423),re=t(665363),se=t(217607),le=t(506004),ce=t(36604),de=t(572938),me=t(375537),ue=t(131972),pe=t(444773),fe=t(447592),he=t(259674),ge=t(71576),_e=t(693547),ve=t(17793),ye=t(183198),xe=t(721703),Ce=t(38968),Ze=t(535574),Te=t(273891),Ee=t(163199),we=t(807220),Se=t(510251),ze=t(138527),Ae=t(566604),be=t(798339),Pe=t(726574),De=t(589977),Ie=t(476408),Fe=t(202199),Le=t(342674),Ne=t(242745),Re=t(172077),Oe=t(741425),Me=t(959058),He=t(465794),We=t(940754),Ge=t(551504),Be=t(500903),Ue=t(250454),Ve=t(803689),ke=t(180646),Ye=t(579121),Xe=t(15949),qe=t(138111),je=t(954627),Qe=t(364659),Ke=t(905883),Je=t(320066),$e=t(395395),en=t(31550),nn=t(638296),tn=t(388409),on=t(588861),an=t(252560),rn=t(423211),sn=t(446529),ln=t(466425),cn=t(917007),dn=t(132735),mn=t(990311),un=t(988599),pn=t(452364),fn=t(45047),hn=t(992986),gn=t(576369),_n=t(994925),vn=t(902865),yn=t(957264),xn=t(702733),Cn=t(683504),Zn=t(641418),Tn=t(40296),En=t(172012),wn=t(727970),Sn=t(304073),zn=t(307505),An=t(309682),bn=t(171936),Pn=t(207883),Dn=t(426038),In=t(375213),Fn=t(885713),Ln=t(76936),Nn=t(988802),Rn=t(651994),On=t(613673),Mn=t(293378),Hn=t(414397),Wn=t(188381),Gn=t(723403),Bn=t(386919),Un=t(730752),Vn=t(476478),kn=t(206827),Yn=t(573633),Xn=t(430986),qn=t(64547),jn=t(34906),Qn=t(569567),Kn=t(872058),Jn=t(446791),$n=t(733496),et=t(532311),nt=t(887249),tt=t(681474),ot=t(148594),it=t(252556),at=t(717271),rt=t(288428),st=t(937977),lt=t(280050),ct=t(788134),dt=t(352603),mt=t(880369),ut=t(525503),pt=t(384079),ft=t(442304),ht=t(27772),gt=t(58883),_t=t(546384),vt=t(740010),yt=t(649713),xt=t(911990),Ct=t(652966),Zt=t(280599),Tt=t(430816),Et=t(759622),wt=t(999999),St=t(656440),zt=t(659532),At=t(735385),bt=t(792847),Pt=t(434001),Dt=t(919783),It=t(626267),Ft=t(716994),Lt=t(30533),Nt=t(533347),Rt=t(27140),Ot=t(452900),Mt=t(555228),Ht=t(898214),Wt=t(136864),Gt=t(193325),Bt=t(136869),Ut=t(508331),Vt=t(862114),kt=t(799533),Yt=t(700618),Xt=t(840636),qt=t(216475),jt=t(344980),Qt=t(430738),Kt=t(703808),Jt=t(910513),$t=t(934681),eo=t(326735),no=t(106572),to=t(423191),oo=t(83043),io=t(932003),ao=t(53975),ro=t(205980),so=t(20809),lo=t(972360),co=t(173521),mo=t(622592),uo=t(205230),po=t(834260),fo=t(5095),ho=t(95401),go=t(815001),_o=t(489013),vo=t(635666),yo=t(818494),xo=t(931177),Co=t(209205),Zo=t(766640),To=t(841604),Eo=t(911926),wo=t(290233),So=t(292517),zo=t(441972),Ao=t(935149),bo=t(851719),Po=t(794645),Do=t(363453),Io=t(972685),Fo=t(980719),Lo=t(740167),No=t(160447),Ro=t(569210),Oo=t(679737),Mo=t(551673),Ho=t(959649),Wo=t(175558),Go=t(246418),Bo=t(876237),Uo=t(881212),Vo=t(612737),ko=t(351706),Yo=t(951381),Xo=t(489122),qo=t(11568),jo=t(9069),Qo=t(234357),Ko=t(286578),Jo=t(827521),$o=t(916881),ei=t(580172),ni=t(259138),ti=t(913125),oi=t(788172),ii=t(716833),ai=t(792619),ri=t(550975),si=t(408040),li=t(118383),ci=t(889099),di=t(734169),mi=t(185143),ui=t(301992),pi=t(734023),fi=t(286918),hi=t(370011),gi=t(467768),_i=t(469776),vi=t(673324),yi=t(698690),xi=t(118690),Ci=t(826891),Zi=t(789901),Ti=t(649149),Ei=t(439383),wi=t(663349),Si=t(137401),zi=t(726473),Ai=t(769829),bi=t(751052),Pi=t(791468),Di=t(910304),Ii=t(683494),Fi=t(303686),Li=t(258804),Ni=t(966889),Ri=t(526905),Oi=t(273515),Mi=t(393198),Hi=t(45957),Wi=t(439141),Gi=t(644738),Bi=t(742943),Ui=t(44838),Vi=t(225081),ki=t(317833),Yi=t(529791),Xi=t(554389),qi=t(25399),ji=t(671949),Qi=t(63378),Ki=t(942863),Ji=t(619932),$i=t(920349),ea=t(703223),na=t(697769),ta=t(852432),oa=t(185896),ia=t(423244),aa=t(366150),ra=t(464964),sa=t(963485),la=t(954694),ca=t(780410),da=t(837569),ma=t(201758),ua=t(602949),pa=t(756387),fa=t(632820),ha=t(932992),ga=t(99871),_a=t(241512),va=t(464787),ya=t(17253),xa=t(26487),Ca=t(778394),Za=t(431480),Ta=t(824774),Ea=t(669242),wa=t(819383),Sa=t(288864),za=t(899660),Aa=t(997247),ba=t(421897),Pa=t(322313),Da=t(747128),Ia=t(761252),Fa=t(646705),La=t(854100),Na=t(885681),Ra=t(467871),Oa=t(602601),Ma=t(772178),Ha=t(234252),Wa=t(953340),Ga=t(149296),Ba=t(737533),Ua=t(724745),Va=t(472517),ka=t(66202),Ya=t(502203),Xa=t(859323),qa=t(868639),ja=t(10737),Qa=t(182523),Ka=t(194010),Ja=t(725729),$a=t(628882),er=t(251401),nr=t(312361),tr=t(305562),or=t(384552),ir=t(749827),ar=t(106077),rr=t(463276),sr=t(243485),lr=t(343323),cr=t(535545),dr=t(449254),mr=t(919376),ur=t(764250),pr=t(690961),fr=t(803010),hr=t(748072),gr=t(618542),_r=t(149559),vr=t(701558),yr=t(252130),xr=t(598397),Cr=t(156655),Zr=t(440791),Tr=t(573156),Er=t(388852),wr=t(415076),Sr=t(968623),zr=t(858279),Ar=t(391106),br=t(738525),Pr=t(331116),Dr=t(605925),Ir=t(583854),Fr=t(458134),Lr=t(430497),Nr=t(30955),Rr=t(780943),Or=t(252638),Mr=t(219585),Hr=t(843657),Wr=t(501275),Gr=t(581398),Br=t(549600),Ur=t(301128),Vr=t(467672),kr=t(785826),Yr=t(476440),Xr=t(652088),qr=t(766597),jr=t(14477),Qr=t(943373),Kr=t(114706),Jr=t(216194),$r=t(455595),es=t(410223),ns=t(821768),ts=t(124168),os=t(556018),is=t(828320),as=t(566922),rs=t(775295),ss=t(832680),ls=t(923917),cs=t(240800),ds=t(140531),ms=t(100236),us=t(242176),ps=t(138005),fs=t(675839),hs=t(796286),gs=t(335599),_s=t(892572),vs=t(171380),ys=t(662123),xs=t(655393),Cs=t(183154),Zs=t(400897),Ts=t(679566),Es=t(489402),ws=t(778442),Ss=t(166305),zs=t(953590),As=t(132194),bs=t(748045),Ps=t(261808),Ds=t(999878),Is=t(917648),Fs=t(987082),Ls=t(477418),Ns=t(968536),Rs=t(41060),Os=t(561628),Ms=t(213952),Hs=t(59011),Ws=t(227436),Gs=t(914624),Bs=t(517289),Us=t(108953),Vs=t(253665),ks=t(77068),Ys=t(558192),Xs=t(811936),qs=t(190742),js=t(293624),Qs=t(140891),Ks=t(959458),Js=t(471761),$s=t(282650),el=t(767157),nl=t(955766),tl=t(65722),ol=t(679529),il=t(516575),al=t(52515),rl=t(923047),sl=t(116319),ll=t(884692),cl=t(43254),dl=t(698219),ml=t(783893),ul=t(708230),pl=t(989676),fl=t(919223),hl=t(118546),gl=t(786793),_l=t(6870),vl=t(663058),yl=t(604504),xl=t(793448),Cl=t(174321),Zl=t(649763),Tl=t(45312),El=t(841624),wl=t(966006),Sl=t(730732),zl=t(356999),Al=t(163868),bl=t(151228),Pl=t(538959),Dl=t(858804),Il=t(170081),Fl=t(4643),Ll=t(977310),Nl=t(340463),Rl=t(448357),Ol=t(86525),Ml=t(582825),Hl=t(32105),Wl=t(219583),Gl=t(633109),Bl=t(103511),Ul=t(190910),Vl=t(96009),kl=t(146845),Yl=t(262629),Xl=t(841756),ql=t(125194),jl=t(617016),Ql=t(14942),Kl=t(582846),Jl=t(888412),$l=t(702270),ec=t(294389),nc=t(506154),tc=t(863339),oc=t(729575),ic=t(174659),ac=t(747708),rc=t(483998),sc=t(642578),lc=t(866241),cc=t(728946),dc=t(957931),mc=t(443458),uc=t(657863),pc=t(425503),fc=t(149946),hc=t(756146),gc=t(617210),_c=t(536823),vc=t(832324),yc=t(208782),xc=t(862465),Cc=t(632018),Zc=t(518042),Tc=t(601239),Ec=t(175624),wc=t(749336),Sc=t(593242),zc=t(159346),Ac=t(293566),bc=t(892899),Pc=t(801666),Dc=t(822916),Ic=t(575991),Fc=t(433555),Lc=t(380512),Nc=t(738709),Rc=t(913431),Oc=t(540426),Mc=t(601434),Hc=t(911345),Wc=t(465152),Gc=t(799566),Bc=t(456435),Uc=t(990492),Vc=t(132505),kc=t(284575),Yc=t(266406),Xc=t(873857),qc=t(755792),jc=t(26e4),Qc=t(629978),Kc=t(282023),Jc=t(134215),$c=t(244164),ed=t(978917),nd=t(793536),td=t(282678),od=t(508011),id=t(454173),ad=t(640828),rd=t(276727),sd=t(355929),ld=t(228948),cd=t(690135),dd=t(458260),md=t(170682),ud=t(768284),pd=t(479689),fd=t(392510),hd=t(940863),gd=t(767844),_d=t(642783),vd=t(95862),yd=t(424102),xd=t(718847),Cd=t(94233),Zd=t(501433),Td=t(317718),Ed=t(827750),wd=t(249709),Sd=t(419340),zd=t(12713),Ad=t(252632),bd=t(409382),Pd=t(266367),Dd=t(46930),Id=t(735888),Fd=t(173993),Ld=t(745295),Nd=t(536460),Rd=t(664101),Od=t(292800),Md=t(480117),Hd=t(203457),Wd=t(983470),Gd=t(457032),Bd=t(579348),Ud=t(770347),Vd=t(626821),kd=t(579456),Yd=t(917775),Xd=t(508849),qd=t(581511),jd=t(771443),Qd=t(415235),Kd=t(7633),Jd=t(863279),$d=t(331356),em=t(65388),nm=t(715315),tm=t(455660),om=t(748784),im=t(707858),am=t(797584),rm=t(416798),sm=t(222922),lm=t(977558),cm=t(303362),dm=t(799777),mm=t(729217),um=t(392899),pm=t(482585),fm=t(501498),hm=t(680325),gm=t(901591),_m=t(495718),vm=t(740075),ym=t(680352),xm=t(932592),Cm=t(588331),Zm=t(2644),Tm=t(167301),Em=t(275584),wm=t(890353),Sm=t(951628),zm=t(958680),Am=t(984511),bm=t(610324),Pm=t(28021),Dm=t(740820),Im=t(714524),Fm=t(607900),Lm=t(503261),Nm=t(302199),Rm=t(31070),Om=t(684341),Mm=t(264867),Hm=t(863975),Wm=t(594726),Gm=t(38981),Bm=t(46932),Um=t(250664),Vm=t(842987),km=t(500559),Ym=t(454737),Xm=t(898422),qm=t(215109),jm=t(540798),Qm=t(417745),Km=t(361663),Jm=t(787562),$m=t(226633),eu=t(691119),nu=t(650353),tu=t(962706),ou=t(915266),iu=t(226669),au=t(454109),ru=t(634572),su=t(685519),lu=t(230579),cu=t(762138),du=t(769058),mu=t(179698),uu=t(297754),pu=t(115127),fu=t(87053),hu=t(666275),gu=t(253682),_u=t(137722),vu=t(263789),yu=t(649287),xu=t(629337),Cu=t(562006),Zu=t(53595),Tu=t(78218),Eu=t(56821),wu=t(998052),Su=t(524341),zu=t(245536),Au=t(646791),bu=t(133893),Pu=t(170179),Du=t(425458),Iu=t(364275),Fu=t(187550),Lu=t(822887),Nu=t(631187),Ru=t(116583),Ou=t(239578),Mu=t(850551),Hu=t(886394),Wu=t(179212),Gu=t(29689),Bu=t(154019),Uu=t(455702),Vu=t(841439),ku=t(409721),Yu=t(935691),Xu=t(743295),qu=t(552556),ju=t(972504),Qu=t(57862),Ku=t(464819),Ju=t(154605),$u=t(511762),ep=t(878136),np=t(642625),tp=t(335006),op=t(262628),ip=t(425686),ap=t(854259),rp=t(304725),sp=t(295697),lp=t(737569),cp=t(808943),dp=t(412949),mp=t(196777),up=t(367695),pp=t(767293),fp=t(870782),hp=t(885231),gp=t(450583),_p=t(55073),vp=t(356404),yp=t(226901),xp=t(45607),Cp=t(605712),Zp=t(617638),Tp=t(750304),Ep=t(682350),wp=t(468032),Sp=t(401498),zp=t(702007),Ap=t(714788),bp=t(741059),Pp=t(978720),Dp=t(201165),Ip=t(355684),Fp=t(622291),Lp=t(52938),Np=t(449502),Rp=t(425232),Op=t(421330),Mp=t(297623),Hp=t(106933),Wp=t(13986),Gp=t(926748),Bp=t(885484),Up=t(720316),Vp=t(530815),kp=t(884894),Yp=t(449520),Xp=t(831390),qp=t(879919),jp=t(264709),Qp=t(944229),Kp=t(890898),Jp=t(617172),$p=t(357319),ef=t(243533),nf=t(156012),tf=t(806051),of=t(563569),af=t(272071),rf=t(273918),sf=t(106325),lf=t(389003),cf=t(35477),df=t(329618),mf=t(536958),uf=t(850220),pf=t(215821),ff=t(325921),hf=t(145043),gf=t(939332),_f=t(722577),vf=t(206515),yf=t(770389),xf=t(321901),Cf=t(212344),Zf=t(824420),Tf=t(792375),Ef=t(64679),wf=t(788528),Sf=t(110468),zf=t(634464),Af=t(126092),bf=t(377570),Pf=t(140283),Df=t(76423),If=t(126589),Ff=t(700935),Lf=t(561798),Nf=t(36324),Rf=t(397016),Of=t(31980),Mf=t(702072),Hf=t(215659),Wf=t(804545),Gf=t(535688),Bf=t(622519),Uf=t(600253),Vf=t(7416),kf=t(868722),Yf=t(273795),Xf=t(838087),qf=t(764915),jf=t(465297),Qf=t(210652),Kf=t(692090),Jf=t(470636),$f=t(785705),eh=t(708809),nh=t(224338),th=t(254139),oh=t(468299),ih=t(960533),ah=t(40962),rh=t(74003),sh=t(697705),lh=t(457315),ch=t(277096),dh=t(469285),mh=t(57928),uh=t(807430),ph=t(340670),fh=t(546071),hh=t(992166),gh=t(395219),_h=t(537300),vh=t(799457),yh=t(929540),xh=t(291762),Ch=t(508515),Zh=t(619998),Th=t(891083),Eh=t(806217),wh=t(260389),Sh=t(294658),zh=t(634869),Ah=t(142871),bh=t(595918),Ph=t(306567),Dh=t(314532),Ih=t(443118),Fh=t(870506),Lh=t(879307),Nh=t(533706),Rh=t(911512),Oh=t(982657),Mh=t(184991),Hh=t(730110),Wh=t(751943),Gh=t(84913),Bh=t(240372),Uh=t(403250),Vh=t(237954),kh=t(289856),Yh=t(591775),Xh=t(685779),qh=t(406731),jh=t(161168),Qh=t(354155),Kh=t(819722),Jh=t(941925),$h=t(830905),eg=t(153460),ng=t(496313),tg=t(602355),og=t(287616),ig=t(516135),ag=t(875787),rg=t(296781),sg=t(713461),lg=t(531494),cg=t(204509),dg=t(770707),mg=t(614593),ug=t(65156),pg=t(792625);const fg="uniform sampler2D u_depthTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    float z_window = czm_unpackDepth(texture2D(u_depthTexture, v_textureCoordinates));\n    z_window = czm_reverseLogDepth(z_window);\n    float n_range = czm_depthRange.near;\n    float f_range = czm_depthRange.far;\n    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\n    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\n    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\n}\n";var hg=t(751077),gg=t(689134),_g=t(938541),vg=t(47020),yg=t(110404),xg=t(348331),Cg=t(102777),Zg=t(84525),Tg=t(723865),Eg=t(78538),wg=t(342432),Sg=t(419256),zg=t(565177),Ag=t(179502),bg=t(578416),Pg=t(274580),Dg=t(227407),Ig=t(303646),Fg=t(739685),Lg=t(486832),Ng=t(768737),Rg=t(970774),Og=t(808062),Mg=t(999488),Hg=t(538006),Wg=t(296935),Gg=t(32918),Bg=t(16664),Ug=t(538379),Vg=t(965378),kg=t(256535),Yg=t(320391),Xg=t(777086),qg=t(23697),jg=t(256845),Qg=t(521142),Kg=t(795836),Jg=t(607182),$g=t(211665),e_=t(590290),n_=t(826886),t_=t(737401),o_=t(167912),i_=t(819148),a_=t(959482),r_=t(325543),s_=t(528487);const l_=new m.Z;function c_(e){const n=e.clock;n.currentTime=e.timeJulian,n.shouldAnimate=!1}function d_(e){const n=e.getPropertyNames();let t="";return n.forEach((function(n){const o=e.getProperty(n);(0,Eo.Z)(o)&&(t+="<tr><th>"+n+"</th><td>"+o+"</td></tr>")})),t.length>0&&(t='<table class="cesium-infoBox-defaultTable"><tbody>'+t+"</tbody></table>"),t}function m_(e){let n;const t=[],o=e.getPropertyNames();for(n=0;n<o.length;n++){const i=o[n];/^name$/i.test(i)?t[0]=e.getProperty(i):/name/i.test(i)?t[1]=e.getProperty(i):/^title$/i.test(i)?t[2]=e.getProperty(i):/^(id|identifier)$/i.test(i)?t[3]=e.getProperty(i):/element/i.test(i)?t[4]=e.getProperty(i):/(id|identifier)$/i.test(i)&&(t[5]=e.getProperty(i))}const i=t.length;for(n=0;n<i;n++){const e=t[n];if((0,Eo.Z)(e)&&""!==e)return e}return"Unnamed Feature"}function u_(e,n){const t=e.scene.pick(n.position);if((0,Eo.Z)(t)){const e=(0,To.Z)(t.id,t.primitive.id);if(e instanceof Oi.Z)return e;if(t instanceof Cs.Z)return new Oi.Z({name:m_(t),description:d_(t),feature:t})}if((0,Eo.Z)(e.scene.globe))return function(e,n){const t=e.scene,o=t.camera.getPickRay(n),i=t.imageryLayers.pickImageryLayerFeatures(o,t);if(!(0,Eo.Z)(i))return;const a=new Oi.Z({id:"Loading...",description:"Loading feature information..."});return(0,Mp.Z)(i,(function(n){if(e.selectedEntity!==a)return;if(!(0,Eo.Z)(n)||0===n.length)return void(e.selectedEntity=g_());const t=n[0],o=new Oi.Z({id:t.name,description:t.description});if((0,Eo.Z)(t.position)){const n=e.scene.globe.ellipsoid.cartographicToCartesian(t.position,h_);o.position=new yi.Z(n)}e.selectedEntity=o}),(function(){e.selectedEntity===a&&(e.selectedEntity=g_())})),a}(e,n.position)}const p_=new dn.Z;function f_(e,n,t){if((0,Eo.Z)(t)){const o=t.clock;if((0,Eo.Z)(o)&&(o.getValue(n),(0,Eo.Z)(e))){const n=o.startTime;let t=o.stopTime;dn.Z.equals(n,t)&&(t=dn.Z.addSeconds(n,yn.Z.EPSILON2,p_)),e.updateFromClock(),e.zoomTo(n,t)}}}const h_=new h.Z;function g_(){return new Oi.Z({id:"None",description:"No features found."})}function __(e,n){if(!(0,Eo.Z)(e))throw new Y.Z("container is required.");e=(0,Yp.Z)(e),n=(0,To.Z)(n,To.Z.EMPTY_OBJECT);const t=!((0,Eo.Z)(n.globe)&&!1===n.globe||(0,Eo.Z)(n.baseLayerPicker)&&!1===n.baseLayerPicker);if(!t&&(0,Eo.Z)(n.selectedImageryProviderViewModel))throw new Y.Z("options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget. Either specify options.imageryProvider instead or set options.baseLayerPicker to true.");if(!t&&(0,Eo.Z)(n.selectedTerrainProviderViewModel))throw new Y.Z("options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget. Either specify options.terrainProvider instead or set options.baseLayerPicker to true.");const o=this,i=document.createElement("div");i.className="cesium-viewer",e.appendChild(i);const a=document.createElement("div");a.className="cesium-viewer-cesiumWidgetContainer",i.appendChild(a);const r=document.createElement("div");r.className="cesium-viewer-bottom",i.appendChild(r);const s=(0,To.Z)(n.scene3DOnly,!1);let l,c,d=!1;(0,Eo.Z)(n.clockViewModel)?(c=n.clockViewModel,l=c.clock):(l=new E.Z,c=new Wp.Z(l),d=!0),(0,Eo.Z)(n.shouldAnimate)&&(l.shouldAnimate=n.shouldAnimate);const m=new Mg.Z(a,{imageryProvider:!t&&!(0,Eo.Z)(n.imageryProvider)&&void 0,clock:l,skyBox:n.skyBox,skyAtmosphere:n.skyAtmosphere,sceneMode:n.sceneMode,mapProjection:n.mapProjection,globe:n.globe,orderIndependentTranslucency:n.orderIndependentTranslucency,contextOptions:n.contextOptions,useDefaultRenderLoop:n.useDefaultRenderLoop,targetFrameRate:n.targetFrameRate,showRenderLoopErrors:n.showRenderLoopErrors,useBrowserRecommendedResolution:n.useBrowserRecommendedResolution,creditContainer:(0,Eo.Z)(n.creditContainer)?n.creditContainer:r,creditViewport:n.creditViewport,scene3DOnly:s,shadows:n.shadows,terrainShadows:n.terrainShadows,mapMode2D:n.mapMode2D,requestRenderMode:n.requestRenderMode,maximumRenderTimeChange:n.maximumRenderTimeChange});let u=n.dataSources,p=!1;(0,Eo.Z)(u)||(u=new bi.Z,p=!0);const f=m.scene,h=new Pi.Z({scene:f,dataSourceCollection:u}),g=new pe.Z;let _,v;if(g.add(l.onTick,__.prototype._onTick,this),g.add(f.morphStart,__.prototype._clearTrackedObject,this),!(0,Eo.Z)(n.selectionIndicator)||!1!==n.selectionIndicator){const e=document.createElement("div");e.className="cesium-viewer-selectionIndicatorContainer",i.appendChild(e),_=new n_.Z(e,f)}if(!(0,Eo.Z)(n.infoBox)||!1!==n.infoBox){const e=document.createElement("div");e.className="cesium-viewer-infoBoxContainer",i.appendChild(e),v=new kg.Z(e);const n=v.viewModel;g.add(n.cameraClicked,__.prototype._onInfoBoxCameraClicked,this),g.add(n.closeClicked,__.prototype._onInfoBoxClockClicked,this)}const y=document.createElement("div");let x,C,Z,T,w,S,z,A,b,P,D,I,F,L,N;if(y.className="cesium-viewer-toolbar",i.appendChild(y),!(0,Eo.Z)(n.geocoder)||!1!==n.geocoder){const e=document.createElement("div");let t;e.className="cesium-viewer-geocoderContainer",y.appendChild(e),(0,Eo.Z)(n.geocoder)&&"boolean"!=typeof n.geocoder&&(t=Array.isArray(n.geocoder)?n.geocoder:[n.geocoder]),x=new Gg.Z({container:e,geocoderServices:t,scene:f}),g.add(x.viewModel.search.beforeExecute,__.prototype._clearObjects,this)}if((0,Eo.Z)(n.homeButton)&&!1===n.homeButton||(C=new Ug.Z(y,f),(0,Eo.Z)(x)&&g.add(C.viewModel.command.afterExecute,(function(){const e=x.viewModel;e.searchText="",e.isSearchInProgress&&e.search()})),g.add(C.viewModel.command.beforeExecute,__.prototype._clearTrackedObject,this)),!0===n.sceneModePicker&&s)throw new Y.Z("options.sceneModePicker is not available when options.scene3DOnly is set to true.");if(s||(0,Eo.Z)(n.sceneModePicker)&&!1===n.sceneModePicker||(Z=new $g.Z(y,f)),n.projectionPicker&&(T=new Kg.Z(y,f)),t){const e=(0,To.Z)(n.imageryProviderViewModels,(0,Ig.Z)()),t=(0,To.Z)(n.terrainProviderViewModels,(0,Fg.Z)());w=new bg.Z(y,{globe:f.globe,imageryProviderViewModels:e,selectedImageryProviderViewModel:n.selectedImageryProviderViewModel,terrainProviderViewModels:t,selectedTerrainProviderViewModel:n.selectedTerrainProviderViewModel}),S=y.getElementsByClassName("cesium-baseLayerPicker-dropDown")[0]}if((0,Eo.Z)(n.imageryProvider)&&!1!==n.imageryProvider&&(t&&(w.viewModel.selectedImagery=void 0),f.imageryLayers.removeAll(),f.imageryLayers.addImageryProvider(n.imageryProvider)),(0,Eo.Z)(n.terrainProvider)&&(t&&(w.viewModel.selectedTerrain=void 0),f.terrainProvider=n.terrainProvider),!(0,Eo.Z)(n.navigationHelpButton)||!1!==n.navigationHelpButton){let e=!0;try{if((0,Eo.Z)(window.localStorage)){const n=window.localStorage.getItem("cesium-hasSeenNavHelp");(0,Eo.Z)(n)&&Boolean(n)?e=!1:window.localStorage.setItem("cesium-hasSeenNavHelp","true")}}catch(e){}z=new Xg.Z({container:y,instructionsInitiallyVisible:(0,To.Z)(n.navigationInstructionsInitiallyVisible,e)})}if(!(0,Eo.Z)(n.animation)||!1!==n.animation){const e=document.createElement("div");e.className="cesium-viewer-animationContainer",i.appendChild(e),A=new zg.Z(e,new Ag.Z(c))}if(!(0,Eo.Z)(n.timeline)||!1!==n.timeline){const e=document.createElement("div");e.className="cesium-viewer-timelineContainer",i.appendChild(e),b=new o_.Z(e,l),b.addEventListener("settime",c_,!1),b.zoomTo(l.startTime,l.stopTime)}if((0,Eo.Z)(n.fullscreenButton)&&!1===n.fullscreenButton||(I=document.createElement("div"),I.className="cesium-viewer-fullscreenContainer",i.appendChild(I),P=new Hg.Z(I,n.fullscreenElement),D=(0,Xp.Z)(P.viewModel,"isFullscreenEnabled",(function(e){I.style.display=e?"block":"none",(0,Eo.Z)(b)&&(b.container.style.right=I.clientWidth+"px",b.resize())}))),n.vrButton){const e=document.createElement("div");e.className="cesium-viewer-vrContainer",i.appendChild(e),F=new r_.Z(e,f,n.fullScreenElement),L=(0,Xp.Z)(F.viewModel,"isVREnabled",(function(n){e.style.display=n?"block":"none",(0,Eo.Z)(P)&&(e.style.right=I.clientWidth+"px"),(0,Eo.Z)(b)&&(b.container.style.right=e.clientWidth+"px",b.resize())})),N=(0,Xp.Z)(F.viewModel,"isVRMode",(function(e){!function(e,n){const t=e._geocoder,o=e._homeButton,i=e._sceneModePicker,a=e._projectionPicker,r=e._baseLayerPicker,s=e._animation,l=e._timeline,c=e._fullscreenButton,d=e._infoBox,m=e._selectionIndicator,u=n?"hidden":"visible";if((0,Eo.Z)(t)&&(t.container.style.visibility=u),(0,Eo.Z)(o)&&(o.container.style.visibility=u),(0,Eo.Z)(i)&&(i.container.style.visibility=u),(0,Eo.Z)(a)&&(a.container.style.visibility=u),(0,Eo.Z)(r)&&(r.container.style.visibility=u),(0,Eo.Z)(s)&&(s.container.style.visibility=u),(0,Eo.Z)(l)&&(l.container.style.visibility=u),(0,Eo.Z)(c)&&c.viewModel.isFullscreenEnabled&&(c.container.style.visibility=u),(0,Eo.Z)(d)&&(d.container.style.visibility=u),(0,Eo.Z)(m)&&(m.container.style.visibility=u),e._container){const t=n||!(0,Eo.Z)(c)?0:c.container.clientWidth;e._vrButton.container.style.right=t+"px",e.forceResize()}}(o,e)}))}this._baseLayerPickerDropDown=S,this._fullscreenSubscription=D,this._vrSubscription=L,this._vrModeSubscription=N,this._dataSourceChangedListeners={},this._automaticallyTrackDataSourceClocks=(0,To.Z)(n.automaticallyTrackDataSourceClocks,!0),this._container=e,this._bottomContainer=r,this._element=i,this._cesiumWidget=m,this._selectionIndicator=_,this._infoBox=v,this._dataSourceCollection=u,this._destroyDataSourceCollection=p,this._dataSourceDisplay=h,this._clockViewModel=c,this._destroyClockViewModel=d,this._toolbar=y,this._homeButton=C,this._sceneModePicker=Z,this._projectionPicker=T,this._baseLayerPicker=w,this._navigationHelpButton=z,this._animation=A,this._timeline=b,this._fullscreenButton=P,this._vrButton=F,this._geocoder=x,this._eventHelper=g,this._lastWidth=0,this._lastHeight=0,this._allowDataSourcesToSuspendAnimation=!0,this._entityView=void 0,this._enableInfoOrSelection=(0,Eo.Z)(v)||(0,Eo.Z)(_),this._clockTrackedDataSource=void 0,this._trackedEntity=void 0,this._needTrackedEntityUpdate=!1,this._selectedEntity=void 0,this._clockTrackedDataSource=void 0,this._zoomIsFlight=!1,this._zoomTarget=void 0,this._zoomPromise=void 0,this._zoomOptions=void 0,this._selectedEntityChanged=new ue.Z,this._trackedEntityChanged=new ue.Z,Ap.Z.track(this,["_trackedEntity","_selectedEntity","_clockTrackedDataSource"]),g.add(u.dataSourceAdded,__.prototype._onDataSourceAdded,this),g.add(u.dataSourceRemoved,__.prototype._onDataSourceRemoved,this),g.add(f.postUpdate,__.prototype.resize,this),g.add(f.postRender,__.prototype._postRender,this);const R=u.length;for(let e=0;e<R;e++)this._dataSourceAdded(u,u.get(e));this._dataSourceAdded(void 0,h.defaultDataSource),g.add(u.dataSourceAdded,__.prototype._dataSourceAdded,this),g.add(u.dataSourceRemoved,__.prototype._dataSourceRemoved,this),m.screenSpaceEventHandler.setInputAction((function(e){o.selectedEntity=u_(o,e)}),Ct.Z.LEFT_CLICK),m.screenSpaceEventHandler.setInputAction((function(e){const n=u_(o,e);(0,Eo.Z)(n)?Ea.Z.getValueOrUndefined(n.position,o.clock.currentTime)?o.trackedEntity=n:o.zoomTo(n):(0,Eo.Z)(o.trackedEntity)&&(o.trackedEntity=void 0)}),Ct.Z.LEFT_DOUBLE_CLICK)}function v_(e,n,t,o){if(!(0,Eo.Z)(n))throw new Y.Z("zoomTarget is required.");x_(e);const i=Mp.Z.defer();return e._zoomPromise=i,e._zoomIsFlight=o,e._zoomOptions=t,(0,Mp.Z)(n,(function(n){if(e._zoomPromise===i)if(n instanceof Jl.Z)n.getViewableRectangle().then((function(n){return(0,iu.Z)(n,e.scene)})).then((function(n){e._zoomPromise===i&&(e._zoomTarget=n)}));else if(n instanceof Ds.Z)e._zoomTarget=n;else if(n instanceof Hm.Z)e._zoomTarget=n;else if(n.isLoading&&(0,Eo.Z)(n.loadingEvent)){const t=n.loadingEvent.addEventListener((function(){t(),e._zoomPromise===i&&(e._zoomTarget=n.entities.values.slice(0))}))}else Array.isArray(n)?e._zoomTarget=n.slice(0):(n=(0,To.Z)(n.values,n),(0,Eo.Z)(n.entities)&&(n=n.entities.values),Array.isArray(n)?e._zoomTarget=n.slice(0):e._zoomTarget=[n])})),e.scene.requestRender(),i.promise}function y_(e){e._zoomPromise=void 0,e._zoomTarget=void 0,e._zoomOptions=void 0}function x_(e){const n=e._zoomPromise;(0,Eo.Z)(n)&&(y_(e),n.resolve(!1))}Object.defineProperties(__.prototype,{container:{get:function(){return this._container}},bottomContainer:{get:function(){return this._bottomContainer}},cesiumWidget:{get:function(){return this._cesiumWidget}},selectionIndicator:{get:function(){return this._selectionIndicator}},infoBox:{get:function(){return this._infoBox}},geocoder:{get:function(){return this._geocoder}},homeButton:{get:function(){return this._homeButton}},sceneModePicker:{get:function(){return this._sceneModePicker}},projectionPicker:{get:function(){return this._projectionPicker}},baseLayerPicker:{get:function(){return this._baseLayerPicker}},navigationHelpButton:{get:function(){return this._navigationHelpButton}},animation:{get:function(){return this._animation}},timeline:{get:function(){return this._timeline}},fullscreenButton:{get:function(){return this._fullscreenButton}},vrButton:{get:function(){return this._vrButton}},dataSourceDisplay:{get:function(){return this._dataSourceDisplay}},entities:{get:function(){return this._dataSourceDisplay.defaultDataSource.entities}},dataSources:{get:function(){return this._dataSourceCollection}},canvas:{get:function(){return this._cesiumWidget.canvas}},scene:{get:function(){return this._cesiumWidget.scene}},shadows:{get:function(){return this.scene.shadowMap.enabled},set:function(e){this.scene.shadowMap.enabled=e}},terrainShadows:{get:function(){return this.scene.globe.shadows},set:function(e){this.scene.globe.shadows=e}},shadowMap:{get:function(){return this.scene.shadowMap}},imageryLayers:{get:function(){return this.scene.imageryLayers}},terrainProvider:{get:function(){return this.scene.terrainProvider},set:function(e){this.scene.terrainProvider=e}},camera:{get:function(){return this.scene.camera}},postProcessStages:{get:function(){return this.scene.postProcessStages}},clock:{get:function(){return this._clockViewModel.clock}},clockViewModel:{get:function(){return this._clockViewModel}},screenSpaceEventHandler:{get:function(){return this._cesiumWidget.screenSpaceEventHandler}},targetFrameRate:{get:function(){return this._cesiumWidget.targetFrameRate},set:function(e){this._cesiumWidget.targetFrameRate=e}},useDefaultRenderLoop:{get:function(){return this._cesiumWidget.useDefaultRenderLoop},set:function(e){this._cesiumWidget.useDefaultRenderLoop=e}},resolutionScale:{get:function(){return this._cesiumWidget.resolutionScale},set:function(e){this._cesiumWidget.resolutionScale=e}},useBrowserRecommendedResolution:{get:function(){return this._cesiumWidget.useBrowserRecommendedResolution},set:function(e){this._cesiumWidget.useBrowserRecommendedResolution=e}},allowDataSourcesToSuspendAnimation:{get:function(){return this._allowDataSourcesToSuspendAnimation},set:function(e){this._allowDataSourcesToSuspendAnimation=e}},trackedEntity:{get:function(){return this._trackedEntity},set:function(e){if(this._trackedEntity!==e){this._trackedEntity=e,x_(this);const n=this.scene,t=n.mode;(0,Eo.Z)(e)&&(0,Eo.Z)(e.position)?this._needTrackedEntityUpdate=!0:(this._needTrackedEntityUpdate=!1,t!==em.Z.COLUMBUS_VIEW&&t!==em.Z.SCENE2D||(n.screenSpaceCameraController.enableTranslate=!0),t!==em.Z.COLUMBUS_VIEW&&t!==em.Z.SCENE3D||(n.screenSpaceCameraController.enableTilt=!0),this._entityView=void 0,this.camera.lookAtTransform(Zn.Z.IDENTITY)),this._trackedEntityChanged.raiseEvent(e),this.scene.requestRender()}}},selectedEntity:{get:function(){return this._selectedEntity},set:function(e){if(this._selectedEntity!==e){this._selectedEntity=e;const n=(0,Eo.Z)(this._selectionIndicator)?this._selectionIndicator.viewModel:void 0;(0,Eo.Z)(e)?(0,Eo.Z)(n)&&n.animateAppear():(0,Eo.Z)(n)&&n.animateDepart(),this._selectedEntityChanged.raiseEvent(e)}}},selectedEntityChanged:{get:function(){return this._selectedEntityChanged}},trackedEntityChanged:{get:function(){return this._trackedEntityChanged}},clockTrackedDataSource:{get:function(){return this._clockTrackedDataSource},set:function(e){this._clockTrackedDataSource!==e&&(this._clockTrackedDataSource=e,f_(this._timeline,this.clock,e))}}}),__.prototype.extend=function(e,n){if(!(0,Eo.Z)(e))throw new Y.Z("mixin is required.");e(this,n)},__.prototype.resize=function(){const e=this._cesiumWidget,n=this._container,t=n.clientWidth,o=n.clientHeight,i=(0,Eo.Z)(this._animation),a=(0,Eo.Z)(this._timeline);if(e.resize(),t===this._lastWidth&&o===this._lastHeight)return;const r=o-125,s=this._baseLayerPickerDropDown;(0,Eo.Z)(s)&&(s.style.maxHeight=r+"px"),(0,Eo.Z)(this._geocoder)&&(this._geocoder.searchSuggestionsContainer.style.maxHeight=r+"px"),(0,Eo.Z)(this._infoBox)&&(this._infoBox.viewModel.maxHeight=r);const l=this._timeline;let c,d=0,m=0,u=0;if(i&&"hidden"!==window.getComputedStyle(this._animation.container).visibility){const e=this._lastWidth;c=this._animation.container,t>900?(d=169,e<=900&&(c.style.width="169px",c.style.height="112px",this._animation.resize())):t>=600?(d=136,(e<600||e>900)&&(c.style.width="136px",c.style.height="90px",this._animation.resize())):(d=106,(e>600||0===e)&&(c.style.width="106px",c.style.height="70px",this._animation.resize())),m=d+5}if(a&&"hidden"!==window.getComputedStyle(this._timeline.container).visibility){const e=this._fullscreenButton,n=this._vrButton,t=l.container,o=t.style;u=t.clientHeight+3,o.left=d+"px";let i=0;(0,Eo.Z)(e)&&(i+=e.container.clientWidth),(0,Eo.Z)(n)&&(i+=n.container.clientWidth),o.right=i+"px",l.resize()}this._bottomContainer.style.left=m+"px",this._bottomContainer.style.bottom=u+"px",this._lastWidth=t,this._lastHeight=o},__.prototype.forceResize=function(){this._lastWidth=0,this.resize()},__.prototype.render=function(){this._cesiumWidget.render()},__.prototype.isDestroyed=function(){return!1},__.prototype.destroy=function(){let e;this.screenSpaceEventHandler.removeInputAction(Ct.Z.LEFT_CLICK),this.screenSpaceEventHandler.removeInputAction(Ct.Z.LEFT_DOUBLE_CLICK);const n=this.dataSources,t=n.length;for(e=0;e<t;e++)this._dataSourceRemoved(n,n.get(e));return this._dataSourceRemoved(void 0,this._dataSourceDisplay.defaultDataSource),this._container.removeChild(this._element),this._element.removeChild(this._toolbar),this._eventHelper.removeAll(),(0,Eo.Z)(this._geocoder)&&(this._geocoder=this._geocoder.destroy()),(0,Eo.Z)(this._homeButton)&&(this._homeButton=this._homeButton.destroy()),(0,Eo.Z)(this._sceneModePicker)&&(this._sceneModePicker=this._sceneModePicker.destroy()),(0,Eo.Z)(this._projectionPicker)&&(this._projectionPicker=this._projectionPicker.destroy()),(0,Eo.Z)(this._baseLayerPicker)&&(this._baseLayerPicker=this._baseLayerPicker.destroy()),(0,Eo.Z)(this._animation)&&(this._element.removeChild(this._animation.container),this._animation=this._animation.destroy()),(0,Eo.Z)(this._timeline)&&(this._timeline.removeEventListener("settime",c_,!1),this._element.removeChild(this._timeline.container),this._timeline=this._timeline.destroy()),(0,Eo.Z)(this._fullscreenButton)&&(this._fullscreenSubscription.dispose(),this._element.removeChild(this._fullscreenButton.container),this._fullscreenButton=this._fullscreenButton.destroy()),(0,Eo.Z)(this._vrButton)&&(this._vrSubscription.dispose(),this._vrModeSubscription.dispose(),this._element.removeChild(this._vrButton.container),this._vrButton=this._vrButton.destroy()),(0,Eo.Z)(this._infoBox)&&(this._element.removeChild(this._infoBox.container),this._infoBox=this._infoBox.destroy()),(0,Eo.Z)(this._selectionIndicator)&&(this._element.removeChild(this._selectionIndicator.container),this._selectionIndicator=this._selectionIndicator.destroy()),this._destroyClockViewModel&&(this._clockViewModel=this._clockViewModel.destroy()),this._dataSourceDisplay=this._dataSourceDisplay.destroy(),this._cesiumWidget=this._cesiumWidget.destroy(),this._destroyDataSourceCollection&&(this._dataSourceCollection=this._dataSourceCollection.destroy()),(0,So.Z)(this)},__.prototype._dataSourceAdded=function(e,n){n.entities.collectionChanged.addEventListener(__.prototype._onEntityCollectionChanged,this)},__.prototype._dataSourceRemoved=function(e,n){const t=n.entities;t.collectionChanged.removeEventListener(__.prototype._onEntityCollectionChanged,this),(0,Eo.Z)(this.trackedEntity)&&t.getById(this.trackedEntity.id)===this.trackedEntity&&(this.trackedEntity=void 0),(0,Eo.Z)(this.selectedEntity)&&t.getById(this.selectedEntity.id)===this.selectedEntity&&(this.selectedEntity=void 0)},__.prototype._onTick=function(e){const n=e.currentTime,t=this._dataSourceDisplay.update(n);this._allowDataSourcesToSuspendAnimation&&(this._clockViewModel.canAnimate=t);const o=this._entityView;if((0,Eo.Z)(o)){const e=this._trackedEntity;this._dataSourceDisplay.getBoundingSphere(e,!1,l_)===si.Z.DONE&&o.update(n,l_)}let i,a=!1;const r=this.selectedEntity,s=(0,Eo.Z)(r)&&this._enableInfoOrSelection;s&&r.isShowing&&r.isAvailable(n)&&(this._dataSourceDisplay.getBoundingSphere(r,!0,l_)!==si.Z.FAILED?i=l_.center:(0,Eo.Z)(r.position)&&(i=r.position.getValue(n,i)),a=(0,Eo.Z)(i));const l=(0,Eo.Z)(this._selectionIndicator)?this._selectionIndicator.viewModel:void 0;(0,Eo.Z)(l)&&(l.position=h.Z.clone(i,l.position),l.showSelection=s&&a,l.update());const c=(0,Eo.Z)(this._infoBox)?this._infoBox.viewModel:void 0;(0,Eo.Z)(c)&&(c.showInfo=s,c.enableCamera=a,c.isCameraTracking=this.trackedEntity===this.selectedEntity,s?(c.titleText=(0,To.Z)(r.name,r.id),c.description=Ea.Z.getValueOrDefault(r.description,n,"")):(c.titleText="",c.description=""))},__.prototype._onEntityCollectionChanged=function(e,n,t){const o=t.length;for(let e=0;e<o;e++){const n=t[e];this.trackedEntity===n&&(this.trackedEntity=void 0),this.selectedEntity===n&&(this.selectedEntity=void 0)}},__.prototype._onInfoBoxCameraClicked=function(e){if(e.isCameraTracking&&this.trackedEntity===this.selectedEntity)this.trackedEntity=void 0;else{const e=this.selectedEntity.position;(0,Eo.Z)(e)?this.trackedEntity=this.selectedEntity:this.zoomTo(this.selectedEntity)}},__.prototype._clearTrackedObject=function(){this.trackedEntity=void 0},__.prototype._onInfoBoxClockClicked=function(e){this.selectedEntity=void 0},__.prototype._clearObjects=function(){this.trackedEntity=void 0,this.selectedEntity=void 0},__.prototype._onDataSourceChanged=function(e){this.clockTrackedDataSource===e&&f_(this.timeline,this.clock,e)},__.prototype._onDataSourceAdded=function(e,n){this._automaticallyTrackDataSourceClocks&&(this.clockTrackedDataSource=n);const t=n.entities.id,o=this._eventHelper.add(n.changedEvent,__.prototype._onDataSourceChanged,this);this._dataSourceChangedListeners[t]=o},__.prototype._onDataSourceRemoved=function(e,n){const t=this.clockTrackedDataSource===n,o=n.entities.id;if(this._dataSourceChangedListeners[o](),this._dataSourceChangedListeners[o]=void 0,t){const n=e.length;this._automaticallyTrackDataSourceClocks&&n>0?this.clockTrackedDataSource=e.get(n-1):this.clockTrackedDataSource=void 0}},__.prototype.zoomTo=function(e,n){return v_(this,e,{offset:n},!1)},__.prototype.flyTo=function(e,n){return v_(this,e,n,!0)},__.prototype._postRender=function(){!function(e){const n=e._zoomTarget;if(!(0,Eo.Z)(n)||e.scene.mode===em.Z.MORPHING)return;const t=e.scene,o=t.camera,i=e._zoomPromise,a=(0,To.Z)(e._zoomOptions,{});let r;if(n instanceof Ds.Z)return n.readyPromise.then((function(){const t=n.boundingSphere;(0,Eo.Z)(a.offset)||(a.offset=new He.Z(0,-.5,t.radius)),r={offset:a.offset,duration:a.duration,maximumHeight:a.maximumHeight,complete:function(){i.resolve(!0)},cancel:function(){i.resolve(!1)}},e._zoomIsFlight?o.flyToBoundingSphere(n.boundingSphere,r):(o.viewBoundingSphere(t,a.offset),o.lookAtTransform(Zn.Z.IDENTITY),i.resolve(!0)),y_(e)}));if(n instanceof Hm.Z)return n.readyPromise.then((function(){const t=n.boundingSphere;(0,Eo.Z)(a.offset)||(a.offset=new He.Z(0,-.5,t.radius)),r={offset:a.offset,duration:a.duration,maximumHeight:a.maximumHeight,complete:function(){i.resolve(!0)},cancel:function(){i.resolve(!1)}},e._zoomIsFlight?o.flyToBoundingSphere(t,r):(o.viewBoundingSphere(t,a.offset),o.lookAtTransform(Zn.Z.IDENTITY),i.resolve(!0)),y_(e)}));if(n instanceof _.Z)return r={destination:t.mapProjection.ellipsoid.cartographicToCartesian(n),duration:a.duration,maximumHeight:a.maximumHeight,complete:function(){i.resolve(!0)},cancel:function(){i.resolve(!1)}},e._zoomIsFlight?o.flyTo(r):(o.setView(r),i.resolve(!0)),void y_(e);const s=n,l=[];for(let n=0,t=s.length;n<t;n++){const t=e._dataSourceDisplay.getBoundingSphere(s[n],!1,l_);if(t===si.Z.PENDING)return;t!==si.Z.FAILED&&l.push(m.Z.clone(l_))}if(0===l.length)return void x_(e);e.trackedEntity=void 0;const c=m.Z.fromBoundingSpheres(l);e._zoomIsFlight?(y_(e),o.flyToBoundingSphere(c,{duration:a.duration,maximumHeight:a.maximumHeight,complete:function(){i.resolve(!0)},cancel:function(){i.resolve(!1)},offset:a.offset})):(o.viewBoundingSphere(c,a.offset),o.lookAtTransform(Zn.Z.IDENTITY),y_(e),i.resolve(!0))}(this),function(e){if(!e._needTrackedEntityUpdate)return;const n=e._trackedEntity,t=e.clock.currentTime,o=Ea.Z.getValueOrUndefined(n.position,t);if(!(0,Eo.Z)(o))return;const i=e.scene,a=e._dataSourceDisplay.getBoundingSphere(n,!1,l_);if(a===si.Z.PENDING)return;const r=i.mode;r!==em.Z.COLUMBUS_VIEW&&r!==em.Z.SCENE2D||(i.screenSpaceCameraController.enableTranslate=!1),r!==em.Z.COLUMBUS_VIEW&&r!==em.Z.SCENE3D||(i.screenSpaceCameraController.enableTilt=!1);const s=a!==si.Z.FAILED?l_:void 0;e._entityView=new Wi.Z(n,i,i.mapProjection.ellipsoid),e._entityView.update(t,s),e._needTrackedEntityUpdate=!1}(this)};const C_=__;var Z_=t(617157),T_=t(984930),E_=t(443017),w_=t(228052),S_=t(87848),z_=t(709059),A_=t(454560),b_=t(873734),P_=t(21162),D_=t(662813),I_=t(117542),F_=t(880146),L_=t(708670),N_=t(388197),R_=t(422190),O_=t(333427),M_=t(398153),H_=t(732954),W_=t(481972),G_=t(689546),B_=t(541389),U_=t(40038),V_=t(312841),k_=t(768548),Y_=t(231123),X_=t(936497),q_=t(439651),j_=t(371081),Q_=t(239131),K_=t(462877),J_=t(4783),$_=t(394545),ev=t(595055),nv=t(397677),tv=t(484394),ov=t(165855),iv=t(674560),av=t(908298),rv=t(296942),sv=t(415240),lv=t(583711),cv=t(411342),dv=t(63856),mv=t(917051),uv=t(251284),pv=t(1978),fv=t(248142),hv=t(822548),gv=t(58496),_v=t(230468),vv=t(548133),yv=t(653300),xv=t(104201),Cv=t(258300),Zv=t(329558),Tv=t(804051),Ev=t(77622),wv=t(282613),Sv=t(937502),zv=t(740203),Av=t(435673),bv=t(27518),Pv=t(4082),Dv=t(633484),Iv=t(370050),Fv=t(748664),Lv=t(688519),Nv=t(850728),Rv=t(698679),Ov=t(49509),Mv=t(22485),Hv=t(892270),Wv=t(159197),Gv=t(567739),Bv=t(495390),Uv=t(345712),Vv=t(544674),kv=t(549074),Yv=t(867403),Xv=t(117430),qv=t(955410),jv=t(642140),Qv=t(858930),Kv=t(717374),Jv=t(216461),$v=t(602324),ey=t(283225),ny=t(453921),ty=t(350867),oy=t(471080),iy=t(420132),ay=t(688549),ry=t(474361),sy=t(286215),ly=t(940324),cy=t(555546),dy=t(110880),my=t(311982),uy=t(140878),py=t(468187),fy=t(24349),hy=t(819964),gy=t(348141),_y=t(411170),vy=t(501393),yy=t(910377),xy=t(530413),Cy=t(422016),Zy=t(438410),Ty=t(601206),Ey=t(815802),wy=t(457991),Sy=t(17269),zy=t(927637),Ay=t(531922),by=t(240691),Py=t(400545),Dy=t(448623),Iy=t(238214),Fy=t(777051),Ly=t(916853),Ny=t(954168),Ry=t(157572),Oy=t(783032),My=t(304495),Hy=t(989462),Wy=t(391273),Gy=t(958769),By=t(625776),Uy=t(910750);const Vy="1.90"},406562:(e,n,t)=>{"use strict";t.d(n,{Z:()=>$});var o=t(607796),i=t(924184),a=t(528464),r=t(841604),s=t(911926),l=t(961409),c=t(535574),d=t(638296),m=t(252560),u=t(957264),p=t(683504),f=t(641418),h=t(288428);function g(e,n){this.center=o.Z.clone((0,r.Z)(e,o.Z.ZERO)),this.radius=(0,r.Z)(n,0)}const _=new o.Z,v=new o.Z,y=new o.Z,x=new o.Z,C=new o.Z,Z=new o.Z,T=new o.Z,E=new o.Z,w=new o.Z,S=new o.Z,z=new o.Z,A=new o.Z,b=4/3*u.Z.PI;g.fromPoints=function(e,n){if((0,s.Z)(n)||(n=new g),!(0,s.Z)(e)||0===e.length)return n.center=o.Z.clone(o.Z.ZERO,n.center),n.radius=0,n;const t=o.Z.clone(e[0],T),i=o.Z.clone(t,_),a=o.Z.clone(t,v),r=o.Z.clone(t,y),l=o.Z.clone(t,x),c=o.Z.clone(t,C),d=o.Z.clone(t,Z),m=e.length;let u;for(u=1;u<m;u++){o.Z.clone(e[u],t);const n=t.x,s=t.y,m=t.z;n<i.x&&o.Z.clone(t,i),n>l.x&&o.Z.clone(t,l),s<a.y&&o.Z.clone(t,a),s>c.y&&o.Z.clone(t,c),m<r.z&&o.Z.clone(t,r),m>d.z&&o.Z.clone(t,d)}const p=o.Z.magnitudeSquared(o.Z.subtract(l,i,E)),f=o.Z.magnitudeSquared(o.Z.subtract(c,a,E)),h=o.Z.magnitudeSquared(o.Z.subtract(d,r,E));let b=i,P=l,D=p;f>D&&(D=f,b=a,P=c),h>D&&(D=h,b=r,P=d);const I=w;I.x=.5*(b.x+P.x),I.y=.5*(b.y+P.y),I.z=.5*(b.z+P.z);let F=o.Z.magnitudeSquared(o.Z.subtract(P,I,E)),L=Math.sqrt(F);const N=S;N.x=i.x,N.y=a.y,N.z=r.z;const R=z;R.x=l.x,R.y=c.y,R.z=d.z;const O=o.Z.midpoint(N,R,A);let M=0;for(u=0;u<m;u++){o.Z.clone(e[u],t);const n=o.Z.magnitude(o.Z.subtract(t,O,E));n>M&&(M=n);const i=o.Z.magnitudeSquared(o.Z.subtract(t,I,E));if(i>F){const e=Math.sqrt(i);L=.5*(L+e),F=L*L;const n=e-L;I.x=(L*I.x+n*t.x)/e,I.y=(L*I.y+n*t.y)/e,I.z=(L*I.z+n*t.z)/e}}return L<M?(o.Z.clone(I,n.center),n.radius=L):(o.Z.clone(O,n.center),n.radius=M),n};const P=new c.Z,D=new o.Z,I=new o.Z,F=new i.Z,L=new i.Z;g.fromRectangle2D=function(e,n,t){return g.fromRectangleWithHeights2D(e,n,0,0,t)},g.fromRectangleWithHeights2D=function(e,n,t,i,a){if((0,s.Z)(a)||(a=new g),!(0,s.Z)(e))return a.center=o.Z.clone(o.Z.ZERO,a.center),a.radius=0,a;n=(0,r.Z)(n,P),h.Z.southwest(e,F),F.height=t,h.Z.northeast(e,L),L.height=i;const l=n.project(F,D),c=n.project(L,I),d=c.x-l.x,m=c.y-l.y,u=c.z-l.z;a.radius=.5*Math.sqrt(d*d+m*m+u*u);const p=a.center;return p.x=l.x+.5*d,p.y=l.y+.5*m,p.z=l.z+.5*u,a};const N=[];g.fromRectangle3D=function(e,n,t,i){if(n=(0,r.Z)(n,l.Z.WGS84),t=(0,r.Z)(t,0),(0,s.Z)(i)||(i=new g),!(0,s.Z)(e))return i.center=o.Z.clone(o.Z.ZERO,i.center),i.radius=0,i;const a=h.Z.subsample(e,n,t,N);return g.fromPoints(a,i)},g.fromVertices=function(e,n,t,i){if((0,s.Z)(i)||(i=new g),!(0,s.Z)(e)||0===e.length)return i.center=o.Z.clone(o.Z.ZERO,i.center),i.radius=0,i;n=(0,r.Z)(n,o.Z.ZERO),t=(0,r.Z)(t,3),a.Z.typeOf.number.greaterThanOrEquals("stride",t,3);const l=T;l.x=e[0]+n.x,l.y=e[1]+n.y,l.z=e[2]+n.z;const c=o.Z.clone(l,_),d=o.Z.clone(l,v),m=o.Z.clone(l,y),u=o.Z.clone(l,x),p=o.Z.clone(l,C),f=o.Z.clone(l,Z),h=e.length;let b;for(b=0;b<h;b+=t){const t=e[b]+n.x,i=e[b+1]+n.y,a=e[b+2]+n.z;l.x=t,l.y=i,l.z=a,t<c.x&&o.Z.clone(l,c),t>u.x&&o.Z.clone(l,u),i<d.y&&o.Z.clone(l,d),i>p.y&&o.Z.clone(l,p),a<m.z&&o.Z.clone(l,m),a>f.z&&o.Z.clone(l,f)}const P=o.Z.magnitudeSquared(o.Z.subtract(u,c,E)),D=o.Z.magnitudeSquared(o.Z.subtract(p,d,E)),I=o.Z.magnitudeSquared(o.Z.subtract(f,m,E));let F=c,L=u,N=P;D>N&&(N=D,F=d,L=p),I>N&&(N=I,F=m,L=f);const R=w;R.x=.5*(F.x+L.x),R.y=.5*(F.y+L.y),R.z=.5*(F.z+L.z);let O=o.Z.magnitudeSquared(o.Z.subtract(L,R,E)),M=Math.sqrt(O);const H=S;H.x=c.x,H.y=d.y,H.z=m.z;const W=z;W.x=u.x,W.y=p.y,W.z=f.z;const G=o.Z.midpoint(H,W,A);let B=0;for(b=0;b<h;b+=t){l.x=e[b]+n.x,l.y=e[b+1]+n.y,l.z=e[b+2]+n.z;const t=o.Z.magnitude(o.Z.subtract(l,G,E));t>B&&(B=t);const i=o.Z.magnitudeSquared(o.Z.subtract(l,R,E));if(i>O){const e=Math.sqrt(i);M=.5*(M+e),O=M*M;const n=e-M;R.x=(M*R.x+n*l.x)/e,R.y=(M*R.y+n*l.y)/e,R.z=(M*R.z+n*l.z)/e}}return M<B?(o.Z.clone(R,i.center),i.radius=M):(o.Z.clone(G,i.center),i.radius=B),i},g.fromEncodedCartesianVertices=function(e,n,t){if((0,s.Z)(t)||(t=new g),!(0,s.Z)(e)||!(0,s.Z)(n)||e.length!==n.length||0===e.length)return t.center=o.Z.clone(o.Z.ZERO,t.center),t.radius=0,t;const i=T;i.x=e[0]+n[0],i.y=e[1]+n[1],i.z=e[2]+n[2];const a=o.Z.clone(i,_),r=o.Z.clone(i,v),l=o.Z.clone(i,y),c=o.Z.clone(i,x),d=o.Z.clone(i,C),m=o.Z.clone(i,Z),u=e.length;let p;for(p=0;p<u;p+=3){const t=e[p]+n[p],s=e[p+1]+n[p+1],u=e[p+2]+n[p+2];i.x=t,i.y=s,i.z=u,t<a.x&&o.Z.clone(i,a),t>c.x&&o.Z.clone(i,c),s<r.y&&o.Z.clone(i,r),s>d.y&&o.Z.clone(i,d),u<l.z&&o.Z.clone(i,l),u>m.z&&o.Z.clone(i,m)}const f=o.Z.magnitudeSquared(o.Z.subtract(c,a,E)),h=o.Z.magnitudeSquared(o.Z.subtract(d,r,E)),b=o.Z.magnitudeSquared(o.Z.subtract(m,l,E));let P=a,D=c,I=f;h>I&&(I=h,P=r,D=d),b>I&&(I=b,P=l,D=m);const F=w;F.x=.5*(P.x+D.x),F.y=.5*(P.y+D.y),F.z=.5*(P.z+D.z);let L=o.Z.magnitudeSquared(o.Z.subtract(D,F,E)),N=Math.sqrt(L);const R=S;R.x=a.x,R.y=r.y,R.z=l.z;const O=z;O.x=c.x,O.y=d.y,O.z=m.z;const M=o.Z.midpoint(R,O,A);let H=0;for(p=0;p<u;p+=3){i.x=e[p]+n[p],i.y=e[p+1]+n[p+1],i.z=e[p+2]+n[p+2];const t=o.Z.magnitude(o.Z.subtract(i,M,E));t>H&&(H=t);const a=o.Z.magnitudeSquared(o.Z.subtract(i,F,E));if(a>L){const e=Math.sqrt(a);N=.5*(N+e),L=N*N;const n=e-N;F.x=(N*F.x+n*i.x)/e,F.y=(N*F.y+n*i.y)/e,F.z=(N*F.z+n*i.z)/e}}return N<H?(o.Z.clone(F,t.center),t.radius=N):(o.Z.clone(M,t.center),t.radius=H),t},g.fromCornerPoints=function(e,n,t){a.Z.typeOf.object("corner",e),a.Z.typeOf.object("oppositeCorner",n),(0,s.Z)(t)||(t=new g);const i=o.Z.midpoint(e,n,t.center);return t.radius=o.Z.distance(i,n),t},g.fromEllipsoid=function(e,n){return a.Z.typeOf.object("ellipsoid",e),(0,s.Z)(n)||(n=new g),o.Z.clone(o.Z.ZERO,n.center),n.radius=e.maximumRadius,n};const R=new o.Z;g.fromBoundingSpheres=function(e,n){if((0,s.Z)(n)||(n=new g),!(0,s.Z)(e)||0===e.length)return n.center=o.Z.clone(o.Z.ZERO,n.center),n.radius=0,n;const t=e.length;if(1===t)return g.clone(e[0],n);if(2===t)return g.union(e[0],e[1],n);const i=[];let a;for(a=0;a<t;a++)i.push(e[a].center);const r=(n=g.fromPoints(i,n)).center;let l=n.radius;for(a=0;a<t;a++){const n=e[a];l=Math.max(l,o.Z.distance(r,n.center,R)+n.radius)}return n.radius=l,n};const O=new o.Z,M=new o.Z,H=new o.Z;g.fromOrientedBoundingBox=function(e,n){a.Z.defined("orientedBoundingBox",e),(0,s.Z)(n)||(n=new g);const t=e.halfAxes,i=p.Z.getColumn(t,0,O),r=p.Z.getColumn(t,1,M),l=p.Z.getColumn(t,2,H);return o.Z.add(i,r,i),o.Z.add(i,l,i),n.center=o.Z.clone(e.center,n.center),n.radius=o.Z.magnitude(i),n},g.clone=function(e,n){if((0,s.Z)(e))return(0,s.Z)(n)?(n.center=o.Z.clone(e.center,n.center),n.radius=e.radius,n):new g(e.center,e.radius)},g.packedLength=4,g.pack=function(e,n,t){a.Z.typeOf.object("value",e),a.Z.defined("array",n),t=(0,r.Z)(t,0);const o=e.center;return n[t++]=o.x,n[t++]=o.y,n[t++]=o.z,n[t]=e.radius,n},g.unpack=function(e,n,t){a.Z.defined("array",e),n=(0,r.Z)(n,0),(0,s.Z)(t)||(t=new g);const o=t.center;return o.x=e[n++],o.y=e[n++],o.z=e[n++],t.radius=e[n],t};const W=new o.Z,G=new o.Z;g.union=function(e,n,t){a.Z.typeOf.object("left",e),a.Z.typeOf.object("right",n),(0,s.Z)(t)||(t=new g);const i=e.center,r=e.radius,l=n.center,c=n.radius,d=o.Z.subtract(l,i,W),m=o.Z.magnitude(d);if(r>=m+c)return e.clone(t),t;if(c>=m+r)return n.clone(t),t;const u=.5*(r+m+c),p=o.Z.multiplyByScalar(d,(-r+u)/m,G);return o.Z.add(p,i,p),o.Z.clone(p,t.center),t.radius=u,t};const B=new o.Z;g.expand=function(e,n,t){a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("point",n),t=g.clone(e,t);const i=o.Z.magnitude(o.Z.subtract(n,t.center,B));return i>t.radius&&(t.radius=i),t},g.intersectPlane=function(e,n){a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("plane",n);const t=e.center,i=e.radius,r=n.normal,s=o.Z.dot(r,t)+n.distance;return s<-i?d.Z.OUTSIDE:s<i?d.Z.INTERSECTING:d.Z.INSIDE},g.transform=function(e,n,t){return a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("transform",n),(0,s.Z)(t)||(t=new g),t.center=f.Z.multiplyByPoint(n,e.center,t.center),t.radius=f.Z.getMaximumScale(n)*e.radius,t};const U=new o.Z;g.distanceSquaredTo=function(e,n){a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("cartesian",n);const t=o.Z.subtract(e.center,n,U),i=o.Z.magnitude(t)-e.radius;return i<=0?0:i*i},g.transformWithoutScale=function(e,n,t){return a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("transform",n),(0,s.Z)(t)||(t=new g),t.center=f.Z.multiplyByPoint(n,e.center,t.center),t.radius=e.radius,t};const V=new o.Z;g.computePlaneDistances=function(e,n,t,i){a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("position",n),a.Z.typeOf.object("direction",t),(0,s.Z)(i)||(i=new m.Z);const r=o.Z.subtract(e.center,n,V),l=o.Z.dot(t,r);return i.start=l-e.radius,i.stop=l+e.radius,i};const k=new o.Z,Y=new o.Z,X=new o.Z,q=new o.Z,j=new o.Z,Q=new i.Z,K=new Array(8);for(let e=0;e<8;++e)K[e]=new o.Z;const J=new c.Z;g.projectTo2D=function(e,n,t){a.Z.typeOf.object("sphere",e);const i=(n=(0,r.Z)(n,J)).ellipsoid;let s=e.center;const l=e.radius;let c;c=o.Z.equals(s,o.Z.ZERO)?o.Z.clone(o.Z.UNIT_X,k):i.geodeticSurfaceNormal(s,k);const d=o.Z.cross(o.Z.UNIT_Z,c,Y);o.Z.normalize(d,d);const m=o.Z.cross(c,d,X);o.Z.normalize(m,m),o.Z.multiplyByScalar(c,l,c),o.Z.multiplyByScalar(m,l,m),o.Z.multiplyByScalar(d,l,d);const u=o.Z.negate(m,j),p=o.Z.negate(d,q),f=K;let h=f[0];o.Z.add(c,m,h),o.Z.add(h,d,h),h=f[1],o.Z.add(c,m,h),o.Z.add(h,p,h),h=f[2],o.Z.add(c,u,h),o.Z.add(h,p,h),h=f[3],o.Z.add(c,u,h),o.Z.add(h,d,h),o.Z.negate(c,c),h=f[4],o.Z.add(c,m,h),o.Z.add(h,d,h),h=f[5],o.Z.add(c,m,h),o.Z.add(h,p,h),h=f[6],o.Z.add(c,u,h),o.Z.add(h,p,h),h=f[7],o.Z.add(c,u,h),o.Z.add(h,d,h);const _=f.length;for(let e=0;e<_;++e){const t=f[e];o.Z.add(s,t,t);const a=i.cartesianToCartographic(t,Q);n.project(a,t)}s=(t=g.fromPoints(f,t)).center;const v=s.x,y=s.y,x=s.z;return s.x=x,s.y=v,s.z=y,t},g.isOccluded=function(e,n){return a.Z.typeOf.object("sphere",e),a.Z.typeOf.object("occluder",n),!n.isBoundingSphereVisible(e)},g.equals=function(e,n){return e===n||(0,s.Z)(e)&&(0,s.Z)(n)&&o.Z.equals(e.center,n.center)&&e.radius===n.radius},g.prototype.intersectPlane=function(e){return g.intersectPlane(this,e)},g.prototype.distanceSquaredTo=function(e){return g.distanceSquaredTo(this,e)},g.prototype.computePlaneDistances=function(e,n,t){return g.computePlaneDistances(this,e,n,t)},g.prototype.isOccluded=function(e){return g.isOccluded(this,e)},g.prototype.equals=function(e){return g.equals(this,e)},g.prototype.clone=function(e){return g.clone(this,e)},g.prototype.volume=function(){const e=this.radius;return b*e*e*e};const $=g},958469:(e,n,t)=>{"use strict";t.d(n,{Z:()=>f});var o=t(528464),i=t(841604),a=t(911926),r=t(205857),s=t(957264);function l(e,n){this.x=(0,i.Z)(e,0),this.y=(0,i.Z)(n,0)}l.fromElements=function(e,n,t){return(0,a.Z)(t)?(t.x=e,t.y=n,t):new l(e,n)},l.clone=function(e,n){if((0,a.Z)(e))return(0,a.Z)(n)?(n.x=e.x,n.y=e.y,n):new l(e.x,e.y)},l.fromCartesian3=l.clone,l.fromCartesian4=l.clone,l.packedLength=2,l.pack=function(e,n,t){return o.Z.typeOf.object("value",e),o.Z.defined("array",n),t=(0,i.Z)(t,0),n[t++]=e.x,n[t]=e.y,n},l.unpack=function(e,n,t){return o.Z.defined("array",e),n=(0,i.Z)(n,0),(0,a.Z)(t)||(t=new l),t.x=e[n++],t.y=e[n],t},l.packArray=function(e,n){o.Z.defined("array",e);const t=e.length,i=2*t;if((0,a.Z)(n)){if(!Array.isArray(n)&&n.length!==i)throw new r.Z("If result is a typed array, it must have exactly array.length * 2 elements");n.length!==i&&(n.length=i)}else n=new Array(i);for(let o=0;o<t;++o)l.pack(e[o],n,2*o);return n},l.unpackArray=function(e,n){if(o.Z.defined("array",e),o.Z.typeOf.number.greaterThanOrEquals("array.length",e.length,2),e.length%2!=0)throw new r.Z("array length must be a multiple of 2.");const t=e.length;(0,a.Z)(n)?n.length=t/2:n=new Array(t/2);for(let o=0;o<t;o+=2){const t=o/2;n[t]=l.unpack(e,o,n[t])}return n},l.fromArray=l.unpack,l.maximumComponent=function(e){return o.Z.typeOf.object("cartesian",e),Math.max(e.x,e.y)},l.minimumComponent=function(e){return o.Z.typeOf.object("cartesian",e),Math.min(e.x,e.y)},l.minimumByComponent=function(e,n,t){return o.Z.typeOf.object("first",e),o.Z.typeOf.object("second",n),o.Z.typeOf.object("result",t),t.x=Math.min(e.x,n.x),t.y=Math.min(e.y,n.y),t},l.maximumByComponent=function(e,n,t){return o.Z.typeOf.object("first",e),o.Z.typeOf.object("second",n),o.Z.typeOf.object("result",t),t.x=Math.max(e.x,n.x),t.y=Math.max(e.y,n.y),t},l.magnitudeSquared=function(e){return o.Z.typeOf.object("cartesian",e),e.x*e.x+e.y*e.y},l.magnitude=function(e){return Math.sqrt(l.magnitudeSquared(e))};const c=new l;l.distance=function(e,n){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),l.subtract(e,n,c),l.magnitude(c)},l.distanceSquared=function(e,n){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),l.subtract(e,n,c),l.magnitudeSquared(c)},l.normalize=function(e,n){o.Z.typeOf.object("cartesian",e),o.Z.typeOf.object("result",n);const t=l.magnitude(e);if(n.x=e.x/t,n.y=e.y/t,isNaN(n.x)||isNaN(n.y))throw new r.Z("normalized result is not a number");return n},l.dot=function(e,n){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),e.x*n.x+e.y*n.y},l.cross=function(e,n){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),e.x*n.y-e.y*n.x},l.multiplyComponents=function(e,n,t){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),o.Z.typeOf.object("result",t),t.x=e.x*n.x,t.y=e.y*n.y,t},l.divideComponents=function(e,n,t){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),o.Z.typeOf.object("result",t),t.x=e.x/n.x,t.y=e.y/n.y,t},l.add=function(e,n,t){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),o.Z.typeOf.object("result",t),t.x=e.x+n.x,t.y=e.y+n.y,t},l.subtract=function(e,n,t){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),o.Z.typeOf.object("result",t),t.x=e.x-n.x,t.y=e.y-n.y,t},l.multiplyByScalar=function(e,n,t){return o.Z.typeOf.object("cartesian",e),o.Z.typeOf.number("scalar",n),o.Z.typeOf.object("result",t),t.x=e.x*n,t.y=e.y*n,t},l.divideByScalar=function(e,n,t){return o.Z.typeOf.object("cartesian",e),o.Z.typeOf.number("scalar",n),o.Z.typeOf.object("result",t),t.x=e.x/n,t.y=e.y/n,t},l.negate=function(e,n){return o.Z.typeOf.object("cartesian",e),o.Z.typeOf.object("result",n),n.x=-e.x,n.y=-e.y,n},l.abs=function(e,n){return o.Z.typeOf.object("cartesian",e),o.Z.typeOf.object("result",n),n.x=Math.abs(e.x),n.y=Math.abs(e.y),n};const d=new l;l.lerp=function(e,n,t,i){return o.Z.typeOf.object("start",e),o.Z.typeOf.object("end",n),o.Z.typeOf.number("t",t),o.Z.typeOf.object("result",i),l.multiplyByScalar(n,t,d),i=l.multiplyByScalar(e,1-t,i),l.add(d,i,i)};const m=new l,u=new l;l.angleBetween=function(e,n){return o.Z.typeOf.object("left",e),o.Z.typeOf.object("right",n),l.normalize(e,m),l.normalize(n,u),s.Z.acosClamped(l.dot(m,u))};const p=new l;l.mostOrthogonalAxis=function(e,n){o.Z.typeOf.object("cartesian",e),o.Z.typeOf.object("result",n);const t=l.normalize(e,p);return l.abs(t,t),t.x<=t.y?l.clone(l.UNIT_X,n):l.clone(l.UNIT_Y,n)},l.equals=function(e,n){return e===n||(0,a.Z)(e)&&(0,a.Z)(n)&&e.x===n.x&&e.y===n.y},l.equalsArray=function(e,n,t){return e.x===n[t]&&e.y===n[t+1]},l.equalsEpsilon=function(e,n,t,o){return e===n||(0,a.Z)(e)&&(0,a.Z)(n)&&s.Z.equalsEpsilon(e.x,n.x,t,o)&&s.Z.equalsEpsilon(e.y,n.y,t,o)},l.ZERO=Object.freeze(new l(0,0)),l.ONE=Object.freeze(new l(1,1)),l.UNIT_X=Object.freeze(new l(1,0)),l.UNIT_Y=Object.freeze(new l(0,1)),l.prototype.clone=function(e){return l.clone(this,e)},l.prototype.equals=function(e){return l.equals(this,e)},l.prototype.equalsEpsilon=function(e,n,t){return l.equalsEpsilon(this,e,n,t)},l.prototype.toString=function(){return"("+this.x+", "+this.y+")"};const f=l},902740:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n,t,o,i){this.xPoleWander=e,this.yPoleWander=n,this.xPoleOffset=t,this.yPoleOffset=o,this.ut1MinusUtc=i}},240404:(e,n,t)=>{"use strict";t.d(n,{Z:()=>h});var o=t(607796),i=t(924184),a=t(528464),r=t(841604),s=t(911926),l=t(961409),c=t(957264);function d(e,n,t,o,i,a,r){const s=function(e,n){return e*n*(4+e*(4-3*n))/16}(e,t);return(1-s)*e*n*(o+s*i*(r+s*a*(2*r*r-1)))}const m=new o.Z,u=new o.Z;function p(e,n,t,r){const s=o.Z.normalize(r.cartographicToCartesian(n,u),m),l=o.Z.normalize(r.cartographicToCartesian(t,u),u);a.Z.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(o.Z.angleBetween(s,l))-Math.PI),.0125),function(e,n,t,o,i,a,r){const s=(n-t)/n,l=a-o,m=Math.atan((1-s)*Math.tan(i)),u=Math.atan((1-s)*Math.tan(r)),p=Math.cos(m),f=Math.sin(m),h=Math.cos(u),g=Math.sin(u),_=p*h,v=p*g,y=f*g,x=f*h;let C,Z,T,E,w,S=l,z=c.Z.TWO_PI,A=Math.cos(S),b=Math.sin(S);do{A=Math.cos(S),b=Math.sin(S);const e=v-x*A;let n;T=Math.sqrt(h*h*b*b+e*e),Z=y+_*A,C=Math.atan2(T,Z),0===T?(n=0,E=1):(n=_*b/T,E=1-n*n),z=S,w=Z-2*y/E,isFinite(w)||(w=0),S=l+d(s,n,E,C,T,Z,w)}while(Math.abs(S-z)>c.Z.EPSILON12);const P=E*(n*n-t*t)/(t*t),D=P*(256+P*(P*(74-47*P)-128))/1024,I=w*w,F=t*(1+P*(4096+P*(P*(320-175*P)-768))/16384)*(C-D*T*(w+D*(Z*(2*I-1)-D*w*(4*T*T-3)*(4*I-3)/6)/4)),L=Math.atan2(h*b,v-x*A),N=Math.atan2(p*b,v*A-x);e._distance=F,e._startHeading=L,e._endHeading=N,e._uSquared=P}(e,r.maximumRadius,r.minimumRadius,n.longitude,n.latitude,t.longitude,t.latitude),e._start=i.Z.clone(n,e._start),e._end=i.Z.clone(t,e._end),e._start.height=0,e._end.height=0,function(e){const n=e._uSquared,t=e._ellipsoid.maximumRadius,o=e._ellipsoid.minimumRadius,i=(t-o)/t,a=Math.cos(e._startHeading),r=Math.sin(e._startHeading),s=(1-i)*Math.tan(e._start.latitude),l=1/Math.sqrt(1+s*s),c=l*s,d=Math.atan2(s,a),m=l*r,u=m*m,p=1-u,f=Math.sqrt(p),h=n/4,g=h*h,_=g*h,v=g*g,y=1+h-3*g/4+5*_/4-175*v/64,x=1-h+15*g/8-35*_/8,C=1-3*h+35*g/4,Z=1-5*h,T=y*d-x*Math.sin(2*d)*h/2-C*Math.sin(4*d)*g/16-Z*Math.sin(6*d)*_/48-5*Math.sin(8*d)*v/512,E=e._constants;E.a=t,E.b=o,E.f=i,E.cosineHeading=a,E.sineHeading=r,E.tanU=s,E.cosineU=l,E.sineU=c,E.sigma=d,E.sineAlpha=m,E.sineSquaredAlpha=u,E.cosineSquaredAlpha=p,E.cosineAlpha=f,E.u2Over4=h,E.u4Over16=g,E.u6Over64=_,E.u8Over256=v,E.a0=y,E.a1=x,E.a2=C,E.a3=Z,E.distanceRatio=T}(e)}function f(e,n,t){const o=(0,r.Z)(t,l.Z.WGS84);this._ellipsoid=o,this._start=new i.Z,this._end=new i.Z,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,(0,s.Z)(e)&&(0,s.Z)(n)&&p(this,e,n,o)}Object.defineProperties(f.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return a.Z.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return a.Z.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return a.Z.defined("distance",this._distance),this._endHeading}}}),f.prototype.setEndPoints=function(e,n){a.Z.defined("start",e),a.Z.defined("end",n),p(this,e,n,this._ellipsoid)},f.prototype.interpolateUsingFraction=function(e,n){return this.interpolateUsingSurfaceDistance(this._distance*e,n)},f.prototype.interpolateUsingSurfaceDistance=function(e,n){a.Z.defined("distance",this._distance);const t=this._constants,o=t.distanceRatio+e/t.b,r=Math.cos(2*o),l=Math.cos(4*o),c=Math.cos(6*o),m=Math.sin(2*o),u=Math.sin(4*o),p=Math.sin(6*o),f=Math.sin(8*o),h=o*o,g=o*h,_=t.u8Over256,v=t.u2Over4,y=t.u6Over64,x=t.u4Over16;let C=2*g*_*r/3+o*(1-v+7*x/4-15*y/4+579*_/64-(x-15*y/4+187*_/16)*r-(5*y/4-115*_/16)*l-29*_*c/16)+(v/2-x+71*y/32-85*_/16)*m+(5*x/16-5*y/4+383*_/96)*u-h*((y-11*_/2)*m+5*_*u/2)+(29*y/96-29*_/16)*p+539*_*f/1536;const Z=Math.asin(Math.sin(C)*t.cosineAlpha),T=Math.atan(t.a/t.b*Math.tan(Z));C-=t.sigma;const E=Math.cos(2*t.sigma+C),w=Math.sin(C),S=Math.cos(C),z=t.cosineU*S,A=t.sineU*w,b=Math.atan2(w*t.sineHeading,z-A*t.cosineHeading)-d(t.f,t.sineAlpha,t.cosineSquaredAlpha,C,w,S,E);return(0,s.Z)(n)?(n.longitude=this._start.longitude+b,n.latitude=T,n.height=0,n):new i.Z(this._start.longitude+b,T,0)};const h=f},444773:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});var o=t(911926),i=t(205857);function a(){this._removalFunctions=[]}a.prototype.add=function(e,n,t){if(!(0,o.Z)(e))throw new i.Z("event is required");const a=e.addEventListener(n,t);this._removalFunctions.push(a);const r=this;return function(){a();const e=r._removalFunctions;e.splice(e.indexOf(a),1)}},a.prototype.removeAll=function(){const e=this._removalFunctions;for(let n=0,t=e.length;n<t;++n)e[n]();e.length=0};const r=a},741425:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n,t,o,i,a,r,s){this.year=e,this.month=n,this.day=t,this.hour=o,this.minute=i,this.second=a,this.millisecond=r,this.isLeapSecond=s}},465794:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});var o=t(841604),i=t(911926);function a(e,n,t){this.heading=(0,o.Z)(e,0),this.pitch=(0,o.Z)(n,0),this.range=(0,o.Z)(t,0)}a.clone=function(e,n){if((0,i.Z)(e))return(0,i.Z)(n)||(n=new a),n.heading=e.heading,n.pitch=e.pitch,n.range=e.range,n};const r=a},364659:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n,t){this.x=e,this.y=n,this.s=t}},320066:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n,t,o){this.rightAscension=e,this.declination=n,this.rotation=t,this.rotationRate=o}},388409:(e,n,t)=>{"use strict";t.d(n,{Z:()=>U});var o=t(607796),i=t(924184),a=t(841604),r=t(911926),s=t(205857),l=t(252560),c=t(957264),d=t(683504),m=t(733496),u=t(887249),p=t(717271);const f={rayPlane:function(e,n,t){if(!(0,r.Z)(e))throw new s.Z("ray is required.");if(!(0,r.Z)(n))throw new s.Z("plane is required.");(0,r.Z)(t)||(t=new o.Z);const i=e.origin,a=e.direction,l=n.normal,d=o.Z.dot(l,a);if(Math.abs(d)<c.Z.EPSILON15)return;const m=(-n.distance-o.Z.dot(l,i))/d;return m<0?void 0:(t=o.Z.multiplyByScalar(a,m,t),o.Z.add(i,t,t))}},h=new o.Z,g=new o.Z,_=new o.Z,v=new o.Z,y=new o.Z;f.rayTriangleParametric=function(e,n,t,i,l){if(!(0,r.Z)(e))throw new s.Z("ray is required.");if(!(0,r.Z)(n))throw new s.Z("p0 is required.");if(!(0,r.Z)(t))throw new s.Z("p1 is required.");if(!(0,r.Z)(i))throw new s.Z("p2 is required.");l=(0,a.Z)(l,!1);const d=e.origin,m=e.direction,u=o.Z.subtract(t,n,h),p=o.Z.subtract(i,n,g),f=o.Z.cross(m,p,_),x=o.Z.dot(u,f);let C,Z,T,E,w;if(l){if(x<c.Z.EPSILON6)return;if(C=o.Z.subtract(d,n,v),T=o.Z.dot(C,f),T<0||T>x)return;if(Z=o.Z.cross(C,u,y),E=o.Z.dot(m,Z),E<0||T+E>x)return;w=o.Z.dot(p,Z)/x}else{if(Math.abs(x)<c.Z.EPSILON6)return;const e=1/x;if(C=o.Z.subtract(d,n,v),T=o.Z.dot(C,f)*e,T<0||T>1)return;if(Z=o.Z.cross(C,u,y),E=o.Z.dot(m,Z)*e,E<0||T+E>1)return;w=o.Z.dot(p,Z)*e}return w},f.rayTriangle=function(e,n,t,i,a,s){const l=f.rayTriangleParametric(e,n,t,i,a);if((0,r.Z)(l)&&!(l<0))return(0,r.Z)(s)||(s=new o.Z),o.Z.multiplyByScalar(e.direction,l,s),o.Z.add(e.origin,s,s)};const x=new p.Z;f.lineSegmentTriangle=function(e,n,t,i,a,l,c){if(!(0,r.Z)(e))throw new s.Z("v0 is required.");if(!(0,r.Z)(n))throw new s.Z("v1 is required.");if(!(0,r.Z)(t))throw new s.Z("p0 is required.");if(!(0,r.Z)(i))throw new s.Z("p1 is required.");if(!(0,r.Z)(a))throw new s.Z("p2 is required.");const d=x;o.Z.clone(e,d.origin),o.Z.subtract(n,e,d.direction),o.Z.normalize(d.direction,d.direction);const m=f.rayTriangleParametric(d,t,i,a,l);if(!(!(0,r.Z)(m)||m<0||m>o.Z.distance(e,n)))return(0,r.Z)(c)||(c=new o.Z),o.Z.multiplyByScalar(d.direction,m,c),o.Z.add(d.origin,c,c)};const C={root0:0,root1:0};function Z(e,n,t){(0,r.Z)(t)||(t=new l.Z);const i=e.origin,a=e.direction,s=n.center,c=n.radius*n.radius,d=o.Z.subtract(i,s,_),m=function(e,n,t,o){const i=n*n-4*e*t;if(i<0)return;if(i>0){const t=1/(2*e),a=Math.sqrt(i),r=(-n+a)*t,s=(-n-a)*t;return r<s?(o.root0=r,o.root1=s):(o.root0=s,o.root1=r),o}const a=-n/(2*e);return 0!==a?(o.root0=o.root1=a,o):void 0}(o.Z.dot(a,a),2*o.Z.dot(a,d),o.Z.magnitudeSquared(d)-c,C);if((0,r.Z)(m))return t.start=m.root0,t.stop=m.root1,t}f.raySphere=function(e,n,t){if(!(0,r.Z)(e))throw new s.Z("ray is required.");if(!(0,r.Z)(n))throw new s.Z("sphere is required.");if(t=Z(e,n,t),(0,r.Z)(t)&&!(t.stop<0))return t.start=Math.max(t.start,0),t};const T=new p.Z;f.lineSegmentSphere=function(e,n,t,i){if(!(0,r.Z)(e))throw new s.Z("p0 is required.");if(!(0,r.Z)(n))throw new s.Z("p1 is required.");if(!(0,r.Z)(t))throw new s.Z("sphere is required.");const a=T;o.Z.clone(e,a.origin);const l=o.Z.subtract(n,e,a.direction),c=o.Z.magnitude(l);if(o.Z.normalize(l,l),i=Z(a,t,i),!(!(0,r.Z)(i)||i.stop<0||i.start>c))return i.start=Math.max(i.start,0),i.stop=Math.min(i.stop,c),i};const E=new o.Z,w=new o.Z;function S(e,n,t){const o=e+n;return c.Z.sign(e)!==c.Z.sign(n)&&Math.abs(o/Math.max(Math.abs(e),Math.abs(n)))<t?0:o}f.rayEllipsoid=function(e,n){if(!(0,r.Z)(e))throw new s.Z("ray is required.");if(!(0,r.Z)(n))throw new s.Z("ellipsoid is required.");const t=n.oneOverRadii,i=o.Z.multiplyComponents(t,e.origin,E),a=o.Z.multiplyComponents(t,e.direction,w),c=o.Z.magnitudeSquared(i),d=o.Z.dot(i,a);let m,u,p,f,h;if(c>1){if(d>=0)return;const e=d*d;if(m=c-1,u=o.Z.magnitudeSquared(a),p=u*m,e<p)return;if(e>p){f=d*d-p,h=-d+Math.sqrt(f);const e=h/u,n=m/h;return e<n?new l.Z(e,n):{start:n,stop:e}}const n=Math.sqrt(m/u);return new l.Z(n,n)}return c<1?(m=c-1,u=o.Z.magnitudeSquared(a),p=u*m,f=d*d-p,h=-d+Math.sqrt(f),new l.Z(0,h/u)):d<0?(u=o.Z.magnitudeSquared(a),new l.Z(0,-d/u)):void 0};const z=new o.Z,A=new o.Z,b=new o.Z,P=new o.Z,D=new o.Z,I=new d.Z,F=new d.Z,L=new d.Z,N=new d.Z,R=new d.Z,O=new d.Z,M=new d.Z,H=new o.Z,W=new o.Z,G=new i.Z;f.grazingAltitudeLocation=function(e,n){if(!(0,r.Z)(e))throw new s.Z("ray is required.");if(!(0,r.Z)(n))throw new s.Z("ellipsoid is required.");const t=e.origin,i=e.direction;if(!o.Z.equals(t,o.Z.ZERO)){const e=n.geodeticSurfaceNormal(t,z);if(o.Z.dot(i,e)>=0)return t}const a=(0,r.Z)(this.rayEllipsoid(e,n)),l=n.transformPositionToScaledSpace(i,z),p=o.Z.normalize(l,l),f=o.Z.mostOrthogonalAxis(l,P),h=o.Z.normalize(o.Z.cross(f,p,A),A),g=o.Z.normalize(o.Z.cross(p,h,b),b),_=I;_[0]=p.x,_[1]=p.y,_[2]=p.z,_[3]=h.x,_[4]=h.y,_[5]=h.z,_[6]=g.x,_[7]=g.y,_[8]=g.z;const v=d.Z.transpose(_,F),y=d.Z.fromScale(n.radii,L),x=d.Z.fromScale(n.oneOverRadii,N),C=R;C[0]=0,C[1]=-i.z,C[2]=i.y,C[3]=i.z,C[4]=0,C[5]=-i.x,C[6]=-i.y,C[7]=i.x,C[8]=0;const Z=d.Z.multiply(d.Z.multiply(v,x,O),C,O),T=d.Z.multiply(d.Z.multiply(Z,y,M),_,M),E=d.Z.multiplyByVector(Z,t,D),w=function(e,n,t,i,a){const r=1*(e[d.Z.COLUMN1ROW1]-e[d.Z.COLUMN2ROW2]),s=1*(0*S(e[d.Z.COLUMN1ROW0],e[d.Z.COLUMN0ROW1],c.Z.EPSILON15)+n.y),l=0*e[d.Z.COLUMN0ROW0]+1*e[d.Z.COLUMN2ROW2]+0*n.x+0,p=1*S(e[d.Z.COLUMN2ROW1],e[d.Z.COLUMN1ROW2],c.Z.EPSILON15),f=1*(0*S(e[d.Z.COLUMN2ROW0],e[d.Z.COLUMN0ROW2])+n.z);let h;const g=[];if(0===f&&0===p){if(h=m.Z.computeRealRoots(r,s,l),0===h.length)return g;const e=h[0],n=Math.sqrt(Math.max(1-e*e,0));if(g.push(new o.Z(0,1*e,1*-n)),g.push(new o.Z(0,1*e,1*n)),2===h.length){const e=h[1],n=Math.sqrt(Math.max(1-e*e,0));g.push(new o.Z(0,1*e,1*-n)),g.push(new o.Z(0,1*e,1*n))}return g}const _=f*f,v=p*p,y=f*p,x=r*r+v,C=2*(s*r+y),Z=2*l*r+s*s-v+_,T=2*(l*s-y),E=l*l-_;if(0===x&&0===C&&0===Z&&0===T)return g;h=u.Z.computeRealRoots(x,C,Z,T,E);const w=h.length;if(0===w)return g;for(let e=0;e<w;++e){const n=h[e],t=n*n,i=Math.max(1-t,0),a=Math.sqrt(i);let d;d=c.Z.sign(r)===c.Z.sign(l)?S(r*t+l,s*n,c.Z.EPSILON12):c.Z.sign(l)===c.Z.sign(s*n)?S(r*t,s*n+l,c.Z.EPSILON12):S(r*t+s*n,l,c.Z.EPSILON12);const m=d*S(p*n,f,c.Z.EPSILON15);m<0?g.push(new o.Z(0,1*n,1*a)):m>0?g.push(new o.Z(0,1*n,1*-a)):0!==a?(g.push(new o.Z(0,1*n,1*-a)),g.push(new o.Z(0,1*n,1*a)),++e):g.push(new o.Z(0,1*n,1*a))}return g}(T,o.Z.negate(E,z));let B,U;const V=w.length;if(V>0){let e=o.Z.clone(o.Z.ZERO,W),r=Number.NEGATIVE_INFINITY;for(let n=0;n<V;++n){B=d.Z.multiplyByVector(y,d.Z.multiplyByVector(_,w[n],H),H);const a=o.Z.normalize(o.Z.subtract(B,t,P),P),s=o.Z.dot(a,i);s>r&&(r=s,e=o.Z.clone(B,e))}const s=n.cartesianToCartographic(e,G);return r=c.Z.clamp(r,0,1),U=o.Z.magnitude(o.Z.subtract(e,t,P))*Math.sqrt(1-r*r),U=a?-U:U,s.height=U,n.cartographicToCartesian(s,new o.Z)}};const B=new o.Z;f.lineSegmentPlane=function(e,n,t,i){if(!(0,r.Z)(e))throw new s.Z("endPoint0 is required.");if(!(0,r.Z)(n))throw new s.Z("endPoint1 is required.");if(!(0,r.Z)(t))throw new s.Z("plane is required.");(0,r.Z)(i)||(i=new o.Z);const a=o.Z.subtract(n,e,B),l=t.normal,d=o.Z.dot(l,a);if(Math.abs(d)<c.Z.EPSILON6)return;const m=o.Z.dot(l,e),u=-(t.distance+m)/d;return u<0||u>1?void 0:(o.Z.multiplyByScalar(a,u,i),o.Z.add(e,i,i),i)},f.trianglePlaneIntersection=function(e,n,t,i){if(!((0,r.Z)(e)&&(0,r.Z)(n)&&(0,r.Z)(t)&&(0,r.Z)(i)))throw new s.Z("p0, p1, p2, and plane are required.");const a=i.normal,l=i.distance,c=o.Z.dot(a,e)+l<0,d=o.Z.dot(a,n)+l<0,m=o.Z.dot(a,t)+l<0;let u,p,h=0;if(h+=c?1:0,h+=d?1:0,h+=m?1:0,1!==h&&2!==h||(u=new o.Z,p=new o.Z),1===h){if(c)return f.lineSegmentPlane(e,n,i,u),f.lineSegmentPlane(e,t,i,p),{positions:[e,n,t,u,p],indices:[0,3,4,1,2,4,1,4,3]};if(d)return f.lineSegmentPlane(n,t,i,u),f.lineSegmentPlane(n,e,i,p),{positions:[e,n,t,u,p],indices:[1,3,4,2,0,4,2,4,3]};if(m)return f.lineSegmentPlane(t,e,i,u),f.lineSegmentPlane(t,n,i,p),{positions:[e,n,t,u,p],indices:[2,3,4,0,1,4,0,4,3]}}else if(2===h){if(!c)return f.lineSegmentPlane(n,e,i,u),f.lineSegmentPlane(t,e,i,p),{positions:[e,n,t,u,p],indices:[1,2,4,1,4,3,0,3,4]};if(!d)return f.lineSegmentPlane(t,n,i,u),f.lineSegmentPlane(e,n,i,p),{positions:[e,n,t,u,p],indices:[2,0,4,2,4,3,1,3,4]};if(!m)return f.lineSegmentPlane(e,t,i,u),f.lineSegmentPlane(n,t,i,p),{positions:[e,n,t,u,p],indices:[0,1,4,0,4,3,2,3,4]}}};const U=f},45047:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n){this.julianDate=e,this.offset=n}},730752:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(911926);const i=function(e,n){this.positions=(0,o.Z)(e)?e:[],this.holes=(0,o.Z)(n)?n:[]}},717271:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var o=t(607796),i=t(528464),a=t(841604),r=t(911926);function s(e,n){n=o.Z.clone((0,a.Z)(n,o.Z.ZERO)),o.Z.equals(n,o.Z.ZERO)||o.Z.normalize(n,n),this.origin=o.Z.clone((0,a.Z)(e,o.Z.ZERO)),this.direction=n}s.clone=function(e,n){if((0,r.Z)(e))return(0,r.Z)(n)?(n.origin=o.Z.clone(e.origin),n.direction=o.Z.clone(e.direction),n):new s(e.origin,e.direction)},s.getPoint=function(e,n,t){return i.Z.typeOf.object("ray",e),i.Z.typeOf.number("t",n),(0,r.Z)(t)||(t=new o.Z),t=o.Z.multiplyByScalar(e.direction,n,t),o.Z.add(e.origin,t,t)};const l=s},288428:(e,n,t)=>{"use strict";t.d(n,{Z:()=>m});var o=t(924184),i=t(528464),a=t(841604),r=t(911926),s=t(961409),l=t(957264);function c(e,n,t,o){this.west=(0,a.Z)(e,0),this.south=(0,a.Z)(n,0),this.east=(0,a.Z)(t,0),this.north=(0,a.Z)(o,0)}Object.defineProperties(c.prototype,{width:{get:function(){return c.computeWidth(this)}},height:{get:function(){return c.computeHeight(this)}}}),c.packedLength=4,c.pack=function(e,n,t){return i.Z.typeOf.object("value",e),i.Z.defined("array",n),t=(0,a.Z)(t,0),n[t++]=e.west,n[t++]=e.south,n[t++]=e.east,n[t]=e.north,n},c.unpack=function(e,n,t){return i.Z.defined("array",e),n=(0,a.Z)(n,0),(0,r.Z)(t)||(t=new c),t.west=e[n++],t.south=e[n++],t.east=e[n++],t.north=e[n],t},c.computeWidth=function(e){i.Z.typeOf.object("rectangle",e);let n=e.east;const t=e.west;return n<t&&(n+=l.Z.TWO_PI),n-t},c.computeHeight=function(e){return i.Z.typeOf.object("rectangle",e),e.north-e.south},c.fromDegrees=function(e,n,t,o,i){return e=l.Z.toRadians((0,a.Z)(e,0)),n=l.Z.toRadians((0,a.Z)(n,0)),t=l.Z.toRadians((0,a.Z)(t,0)),o=l.Z.toRadians((0,a.Z)(o,0)),(0,r.Z)(i)?(i.west=e,i.south=n,i.east=t,i.north=o,i):new c(e,n,t,o)},c.fromRadians=function(e,n,t,o,i){return(0,r.Z)(i)?(i.west=(0,a.Z)(e,0),i.south=(0,a.Z)(n,0),i.east=(0,a.Z)(t,0),i.north=(0,a.Z)(o,0),i):new c(e,n,t,o)},c.fromCartographicArray=function(e,n){i.Z.defined("cartographics",e);let t=Number.MAX_VALUE,o=-Number.MAX_VALUE,a=Number.MAX_VALUE,s=-Number.MAX_VALUE,d=Number.MAX_VALUE,m=-Number.MAX_VALUE;for(let n=0,i=e.length;n<i;n++){const i=e[n];t=Math.min(t,i.longitude),o=Math.max(o,i.longitude),d=Math.min(d,i.latitude),m=Math.max(m,i.latitude);const r=i.longitude>=0?i.longitude:i.longitude+l.Z.TWO_PI;a=Math.min(a,r),s=Math.max(s,r)}return o-t>s-a&&(t=a,o=s,o>l.Z.PI&&(o-=l.Z.TWO_PI),t>l.Z.PI&&(t-=l.Z.TWO_PI)),(0,r.Z)(n)?(n.west=t,n.south=d,n.east=o,n.north=m,n):new c(t,d,o,m)},c.fromCartesianArray=function(e,n,t){i.Z.defined("cartesians",e),n=(0,a.Z)(n,s.Z.WGS84);let o=Number.MAX_VALUE,d=-Number.MAX_VALUE,m=Number.MAX_VALUE,u=-Number.MAX_VALUE,p=Number.MAX_VALUE,f=-Number.MAX_VALUE;for(let t=0,i=e.length;t<i;t++){const i=n.cartesianToCartographic(e[t]);o=Math.min(o,i.longitude),d=Math.max(d,i.longitude),p=Math.min(p,i.latitude),f=Math.max(f,i.latitude);const a=i.longitude>=0?i.longitude:i.longitude+l.Z.TWO_PI;m=Math.min(m,a),u=Math.max(u,a)}return d-o>u-m&&(o=m,d=u,d>l.Z.PI&&(d-=l.Z.TWO_PI),o>l.Z.PI&&(o-=l.Z.TWO_PI)),(0,r.Z)(t)?(t.west=o,t.south=p,t.east=d,t.north=f,t):new c(o,p,d,f)},c.clone=function(e,n){if((0,r.Z)(e))return(0,r.Z)(n)?(n.west=e.west,n.south=e.south,n.east=e.east,n.north=e.north,n):new c(e.west,e.south,e.east,e.north)},c.equalsEpsilon=function(e,n,t){return t=(0,a.Z)(t,0),e===n||(0,r.Z)(e)&&(0,r.Z)(n)&&Math.abs(e.west-n.west)<=t&&Math.abs(e.south-n.south)<=t&&Math.abs(e.east-n.east)<=t&&Math.abs(e.north-n.north)<=t},c.prototype.clone=function(e){return c.clone(this,e)},c.prototype.equals=function(e){return c.equals(this,e)},c.equals=function(e,n){return e===n||(0,r.Z)(e)&&(0,r.Z)(n)&&e.west===n.west&&e.south===n.south&&e.east===n.east&&e.north===n.north},c.prototype.equalsEpsilon=function(e,n){return c.equalsEpsilon(this,e,n)},c.validate=function(e){i.Z.typeOf.object("rectangle",e);const n=e.north;i.Z.typeOf.number.greaterThanOrEquals("north",n,-l.Z.PI_OVER_TWO),i.Z.typeOf.number.lessThanOrEquals("north",n,l.Z.PI_OVER_TWO);const t=e.south;i.Z.typeOf.number.greaterThanOrEquals("south",t,-l.Z.PI_OVER_TWO),i.Z.typeOf.number.lessThanOrEquals("south",t,l.Z.PI_OVER_TWO);const o=e.west;i.Z.typeOf.number.greaterThanOrEquals("west",o,-Math.PI),i.Z.typeOf.number.lessThanOrEquals("west",o,Math.PI);const a=e.east;i.Z.typeOf.number.greaterThanOrEquals("east",a,-Math.PI),i.Z.typeOf.number.lessThanOrEquals("east",a,Math.PI)},c.southwest=function(e,n){return i.Z.typeOf.object("rectangle",e),(0,r.Z)(n)?(n.longitude=e.west,n.latitude=e.south,n.height=0,n):new o.Z(e.west,e.south)},c.northwest=function(e,n){return i.Z.typeOf.object("rectangle",e),(0,r.Z)(n)?(n.longitude=e.west,n.latitude=e.north,n.height=0,n):new o.Z(e.west,e.north)},c.northeast=function(e,n){return i.Z.typeOf.object("rectangle",e),(0,r.Z)(n)?(n.longitude=e.east,n.latitude=e.north,n.height=0,n):new o.Z(e.east,e.north)},c.southeast=function(e,n){return i.Z.typeOf.object("rectangle",e),(0,r.Z)(n)?(n.longitude=e.east,n.latitude=e.south,n.height=0,n):new o.Z(e.east,e.south)},c.center=function(e,n){i.Z.typeOf.object("rectangle",e);let t=e.east;const a=e.west;t<a&&(t+=l.Z.TWO_PI);const s=l.Z.negativePiToPi(.5*(a+t)),c=.5*(e.south+e.north);return(0,r.Z)(n)?(n.longitude=s,n.latitude=c,n.height=0,n):new o.Z(s,c)},c.intersection=function(e,n,t){i.Z.typeOf.object("rectangle",e),i.Z.typeOf.object("otherRectangle",n);let o=e.east,a=e.west,s=n.east,d=n.west;o<a&&s>0?o+=l.Z.TWO_PI:s<d&&o>0&&(s+=l.Z.TWO_PI),o<a&&d<0?d+=l.Z.TWO_PI:s<d&&a<0&&(a+=l.Z.TWO_PI);const m=l.Z.negativePiToPi(Math.max(a,d)),u=l.Z.negativePiToPi(Math.min(o,s));if((e.west<e.east||n.west<n.east)&&u<=m)return;const p=Math.max(e.south,n.south),f=Math.min(e.north,n.north);return p>=f?void 0:(0,r.Z)(t)?(t.west=m,t.south=p,t.east=u,t.north=f,t):new c(m,p,u,f)},c.simpleIntersection=function(e,n,t){i.Z.typeOf.object("rectangle",e),i.Z.typeOf.object("otherRectangle",n);const o=Math.max(e.west,n.west),a=Math.max(e.south,n.south),s=Math.min(e.east,n.east),l=Math.min(e.north,n.north);if(!(a>=l||o>=s))return(0,r.Z)(t)?(t.west=o,t.south=a,t.east=s,t.north=l,t):new c(o,a,s,l)},c.union=function(e,n,t){i.Z.typeOf.object("rectangle",e),i.Z.typeOf.object("otherRectangle",n),(0,r.Z)(t)||(t=new c);let o=e.east,a=e.west,s=n.east,d=n.west;o<a&&s>0?o+=l.Z.TWO_PI:s<d&&o>0&&(s+=l.Z.TWO_PI),o<a&&d<0?d+=l.Z.TWO_PI:s<d&&a<0&&(a+=l.Z.TWO_PI);const m=l.Z.negativePiToPi(Math.min(a,d)),u=l.Z.negativePiToPi(Math.max(o,s));return t.west=m,t.south=Math.min(e.south,n.south),t.east=u,t.north=Math.max(e.north,n.north),t},c.expand=function(e,n,t){return i.Z.typeOf.object("rectangle",e),i.Z.typeOf.object("cartographic",n),(0,r.Z)(t)||(t=new c),t.west=Math.min(e.west,n.longitude),t.south=Math.min(e.south,n.latitude),t.east=Math.max(e.east,n.longitude),t.north=Math.max(e.north,n.latitude),t},c.contains=function(e,n){i.Z.typeOf.object("rectangle",e),i.Z.typeOf.object("cartographic",n);let t=n.longitude;const o=n.latitude,a=e.west;let r=e.east;return r<a&&(r+=l.Z.TWO_PI,t<0&&(t+=l.Z.TWO_PI)),(t>a||l.Z.equalsEpsilon(t,a,l.Z.EPSILON14))&&(t<r||l.Z.equalsEpsilon(t,r,l.Z.EPSILON14))&&o>=e.south&&o<=e.north};const d=new o.Z;c.subsample=function(e,n,t,o){i.Z.typeOf.object("rectangle",e),n=(0,a.Z)(n,s.Z.WGS84),t=(0,a.Z)(t,0),(0,r.Z)(o)||(o=[]);let m=0;const u=e.north,p=e.south,f=e.east,h=e.west,g=d;g.height=t,g.longitude=h,g.latitude=u,o[m]=n.cartographicToCartesian(g,o[m]),m++,g.longitude=f,o[m]=n.cartographicToCartesian(g,o[m]),m++,g.latitude=p,o[m]=n.cartographicToCartesian(g,o[m]),m++,g.longitude=h,o[m]=n.cartographicToCartesian(g,o[m]),m++,g.latitude=u<0?u:p>0?p:0;for(let t=1;t<8;++t)g.longitude=-Math.PI+t*l.Z.PI_OVER_TWO,c.contains(e,g)&&(o[m]=n.cartographicToCartesian(g,o[m]),m++);return 0===g.latitude&&(g.longitude=h,o[m]=n.cartographicToCartesian(g,o[m]),m++,g.longitude=f,o[m]=n.cartographicToCartesian(g,o[m]),m++),o.length=m,o},c.MAX_VALUE=Object.freeze(new c(-Math.PI,-l.Z.PI_OVER_TWO,Math.PI,l.Z.PI_OVER_TWO));const m=c},911990:(e,n,t)=>{"use strict";t.d(n,{Z:()=>X});var o=t(255635),i=t(958469),a=t(841604),r=t(911926),s=t(292517),l=t(205857),c=t(71576),d=t(569210),m=t(988599),u=t(652966);function p(e,n,t){const o=e._element;if(o===document)return t.x=n.clientX,t.y=n.clientY,t;const i=o.getBoundingClientRect();return t.x=n.clientX-i.left,t.y=n.clientY-i.top,t}function f(e,n){let t=e;return(0,r.Z)(n)&&(t+="+"+n),t}function h(e){return e.shiftKey?m.Z.SHIFT:e.ctrlKey?m.Z.CTRL:e.altKey?m.Z.ALT:void 0}function g(e,n,t,o){function i(n){o(e,n)}c.Z.isInternetExplorer()?t.addEventListener(n,i,!1):t.addEventListener(n,i,{capture:!1,passive:!1}),e._removalFunctions.push((function(){t.removeEventListener(n,i,!1)}))}const _={position:new i.Z};function v(e){e._lastSeenTouchEvent=(0,d.Z)()}function y(e){return(0,d.Z)()-e._lastSeenTouchEvent>Y.mouseEmulationIgnoreMilliseconds}function x(e,n,t){const o=e.x-n.x,i=e.y-n.y;return Math.sqrt(o*o+i*i)<t}function C(e,n){if(!y(e))return;const t=n.button;let o;if(e._buttonDown[t]=!0,0===t)o=u.Z.LEFT_DOWN;else if(1===t)o=u.Z.MIDDLE_DOWN;else{if(2!==t)return;o=u.Z.RIGHT_DOWN}const a=p(e,n,e._primaryPosition);i.Z.clone(a,e._primaryStartPosition),i.Z.clone(a,e._primaryPreviousPosition);const s=h(n),l=e.getInputAction(o,s);(0,r.Z)(l)&&(i.Z.clone(a,_.position),l(_),n.preventDefault())}const Z={position:new i.Z},T={position:new i.Z};function E(e,n,t,o){const a=h(o),s=e.getInputAction(n,a),l=e.getInputAction(t,a);if((0,r.Z)(s)||(0,r.Z)(l)){const n=p(e,o,e._primaryPosition);(0,r.Z)(s)&&(i.Z.clone(n,Z.position),s(Z)),(0,r.Z)(l)&&x(e._primaryStartPosition,n,e._clickPixelTolerance)&&(i.Z.clone(n,T.position),l(T))}}function w(e,n){if(!y(e))return;const t=n.button;0!==t&&1!==t&&2!==t||(e._buttonDown[0]&&(E(e,u.Z.LEFT_UP,u.Z.LEFT_CLICK,n),e._buttonDown[0]=!1),e._buttonDown[1]&&(E(e,u.Z.MIDDLE_UP,u.Z.MIDDLE_CLICK,n),e._buttonDown[1]=!1),e._buttonDown[2]&&(E(e,u.Z.RIGHT_UP,u.Z.RIGHT_CLICK,n),e._buttonDown[2]=!1))}const S={startPosition:new i.Z,endPosition:new i.Z};function z(e,n){if(!y(e))return;const t=h(n),o=p(e,n,e._primaryPosition),a=e._primaryPreviousPosition,s=e.getInputAction(u.Z.MOUSE_MOVE,t);(0,r.Z)(s)&&(i.Z.clone(a,S.startPosition),i.Z.clone(o,S.endPosition),s(S)),i.Z.clone(o,a),(e._buttonDown[0]||e._buttonDown[1]||e._buttonDown[2])&&n.preventDefault()}const A={position:new i.Z};function b(e,n){let t;if(0!==n.button)return;t=u.Z.LEFT_DOUBLE_CLICK;const o=h(n),i=e.getInputAction(t,o);(0,r.Z)(i)&&(p(e,n,A.position),i(A))}function P(e,n){let t;if((0,r.Z)(n.deltaY)){const e=n.deltaMode;t=e===n.DOM_DELTA_PIXEL?-n.deltaY:e===n.DOM_DELTA_LINE?40*-n.deltaY:120*-n.deltaY}else t=n.detail>0?-120*n.detail:n.wheelDelta;if(!(0,r.Z)(t))return;const o=h(n),i=e.getInputAction(u.Z.WHEEL,o);(0,r.Z)(i)&&(i(t),n.preventDefault())}function D(e,n){v(e);const t=n.changedTouches;let o;const a=t.length;let r,s;const l=e._positions;for(o=0;o<a;++o)r=t[o],s=r.identifier,l.set(s,p(e,r,new i.Z));M(e,n);const c=e._previousPositions;for(o=0;o<a;++o)r=t[o],s=r.identifier,c.set(s,i.Z.clone(l.get(s)))}function I(e,n){v(e);const t=n.changedTouches;let o;const i=t.length;let a,r;const s=e._positions;for(o=0;o<i;++o)a=t[o],r=a.identifier,s.remove(r);M(e,n);const l=e._previousPositions;for(o=0;o<i;++o)a=t[o],r=a.identifier,l.remove(r)}const F={position:new i.Z},L={position1:new i.Z,position2:new i.Z},N={position:new i.Z},R={position:new i.Z},O={position:new i.Z};function M(e,n){const t=h(n),o=e._positions,a=o.length;let s,l;const c=e._isPinching;if(1!==a&&e._buttonDown[0]&&(e._buttonDown[0]=!1,(0,r.Z)(e._touchHoldTimer)&&(clearTimeout(e._touchHoldTimer),e._touchHoldTimer=void 0),s=e.getInputAction(u.Z.LEFT_UP,t),(0,r.Z)(s)&&(i.Z.clone(e._primaryPosition,N.position),s(N)),0===a&&!e._isTouchHolding&&(l=e.getInputAction(u.Z.LEFT_CLICK,t),(0,r.Z)(l))&&x(e._primaryStartPosition,e._previousPositions.values[0],e._clickPixelTolerance)&&(i.Z.clone(e._primaryPosition,R.position),l(R)),e._isTouchHolding=!1),0===a&&c&&(e._isPinching=!1,s=e.getInputAction(u.Z.PINCH_END,t),(0,r.Z)(s)&&s()),1===a&&!c){const a=o.values[0];i.Z.clone(a,e._primaryPosition),i.Z.clone(a,e._primaryStartPosition),i.Z.clone(a,e._primaryPreviousPosition),e._buttonDown[0]=!0,s=e.getInputAction(u.Z.LEFT_DOWN,t),(0,r.Z)(s)&&(i.Z.clone(a,F.position),s(F)),e._touchHoldTimer=setTimeout((function(){!e.isDestroyed()&&(e._touchHoldTimer=void 0,e._isTouchHolding=!0,l=e.getInputAction(u.Z.RIGHT_CLICK,t),(0,r.Z)(l))&&x(e._primaryStartPosition,e._previousPositions.values[0],e._holdPixelTolerance)&&(i.Z.clone(e._primaryPosition,O.position),l(O))}),Y.touchHoldDelayMilliseconds),n.preventDefault()}2!==a||c||(e._isPinching=!0,s=e.getInputAction(u.Z.PINCH_START,t),(0,r.Z)(s)&&(i.Z.clone(o.values[0],L.position1),i.Z.clone(o.values[1],L.position2),s(L),n.preventDefault()))}function H(e,n){v(e);const t=n.changedTouches;let o;const a=t.length;let s,l;const c=e._positions;for(o=0;o<a;++o){s=t[o],l=s.identifier;const n=c.get(l);(0,r.Z)(n)&&p(e,s,n)}B(e,n);const d=e._previousPositions;for(o=0;o<a;++o)s=t[o],l=s.identifier,i.Z.clone(c.get(l),d.get(l))}const W={startPosition:new i.Z,endPosition:new i.Z},G={distance:{startPosition:new i.Z,endPosition:new i.Z},angleAndHeight:{startPosition:new i.Z,endPosition:new i.Z}};function B(e,n){const t=h(n),o=e._positions,a=e._previousPositions,s=o.length;let l;if(1===s&&e._buttonDown[0]){const a=o.values[0];i.Z.clone(a,e._primaryPosition);const s=e._primaryPreviousPosition;l=e.getInputAction(u.Z.MOUSE_MOVE,t),(0,r.Z)(l)&&(i.Z.clone(s,W.startPosition),i.Z.clone(a,W.endPosition),l(W)),i.Z.clone(a,s),n.preventDefault()}else if(2===s&&e._isPinching&&(l=e.getInputAction(u.Z.PINCH_MOVE,t),(0,r.Z)(l))){const e=o.values[0],n=o.values[1],t=a.values[0],r=a.values[1],s=n.x-e.x,c=n.y-e.y,d=.25*Math.sqrt(s*s+c*c),m=r.x-t.x,u=r.y-t.y,p=.25*Math.sqrt(m*m+u*u),f=.125*(n.y+e.y),h=.125*(r.y+t.y),g=Math.atan2(c,s),_=Math.atan2(u,m);i.Z.fromElements(0,p,G.distance.startPosition),i.Z.fromElements(0,d,G.distance.endPosition),i.Z.fromElements(_,h,G.angleAndHeight.startPosition),i.Z.fromElements(g,f,G.angleAndHeight.endPosition),l(G)}}function U(e,n){if(n.target.setPointerCapture(n.pointerId),"touch"===n.pointerType){const t=e._positions,o=n.pointerId;t.set(o,p(e,n,new i.Z)),M(e,n),e._previousPositions.set(o,i.Z.clone(t.get(o)))}else C(e,n)}function V(e,n){if("touch"===n.pointerType){const t=e._positions,o=n.pointerId;t.remove(o),M(e,n),e._previousPositions.remove(o)}else w(e,n)}function k(e,n){if("touch"===n.pointerType){const t=e._positions,o=n.pointerId,a=t.get(o);if(!(0,r.Z)(a))return;p(e,n,a),B(e,n);const s=e._previousPositions;i.Z.clone(t.get(o),s.get(o))}else z(e,n)}function Y(e){this._inputEvents={},this._buttonDown={LEFT:!1,MIDDLE:!1,RIGHT:!1},this._isPinching=!1,this._isTouchHolding=!1,this._lastSeenTouchEvent=-Y.mouseEmulationIgnoreMilliseconds,this._primaryStartPosition=new i.Z,this._primaryPosition=new i.Z,this._primaryPreviousPosition=new i.Z,this._positions=new o.Z,this._previousPositions=new o.Z,this._removalFunctions=[],this._touchHoldTimer=void 0,this._clickPixelTolerance=5,this._holdPixelTolerance=25,this._element=(0,a.Z)(e,document),function(e){const n=e._element,t=(0,r.Z)(n.disableRootEvents)?n:document;let o;c.Z.supportsPointerEvents()?(g(e,"pointerdown",n,U),g(e,"pointerup",n,V),g(e,"pointermove",n,k),g(e,"pointercancel",n,V)):(g(e,"mousedown",n,C),g(e,"mouseup",t,w),g(e,"mousemove",t,z),g(e,"touchstart",n,D),g(e,"touchend",t,I),g(e,"touchmove",t,H),g(e,"touchcancel",t,I)),g(e,"dblclick",n,b),o="onwheel"in n?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll",g(e,o,n,P)}(this)}Y.prototype.setInputAction=function(e,n,t){if(!(0,r.Z)(e))throw new l.Z("action is required.");if(!(0,r.Z)(n))throw new l.Z("type is required.");const o=f(n,t);this._inputEvents[o]=e},Y.prototype.getInputAction=function(e,n){if(!(0,r.Z)(e))throw new l.Z("type is required.");const t=f(e,n);return this._inputEvents[t]},Y.prototype.removeInputAction=function(e,n){if(!(0,r.Z)(e))throw new l.Z("type is required.");const t=f(e,n);delete this._inputEvents[t]},Y.prototype.isDestroyed=function(){return!1},Y.prototype.destroy=function(){return function(e){const n=e._removalFunctions;for(let e=0;e<n.length;++e)n[e]()}(this),(0,s.Z)(this)},Y.mouseEmulationIgnoreMilliseconds=800,Y.touchHoldDelayMilliseconds=1500;const X=Y},652966:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=Object.freeze({LEFT_DOWN:0,LEFT_UP:1,LEFT_CLICK:2,LEFT_DOUBLE_CLICK:3,RIGHT_DOWN:5,RIGHT_UP:6,RIGHT_CLICK:7,MIDDLE_DOWN:10,MIDDLE_UP:11,MIDDLE_CLICK:12,MOUSE_MOVE:15,WHEEL:16,PINCH_START:17,PINCH_END:18,PINCH_MOVE:19})},799533:(e,n,t)=>{"use strict";t.d(n,{Z:()=>se});var o=t(297623),i=t(958469),a=t(607796),r=t(208564),s=t(924184),l=t(528464),c=t(841604),d=t(911926),m=t(205857),u=t(148220),p=t(902740),f=t(961409),h=t(940754),g=t(954627),_=t(364659),v=t(132735),y=t(957264),x=t(683504),C=t(641418),Z=t(681474),T=t(136864);const E={},w={up:{south:"east",north:"west",west:"south",east:"north"},down:{south:"west",north:"east",west:"north",east:"south"},south:{up:"west",down:"east",west:"down",east:"up"},north:{up:"east",down:"west",west:"up",east:"down"},west:{up:"north",down:"south",north:"down",south:"up"},east:{up:"south",down:"north",north:"up",south:"down"}},S={north:[-1,0,0],east:[0,1,0],up:[0,0,1],south:[1,0,0],west:[0,-1,0],down:[0,0,-1]},z={},A={east:new a.Z,north:new a.Z,up:new a.Z,west:new a.Z,south:new a.Z,down:new a.Z};let b=new a.Z,P=new a.Z,D=new a.Z;E.localFrameToFixedFrameGenerator=function(e,n){if(!w.hasOwnProperty(e)||!w[e].hasOwnProperty(n))throw new m.Z("firstAxis and secondAxis must be east, north, up, west, south or down.");const t=w[e][n];let o;const i=e+n;return(0,d.Z)(z[i])?o=z[i]:(o=function(o,i,r){if(!(0,d.Z)(o))throw new m.Z("origin is required.");if((0,d.Z)(r)||(r=new C.Z),a.Z.equalsEpsilon(o,a.Z.ZERO,y.Z.EPSILON14))a.Z.unpack(S[e],0,b),a.Z.unpack(S[n],0,P),a.Z.unpack(S[t],0,D);else if(y.Z.equalsEpsilon(o.x,0,y.Z.EPSILON14)&&y.Z.equalsEpsilon(o.y,0,y.Z.EPSILON14)){const i=y.Z.sign(o.z);a.Z.unpack(S[e],0,b),"east"!==e&&"west"!==e&&a.Z.multiplyByScalar(b,i,b),a.Z.unpack(S[n],0,P),"east"!==n&&"west"!==n&&a.Z.multiplyByScalar(P,i,P),a.Z.unpack(S[t],0,D),"east"!==t&&"west"!==t&&a.Z.multiplyByScalar(D,i,D)}else{(i=(0,c.Z)(i,f.Z.WGS84)).geodeticSurfaceNormal(o,A.up);const r=A.up,s=A.east;s.x=-o.y,s.y=o.x,s.z=0,a.Z.normalize(s,A.east),a.Z.cross(r,s,A.north),a.Z.multiplyByScalar(A.up,-1,A.down),a.Z.multiplyByScalar(A.east,-1,A.west),a.Z.multiplyByScalar(A.north,-1,A.south),b=A[e],P=A[n],D=A[t]}return r[0]=b.x,r[1]=b.y,r[2]=b.z,r[3]=0,r[4]=P.x,r[5]=P.y,r[6]=P.z,r[7]=0,r[8]=D.x,r[9]=D.y,r[10]=D.z,r[11]=0,r[12]=o.x,r[13]=o.y,r[14]=o.z,r[15]=1,r},z[i]=o),o},E.eastNorthUpToFixedFrame=E.localFrameToFixedFrameGenerator("east","north"),E.northEastDownToFixedFrame=E.localFrameToFixedFrameGenerator("north","east"),E.northUpEastToFixedFrame=E.localFrameToFixedFrameGenerator("north","up"),E.northWestUpToFixedFrame=E.localFrameToFixedFrameGenerator("north","west");const I=new Z.Z,F=new a.Z(1,1,1),L=new C.Z;E.headingPitchRollToFixedFrame=function(e,n,t,o,i){l.Z.typeOf.object("HeadingPitchRoll",n),o=(0,c.Z)(o,E.eastNorthUpToFixedFrame);const r=Z.Z.fromHeadingPitchRoll(n,I),s=C.Z.fromTranslationQuaternionRotationScale(a.Z.ZERO,r,F,L);return i=o(e,t,i),C.Z.multiply(i,s,i)};const N=new C.Z,R=new x.Z;E.headingPitchRollQuaternion=function(e,n,t,o,i){l.Z.typeOf.object("HeadingPitchRoll",n);const a=E.headingPitchRollToFixedFrame(e,n,t,o,N),r=C.Z.getMatrix3(a,R);return Z.Z.fromRotationMatrix(r,i)};const O=new a.Z(1,1,1),M=new a.Z,H=new C.Z,W=new C.Z,G=new x.Z,B=new Z.Z;E.fixedFrameToHeadingPitchRoll=function(e,n,t,o){l.Z.defined("transform",e),n=(0,c.Z)(n,f.Z.WGS84),t=(0,c.Z)(t,E.eastNorthUpToFixedFrame),(0,d.Z)(o)||(o=new h.Z);const i=C.Z.getTranslation(e,M);if(a.Z.equals(i,a.Z.ZERO))return o.heading=0,o.pitch=0,o.roll=0,o;let r=C.Z.inverseTransformation(t(i,n,H),H),s=C.Z.setScale(e,O,W);s=C.Z.setTranslation(s,a.Z.ZERO,s),r=C.Z.multiply(r,s,r);let m=Z.Z.fromRotationMatrix(C.Z.getMatrix3(r,G),B);return m=Z.Z.normalize(m,m),h.Z.fromQuaternion(m,o)};const U=y.Z.TWO_PI/86400;let V=new v.Z;E.computeTemeToPseudoFixedMatrix=function(e,n){if(!(0,d.Z)(e))throw new m.Z("date is required.");V=v.Z.addSeconds(e,-v.Z.computeTaiMinusUtc(e),V);const t=V.dayNumber,o=V.secondsOfDay;let i;const a=t-2451545;i=o>=43200?(a+.5)/T.Z.DAYS_PER_JULIAN_CENTURY:(a-.5)/T.Z.DAYS_PER_JULIAN_CENTURY;const r=(24110.54841+i*(8640184.812866+i*(.093104+-62e-7*i)))*U%y.Z.TWO_PI+(72921158553e-15+11772758384668e-32*(t-2451545.5))*((o+.5*T.Z.SECONDS_PER_DAY)%T.Z.SECONDS_PER_DAY),s=Math.cos(r),l=Math.sin(r);return(0,d.Z)(n)?(n[0]=s,n[1]=-l,n[2]=0,n[3]=l,n[4]=s,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n):new x.Z(s,l,0,-l,s,0,0,0,1)},E.iau2006XysData=new g.Z,E.earthOrientationParameters=u.Z.NONE;const k=32.184;E.preloadIcrfFixed=function(e){const n=e.start.dayNumber,t=e.start.secondsOfDay+k,i=e.stop.dayNumber,a=e.stop.secondsOfDay+k,r=E.iau2006XysData.preload(n,t,i,a),s=E.earthOrientationParameters.getPromiseToLoad();return o.Z.all([r,s])},E.computeIcrfToFixedMatrix=function(e,n){if(!(0,d.Z)(e))throw new m.Z("date is required.");(0,d.Z)(n)||(n=new x.Z);const t=E.computeFixedToIcrfMatrix(e,n);if((0,d.Z)(t))return x.Z.transpose(t,n)};const Y=new _.Z(0,0,0),X=new p.Z(0,0,0,0,0,0),q=new x.Z,j=new x.Z;E.computeFixedToIcrfMatrix=function(e,n){if(!(0,d.Z)(e))throw new m.Z("date is required.");(0,d.Z)(n)||(n=new x.Z);const t=E.earthOrientationParameters.compute(e,X);if(!(0,d.Z)(t))return;const o=e.dayNumber,i=e.secondsOfDay+k,a=E.iau2006XysData.computeXysRadians(o,i,Y);if(!(0,d.Z)(a))return;const r=a.x+t.xPoleOffset,s=a.y+t.yPoleOffset,l=1/(1+Math.sqrt(1-r*r-s*s)),c=q;c[0]=1-l*r*r,c[3]=-l*r*s,c[6]=r,c[1]=-l*r*s,c[4]=1-l*s*s,c[7]=s,c[2]=-r,c[5]=-s,c[8]=1-l*(r*r+s*s);const u=x.Z.fromRotationZ(-a.s,j),p=x.Z.multiply(c,u,q),f=e.dayNumber-2451545,h=(e.secondsOfDay-v.Z.computeTaiMinusUtc(e)+t.ut1MinusUtc)/T.Z.SECONDS_PER_DAY;let g=.779057273264+h+.00273781191135448*(f+h);g=g%1*y.Z.TWO_PI;const _=x.Z.fromRotationZ(g,j),C=x.Z.multiply(p,_,q),Z=Math.cos(t.xPoleWander),w=Math.cos(t.yPoleWander),S=Math.sin(t.xPoleWander),z=Math.sin(t.yPoleWander);let A=o-2451545+i/T.Z.SECONDS_PER_DAY;A/=36525;const b=-47e-6*A*y.Z.RADIANS_PER_DEGREE/3600,P=Math.cos(b),D=Math.sin(b),I=j;return I[0]=Z*P,I[1]=Z*D,I[2]=S,I[3]=-w*D+z*S*P,I[4]=w*P+z*S*D,I[5]=-z*Z,I[6]=-z*D-w*S*P,I[7]=z*P-w*S*D,I[8]=w*Z,x.Z.multiply(C,I,n)};const Q=new r.Z;E.pointToWindowCoordinates=function(e,n,t,o){return(o=E.pointToGLWindowCoordinates(e,n,t,o)).y=2*n[5]-o.y,o},E.pointToGLWindowCoordinates=function(e,n,t,o){if(!(0,d.Z)(e))throw new m.Z("modelViewProjectionMatrix is required.");if(!(0,d.Z)(n))throw new m.Z("viewportTransformation is required.");if(!(0,d.Z)(t))throw new m.Z("point is required.");(0,d.Z)(o)||(o=new i.Z);const a=Q;return C.Z.multiplyByVector(e,r.Z.fromElements(t.x,t.y,t.z,1,a),a),r.Z.multiplyByScalar(a,1/a.w,a),C.Z.multiplyByVector(n,a,a),i.Z.fromCartesian4(a,o)};const K=new a.Z,J=new a.Z,$=new a.Z;E.rotationMatrixFromPositionVelocity=function(e,n,t,o){if(!(0,d.Z)(e))throw new m.Z("position is required.");if(!(0,d.Z)(n))throw new m.Z("velocity is required.");const i=(0,c.Z)(t,f.Z.WGS84).geodeticSurfaceNormal(e,K);let r=a.Z.cross(n,i,J);a.Z.equalsEpsilon(r,a.Z.ZERO,y.Z.EPSILON6)&&(r=a.Z.clone(a.Z.UNIT_X,r));const s=a.Z.cross(r,n,$);return a.Z.normalize(s,s),a.Z.cross(n,s,r),a.Z.negate(r,r),a.Z.normalize(r,r),(0,d.Z)(o)||(o=new x.Z),o[0]=n.x,o[1]=n.y,o[2]=n.z,o[3]=r.x,o[4]=r.y,o[5]=r.z,o[6]=s.x,o[7]=s.y,o[8]=s.z,o};const ee=new C.Z(0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1),ne=new s.Z,te=new a.Z,oe=new a.Z,ie=new x.Z,ae=new C.Z,re=new C.Z;E.basisTo2D=function(e,n,t){if(!(0,d.Z)(e))throw new m.Z("projection is required.");if(!(0,d.Z)(n))throw new m.Z("matrix is required.");if(!(0,d.Z)(t))throw new m.Z("result is required.");const o=C.Z.getTranslation(n,oe),i=e.ellipsoid,r=i.cartesianToCartographic(o,ne),s=e.project(r,te);a.Z.fromElements(s.z,s.x,s.y,s);const l=E.eastNorthUpToFixedFrame(o,i,ae),c=C.Z.inverseTransformation(l,re),u=C.Z.getMatrix3(n,ie),p=C.Z.multiplyByMatrix3(c,u,t);return C.Z.multiply(ee,p,t),C.Z.setTranslation(t,s,t),t},E.wgs84To2DModelMatrix=function(e,n,t){if(!(0,d.Z)(e))throw new m.Z("projection is required.");if(!(0,d.Z)(n))throw new m.Z("center is required.");if(!(0,d.Z)(t))throw new m.Z("result is required.");const o=e.ellipsoid,i=E.eastNorthUpToFixedFrame(n,o,ae),r=C.Z.inverseTransformation(i,re),s=o.cartesianToCartographic(n,ne),l=e.project(s,te);a.Z.fromElements(l.z,l.x,l.y,l);const c=C.Z.fromTranslation(l,ae);return C.Z.multiply(ee,r,t),C.Z.multiply(c,t,t),t};const se=E},972360:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){return 0!==e.length&&"/"===e[e.length-1]||(e+="/"),e}},818494:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const n=16*Math.random()|0;return("x"===e?n:3&n|8).toString(16)}))}},911926:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){return null!=e}},441972:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(911926);const i=function(e){let n;const t=e.name,i=e.message;n=(0,o.Z)(t)&&(0,o.Z)(i)?t+": "+i:e.toString();const a=e.stack;return(0,o.Z)(a)&&(n+="\n"+a),n}},935149:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var o=t(226901),i=t(841604),a=t(911926),r=t(205857);function s(e,n){let t;return"undefined"!=typeof document&&(t=document),s._implementation(e,n,t)}s._implementation=function(e,n,t){if(!(0,a.Z)(e))throw new r.Z("relative uri is required.");if(!(0,a.Z)(n)){if(void 0===t)return e;n=(0,i.Z)(t.baseURI,t.location.href)}const s=new o.Z(e);return""!==s.scheme()?s.toString():s.absoluteTo(n).toString()};const l=s},569210:(e,n,t)=>{"use strict";let o;t.d(n,{Z:()=>i}),o="undefined"!=typeof performance&&"function"==typeof performance.now&&isFinite(performance.now())?function(){return performance.now()}:function(){return Date.now()};const i=o},679737:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n){return 0!=(e&n)}},959649:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});var o=t(911926);let i;const a=function(e){(0,o.Z)(i)||(i=document.createElement("a")),i.href=window.location.href;const n=i.host,t=i.protocol;return i.href=e,i.href=i.href,t!==i.protocol||n!==i.host}},11568:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){const n={};if(!e)return n;const t=e.split("\r\n");for(let e=0;e<t.length;++e){const o=t[e],i=o.indexOf(": ");if(i>0){const e=o.substring(0,i),t=o.substring(i+2);n[e]=t}}return n}},554389:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n){this.position=e,this.headingPitchRoll=n}},671949:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n){this.position=e,this.headingPitchRange=n}},618542:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){this.context=e,this.framebuffer=void 0,this.blendingEnabled=void 0,this.scissorTest=void 0,this.viewport=void 0}},843657:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function e(n){if("object"!=typeof n||null===n)return n;let t;const o=Object.keys(n);for(let i=0;i<o.length;i++)t=o[i],n.hasOwnProperty(t)&&"_applyFunctions"!==t&&(n[t]=e(n[t]));return Object.freeze(n)}},140531:(e,n,t)=>{"use strict";t.d(n,{Z:()=>Mn});var o=t(406562),i=t(958469),a=t(607796),r=t(208564),s=t(924184),l=t(841604),c=t(911926),d=t(205857),m=t(517650),u=t(961409),p=t(240404),f=t(131972),h=t(569210),g=t(465794),_=t(940754),v=t(638296),y=t(388409),x=t(957264),C=t(683504),Z=t(641418),T=t(171936),E=t(207883),w=t(76936),S=t(681474),z=t(717271),A=t(288428),b=t(799533),P=t(138005),D=t(601239),I=t(65388);function F(e){if(!(0,c.Z)(e))throw new d.Z("scene is required.");this._scene=e,this._transform=Z.Z.clone(Z.Z.IDENTITY),this._invTransform=Z.Z.clone(Z.Z.IDENTITY),this._actualTransform=Z.Z.clone(Z.Z.IDENTITY),this._actualInvTransform=Z.Z.clone(Z.Z.IDENTITY),this._transformChanged=!1,this.position=new a.Z,this._position=new a.Z,this._positionWC=new a.Z,this._positionCartographic=new s.Z,this._oldPositionWC=void 0,this.positionWCDeltaMagnitude=0,this.positionWCDeltaMagnitudeLastFrame=0,this.timeSinceMoved=0,this._lastMovedTimestamp=0,this.direction=new a.Z,this._direction=new a.Z,this._directionWC=new a.Z,this.up=new a.Z,this._up=new a.Z,this._upWC=new a.Z,this.right=new a.Z,this._right=new a.Z,this._rightWC=new a.Z,this.frustum=new w.Z,this.frustum.aspectRatio=e.drawingBufferWidth/e.drawingBufferHeight,this.frustum.fov=x.Z.toRadians(60),this.defaultMoveAmount=1e5,this.defaultLookAmount=Math.PI/60,this.defaultRotateAmount=Math.PI/3600,this.defaultZoomAmount=1e5,this.constrainedAxis=void 0,this.maximumZoomFactor=1.5,this._moveStart=new f.Z,this._moveEnd=new f.Z,this._changed=new f.Z,this._changedPosition=void 0,this._changedDirection=void 0,this._changedFrustum=void 0,this._changedHeading=void 0,this.percentageChanged=.5,this._viewMatrix=new Z.Z,this._invViewMatrix=new Z.Z,L(this),this._mode=I.Z.SCENE3D,this._modeChanged=!0;const n=e.mapProjection;this._projection=n,this._maxCoord=n.project(new s.Z(Math.PI,x.Z.PI_OVER_TWO)),this._max2Dfrustum=void 0,Qe(this,F.DEFAULT_VIEW_RECTANGLE,this.position,!0);let t=a.Z.magnitude(this.position);t+=t*F.DEFAULT_VIEW_FACTOR,a.Z.normalize(this.position,this.position),a.Z.multiplyByScalar(this.position,t,this.position)}function L(e){Z.Z.computeView(e._position,e._direction,e._up,e._right,e._viewMatrix),Z.Z.multiply(e._viewMatrix,e._actualInvTransform,e._viewMatrix),Z.Z.inverseTransformation(e._viewMatrix,e._invViewMatrix)}F.TRANSFORM_2D=new Z.Z(0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1),F.TRANSFORM_2D_INVERSE=Z.Z.inverseTransformation(F.TRANSFORM_2D,new Z.Z),F.DEFAULT_VIEW_RECTANGLE=A.Z.fromDegrees(-95,-20,-70,90),F.DEFAULT_VIEW_FACTOR=.5,F.DEFAULT_OFFSET=new g.Z(0,-x.Z.PI_OVER_FOUR,0),F.prototype.canPreloadFlight=function(){return(0,c.Z)(this._currentFlight)&&this._mode!==I.Z.SCENE2D},F.prototype._updateCameraChanged=function(){const e=this;if(function(e){if((0,c.Z)(e._oldPositionWC)){e.positionWCDeltaMagnitudeLastFrame=e.positionWCDeltaMagnitude;const n=a.Z.subtract(e.positionWC,e._oldPositionWC,e._oldPositionWC);e.positionWCDeltaMagnitude=a.Z.magnitude(n),e._oldPositionWC=a.Z.clone(e.positionWC,e._oldPositionWC),e.positionWCDeltaMagnitude>0?(e.timeSinceMoved=0,e._lastMovedTimestamp=(0,h.Z)()):e.timeSinceMoved=Math.max((0,h.Z)()-e._lastMovedTimestamp,0)/1e3}else e._oldPositionWC=a.Z.clone(e.positionWC,e._oldPositionWC)}(e),0===e._changed.numberOfListeners)return;const n=e.percentageChanged,t=e.heading;(0,c.Z)(e._changedHeading)||(e._changedHeading=t);let o=Math.abs(e._changedHeading-t)%x.Z.TWO_PI;o=o>x.Z.PI?x.Z.TWO_PI-o:o;const i=o/Math.PI;if(i>n&&(e._changed.raiseEvent(i),e._changedHeading=t),e._mode===I.Z.SCENE2D){if(!(0,c.Z)(e._changedFrustum))return e._changedPosition=a.Z.clone(e.position,e._changedPosition),void(e._changedFrustum=e.frustum.clone());const t=e.position,o=e._changedPosition,i=e.frustum,r=e._changedFrustum,s=t.x+i.left,l=t.x+i.right,d=o.x+r.left,m=o.x+r.right,u=t.y+i.bottom,p=t.y+i.top,f=o.y+r.bottom,h=o.y+r.top,g=Math.max(s,d),_=Math.min(l,m),v=Math.max(u,f),y=Math.min(p,h);let x;if(g>=_||v>=p)x=1;else{let e=r;s<d&&l>m&&u<f&&p>h&&(e=i),x=1-(_-g)*(y-v)/((e.right-e.left)*(e.top-e.bottom))}return void(x>n&&(e._changed.raiseEvent(x),e._changedPosition=a.Z.clone(e.position,e._changedPosition),e._changedFrustum=e.frustum.clone(e._changedFrustum)))}if(!(0,c.Z)(e._changedDirection))return e._changedPosition=a.Z.clone(e.positionWC,e._changedPosition),void(e._changedDirection=a.Z.clone(e.directionWC,e._changedDirection));const r=x.Z.acosClamped(a.Z.dot(e.directionWC,e._changedDirection));let s;s=(0,c.Z)(e.frustum.fovy)?r/(.5*e.frustum.fovy):r;const l=a.Z.distance(e.positionWC,e._changedPosition)/e.positionCartographic.height;(s>n||l>n)&&(e._changed.raiseEvent(Math.max(s,l)),e._changedPosition=a.Z.clone(e.positionWC,e._changedPosition),e._changedDirection=a.Z.clone(e.directionWC,e._changedDirection))};const N=new s.Z,R=new a.Z,O=new a.Z,M=new r.Z,H=new r.Z,W=new r.Z,G=new r.Z,B=new r.Z,U=new a.Z;function V(e){const n=e._mode;let t=!1,o=0;n===I.Z.SCENE2D&&(o=e.frustum.right-e.frustum.left,t=o!==e._positionCartographic.height);let i=e._position;const s=!a.Z.equals(i,e.position)||t;s&&(i=a.Z.clone(e.position,e._position));let l=e._direction;const c=!a.Z.equals(l,e.direction);c&&(a.Z.normalize(e.direction,e.direction),l=a.Z.clone(e.direction,e._direction));let d=e._up;const m=!a.Z.equals(d,e.up);m&&(a.Z.normalize(e.up,e.up),d=a.Z.clone(e.up,e._up));let u=e._right;const p=!a.Z.equals(u,e.right);p&&(a.Z.normalize(e.right,e.right),u=a.Z.clone(e.right,e._right));const f=e._transformChanged||e._modeChanged;e._transformChanged=!1,f&&(Z.Z.inverseTransformation(e._transform,e._invTransform),e._mode===I.Z.COLUMBUS_VIEW||e._mode===I.Z.SCENE2D?Z.Z.equals(Z.Z.IDENTITY,e._transform)?Z.Z.clone(F.TRANSFORM_2D,e._actualTransform):e._mode===I.Z.COLUMBUS_VIEW?function(e){b.Z.basisTo2D(e._projection,e._transform,e._actualTransform)}(e):function(e){const n=e._projection,t=n.ellipsoid,o=Z.Z.getColumn(e._transform,3,M),i=t.cartesianToCartographic(o,N),s=n.project(i,R),l=H;l.x=s.z,l.y=s.x,l.z=s.y,l.w=1;const c=r.Z.clone(r.Z.UNIT_X,B),d=r.Z.add(Z.Z.getColumn(e._transform,0,O),o,O);t.cartesianToCartographic(d,i),n.project(i,s);const m=W;m.x=s.z,m.y=s.x,m.z=s.y,m.w=0,a.Z.subtract(m,l,m),m.x=0;const u=G;if(a.Z.magnitudeSquared(m)>x.Z.EPSILON10)a.Z.cross(c,m,u);else{const c=r.Z.add(Z.Z.getColumn(e._transform,1,O),o,O);t.cartesianToCartographic(c,i),n.project(i,s),u.x=s.z,u.y=s.x,u.z=s.y,u.w=0,a.Z.subtract(u,l,u),u.x=0,a.Z.magnitudeSquared(u)<x.Z.EPSILON10&&(r.Z.clone(r.Z.UNIT_Y,m),r.Z.clone(r.Z.UNIT_Z,u))}a.Z.cross(u,c,m),a.Z.normalize(m,m),a.Z.cross(c,m,u),a.Z.normalize(u,u),Z.Z.setColumn(e._actualTransform,0,m,e._actualTransform),Z.Z.setColumn(e._actualTransform,1,u,e._actualTransform),Z.Z.setColumn(e._actualTransform,2,c,e._actualTransform),Z.Z.setColumn(e._actualTransform,3,l,e._actualTransform)}(e):Z.Z.clone(e._transform,e._actualTransform),Z.Z.inverseTransformation(e._actualTransform,e._actualInvTransform),e._modeChanged=!1);const h=e._actualTransform;if(s||f)if(e._positionWC=Z.Z.multiplyByPoint(h,i,e._positionWC),n===I.Z.SCENE3D||n===I.Z.MORPHING)e._positionCartographic=e._projection.ellipsoid.cartesianToCartographic(e._positionWC,e._positionCartographic);else{const t=U;t.x=e._positionWC.y,t.y=e._positionWC.z,t.z=e._positionWC.x,n===I.Z.SCENE2D&&(t.z=o),e._projection.unproject(t,e._positionCartographic)}if(c||m||p){const n=a.Z.dot(l,a.Z.cross(d,u,U));if(Math.abs(1-n)>x.Z.EPSILON2){const n=1/a.Z.magnitudeSquared(d),t=a.Z.dot(d,l)*n,o=a.Z.multiplyByScalar(l,t,U);d=a.Z.normalize(a.Z.subtract(d,o,e._up),e._up),a.Z.clone(d,e.up),u=a.Z.cross(l,d,e._right),a.Z.clone(u,e.right)}}(c||f)&&(e._directionWC=Z.Z.multiplyByPointAsVector(h,l,e._directionWC),a.Z.normalize(e._directionWC,e._directionWC)),(m||f)&&(e._upWC=Z.Z.multiplyByPointAsVector(h,d,e._upWC),a.Z.normalize(e._upWC,e._upWC)),(p||f)&&(e._rightWC=Z.Z.multiplyByPointAsVector(h,u,e._rightWC),a.Z.normalize(e._rightWC,e._rightWC)),(s||c||m||p||f)&&L(e)}function k(e,n){let t;return t=x.Z.equalsEpsilon(Math.abs(e.z),1,x.Z.EPSILON3)?Math.atan2(n.y,n.x)-x.Z.PI_OVER_TWO:Math.atan2(e.y,e.x)-x.Z.PI_OVER_TWO,x.Z.TWO_PI-x.Z.zeroToTwoPi(t)}function Y(e){return x.Z.PI_OVER_TWO-x.Z.acosClamped(e.z)}function X(e,n,t){let o=0;return x.Z.equalsEpsilon(Math.abs(e.z),1,x.Z.EPSILON3)||(o=Math.atan2(-t.z,n.z),o=x.Z.zeroToTwoPi(o+x.Z.TWO_PI)),o}const q=new Z.Z,j=new Z.Z;Object.defineProperties(F.prototype,{transform:{get:function(){return this._transform}},inverseTransform:{get:function(){return V(this),this._invTransform}},viewMatrix:{get:function(){return V(this),this._viewMatrix}},inverseViewMatrix:{get:function(){return V(this),this._invViewMatrix}},positionCartographic:{get:function(){return V(this),this._positionCartographic}},positionWC:{get:function(){return V(this),this._positionWC}},directionWC:{get:function(){return V(this),this._directionWC}},upWC:{get:function(){return V(this),this._upWC}},rightWC:{get:function(){return V(this),this._rightWC}},heading:{get:function(){if(this._mode!==I.Z.MORPHING){const e=this._projection.ellipsoid,n=Z.Z.clone(this._transform,q),t=b.Z.eastNorthUpToFixedFrame(this.positionWC,e,j);this._setTransform(t);const o=k(this.direction,this.up);return this._setTransform(n),o}}},pitch:{get:function(){if(this._mode!==I.Z.MORPHING){const e=this._projection.ellipsoid,n=Z.Z.clone(this._transform,q),t=b.Z.eastNorthUpToFixedFrame(this.positionWC,e,j);this._setTransform(t);const o=Y(this.direction);return this._setTransform(n),o}}},roll:{get:function(){if(this._mode!==I.Z.MORPHING){const e=this._projection.ellipsoid,n=Z.Z.clone(this._transform,q),t=b.Z.eastNorthUpToFixedFrame(this.positionWC,e,j);this._setTransform(t);const o=X(this.direction,this.up,this.right);return this._setTransform(n),o}}},moveStart:{get:function(){return this._moveStart}},moveEnd:{get:function(){return this._moveEnd}},changed:{get:function(){return this._changed}}}),F.prototype.update=function(e){if(!(0,c.Z)(e))throw new d.Z("mode is required.");if(e===I.Z.SCENE2D&&!(this.frustum instanceof E.Z))throw new d.Z("An OrthographicOffCenterFrustum is required in 2D.");if(!(e!==I.Z.SCENE3D&&e!==I.Z.COLUMBUS_VIEW||this.frustum instanceof w.Z||this.frustum instanceof T.Z))throw new d.Z("A PerspectiveFrustum or OrthographicFrustum is required in 3D and Columbus view");let n=!1;if(e!==this._mode&&(this._mode=e,this._modeChanged=e!==I.Z.MORPHING,n=this._mode===I.Z.SCENE2D),n){const e=this._max2Dfrustum=this.frustum.clone();if(!(e instanceof E.Z))throw new d.Z("The camera frustum is expected to be orthographic for 2D camera control.");const n=2,t=e.top/e.right;e.right=this._maxCoord.x*n,e.left=-e.right,e.top=t*e.right,e.bottom=-e.top}this._mode===I.Z.SCENE2D&&_e(this,this.position)};const Q=new a.Z,K=new a.Z,J=new a.Z;F.prototype._setTransform=function(e){const n=a.Z.clone(this.positionWC,Q),t=a.Z.clone(this.upWC,K),o=a.Z.clone(this.directionWC,J);Z.Z.clone(e,this._transform),this._transformChanged=!0,V(this);const i=this._actualInvTransform;Z.Z.multiplyByPoint(i,n,this.position),Z.Z.multiplyByPointAsVector(i,o,this.direction),Z.Z.multiplyByPointAsVector(i,t,this.up),a.Z.cross(this.direction,this.up,this.right),V(this)};const $=new i.Z,ee=new z.Z,ne=new a.Z,te=new a.Z;function oe(e){if(!Z.Z.equals(Z.Z.IDENTITY,e.transform))return a.Z.magnitude(e.position);const n=e._scene,t=n.globe,o=$;let i,r,s;if(o.x=n.drawingBufferWidth/2,o.y=n.drawingBufferHeight/2,(0,c.Z)(t)){const a=e.getPickRay(o,ee);i=t.pickWorldCoordinates(a,n,!0,ne)}if(n.pickPositionSupported&&(r=n.pickPositionWorldCoordinates(o,te)),(0,c.Z)(i)||(0,c.Z)(r)){const n=(0,c.Z)(r)?a.Z.distance(r,e.positionWC):Number.POSITIVE_INFINITY,t=(0,c.Z)(i)?a.Z.distance(i,e.positionWC):Number.POSITIVE_INFINITY;s=Math.min(n,t)}else s=Math.max(e.positionCartographic.height,0);return s}F.prototype._adjustOrthographicFrustum=function(e){this.frustum instanceof T.Z&&(!e&&this._positionCartographic.height<15e4||(this.frustum.width=oe(this)))};const ie=new a.Z,ae=new Z.Z,re=new Z.Z,se=new S.Z,le=new C.Z,ce=new s.Z,de=new a.Z,me=new a.Z,ue=new a.Z;function pe(e,n,t,o){const i=a.Z.clone(t.direction,de),r=a.Z.clone(t.up,me);if(e._scene.mode===I.Z.SCENE3D){const t=e._projection.ellipsoid,o=b.Z.eastNorthUpToFixedFrame(n,t,q),a=Z.Z.inverseTransformation(o,j);Z.Z.multiplyByPointAsVector(a,i,i),Z.Z.multiplyByPointAsVector(a,r,r)}const s=a.Z.cross(i,r,ue);return o.heading=k(i,r),o.pitch=Y(i),o.roll=X(i,r,s),o}const fe={destination:void 0,orientation:{direction:void 0,up:void 0,heading:void 0,pitch:void 0,roll:void 0},convert:void 0,endTransform:void 0},he=new _.Z;F.prototype.setView=function(e){e=(0,l.Z)(e,l.Z.EMPTY_OBJECT);let n=(0,l.Z)(e.orientation,l.Z.EMPTY_OBJECT);const t=this._mode;if(t===I.Z.MORPHING)return;(0,c.Z)(e.endTransform)&&this._setTransform(e.endTransform);let o=(0,l.Z)(e.convert,!0),r=(0,l.Z)(e.destination,a.Z.clone(this.positionWC,ie));(0,c.Z)(r)&&(0,c.Z)(r.west)&&(r=this.getRectangleCameraCoordinates(r,ie),o=!1),(0,c.Z)(n.direction)&&(n=pe(this,r,n,fe.orientation)),he.heading=(0,l.Z)(n.heading,0),he.pitch=(0,l.Z)(n.pitch,-x.Z.PI_OVER_TWO),he.roll=(0,l.Z)(n.roll,0),t===I.Z.SCENE3D?function(e,n,t){const o=Z.Z.clone(e.transform,ae),i=b.Z.eastNorthUpToFixedFrame(n,e._projection.ellipsoid,re);e._setTransform(i),a.Z.clone(a.Z.ZERO,e.position),t.heading=t.heading-x.Z.PI_OVER_TWO;const r=S.Z.fromHeadingPitchRoll(t,se),s=C.Z.fromQuaternion(r,le);C.Z.getColumn(s,0,e.direction),C.Z.getColumn(s,2,e.up),a.Z.cross(e.direction,e.up,e.right),e._setTransform(o),e._adjustOrthographicFrustum(!0)}(this,r,he):t===I.Z.SCENE2D?function(e,n,t,o){const r=Z.Z.clone(e.transform,ae);if(e._setTransform(Z.Z.IDENTITY),!a.Z.equals(n,e.positionWC)){if(o){const t=e._projection,o=t.ellipsoid.cartesianToCartographic(n,ce);n=t.project(o,ie)}i.Z.clone(n,e.position);const t=.5*-n.z,a=-t,r=e.frustum;if(a>t){const e=r.top/r.right;r.right=a,r.left=t,r.top=r.right*e,r.bottom=-r.top}}if(e._scene.mapMode2D===D.Z.ROTATE){t.heading=t.heading-x.Z.PI_OVER_TWO,t.pitch=-x.Z.PI_OVER_TWO,t.roll=0;const n=S.Z.fromHeadingPitchRoll(t,se),o=C.Z.fromQuaternion(n,le);C.Z.getColumn(o,2,e.up),a.Z.cross(e.direction,e.up,e.right)}e._setTransform(r)}(this,r,he,o):function(e,n,t,o){const i=Z.Z.clone(e.transform,ae);if(e._setTransform(Z.Z.IDENTITY),!a.Z.equals(n,e.positionWC)){if(o){const t=e._projection,o=t.ellipsoid.cartesianToCartographic(n,ce);n=t.project(o,ie)}a.Z.clone(n,e.position)}t.heading=t.heading-x.Z.PI_OVER_TWO;const r=S.Z.fromHeadingPitchRoll(t,se),s=C.Z.fromQuaternion(r,le);C.Z.getColumn(s,0,e.direction),C.Z.getColumn(s,2,e.up),a.Z.cross(e.direction,e.up,e.right),e._setTransform(i),e._adjustOrthographicFrustum(!0)}(this,r,he,o)};const ge=new a.Z;function _e(e,n){const t=e._scene.mapMode2D===D.Z.ROTATE,o=e._maxCoord.x,i=e._maxCoord.y;let a,r;t?(r=o,a=-r):(r=n.x-2*o,a=n.x+2*o),n.x>o&&(n.x=r),n.x<-o&&(n.x=a),n.y>i&&(n.y=i),n.y<-i&&(n.y=-i)}F.prototype.flyHome=function(e){const n=this._mode;if(n===I.Z.MORPHING&&this._scene.completeMorph(),n===I.Z.SCENE2D)this.flyTo({destination:F.DEFAULT_VIEW_RECTANGLE,duration:e,endTransform:Z.Z.IDENTITY});else if(n===I.Z.SCENE3D){const n=this.getRectangleCameraCoordinates(F.DEFAULT_VIEW_RECTANGLE);let t=a.Z.magnitude(n);t+=t*F.DEFAULT_VIEW_FACTOR,a.Z.normalize(n,n),a.Z.multiplyByScalar(n,t,n),this.flyTo({destination:n,duration:e,endTransform:Z.Z.IDENTITY})}else if(n===I.Z.COLUMBUS_VIEW){const n=this._projection.ellipsoid.maximumRadius;let t=new a.Z(0,-1,1);t=a.Z.multiplyByScalar(a.Z.normalize(t,t),5*n,t),this.flyTo({destination:t,duration:e,orientation:{heading:0,pitch:-Math.acos(a.Z.normalize(t,ge).z),roll:0},endTransform:Z.Z.IDENTITY,convert:!1})}},F.prototype.worldToCameraCoordinates=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new r.Z),V(this),Z.Z.multiplyByVector(this._actualInvTransform,e,n)},F.prototype.worldToCameraCoordinatesPoint=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new a.Z),V(this),Z.Z.multiplyByPoint(this._actualInvTransform,e,n)},F.prototype.worldToCameraCoordinatesVector=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new a.Z),V(this),Z.Z.multiplyByPointAsVector(this._actualInvTransform,e,n)},F.prototype.cameraToWorldCoordinates=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new r.Z),V(this),Z.Z.multiplyByVector(this._actualTransform,e,n)},F.prototype.cameraToWorldCoordinatesPoint=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new a.Z),V(this),Z.Z.multiplyByPoint(this._actualTransform,e,n)},F.prototype.cameraToWorldCoordinatesVector=function(e,n){if(!(0,c.Z)(e))throw new d.Z("cartesian is required.");return(0,c.Z)(n)||(n=new a.Z),V(this),Z.Z.multiplyByPointAsVector(this._actualTransform,e,n)};const ve=new a.Z;F.prototype.move=function(e,n){if(!(0,c.Z)(e))throw new d.Z("direction is required.");const t=this.position;a.Z.multiplyByScalar(e,n,ve),a.Z.add(t,ve,t),this._mode===I.Z.SCENE2D&&_e(this,t),this._adjustOrthographicFrustum(!0)},F.prototype.moveForward=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this._mode===I.Z.SCENE2D?be(this,e):this.move(this.direction,e)},F.prototype.moveBackward=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this._mode===I.Z.SCENE2D?be(this,-e):this.move(this.direction,-e)},F.prototype.moveUp=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this.move(this.up,e)},F.prototype.moveDown=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this.move(this.up,-e)},F.prototype.moveRight=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this.move(this.right,e)},F.prototype.moveLeft=function(e){e=(0,l.Z)(e,this.defaultMoveAmount),this.move(this.right,-e)},F.prototype.lookLeft=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this._mode!==I.Z.SCENE2D&&this.look(this.up,-e)},F.prototype.lookRight=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this._mode!==I.Z.SCENE2D&&this.look(this.up,e)},F.prototype.lookUp=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this._mode!==I.Z.SCENE2D&&this.look(this.right,-e)},F.prototype.lookDown=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this._mode!==I.Z.SCENE2D&&this.look(this.right,e)};const ye=new S.Z,xe=new C.Z;F.prototype.look=function(e,n){if(!(0,c.Z)(e))throw new d.Z("axis is required.");const t=(0,l.Z)(n,this.defaultLookAmount),o=S.Z.fromAxisAngle(e,-t,ye),i=C.Z.fromQuaternion(o,xe),a=this.direction,r=this.up,s=this.right;C.Z.multiplyByVector(i,a,a),C.Z.multiplyByVector(i,r,r),C.Z.multiplyByVector(i,s,s)},F.prototype.twistLeft=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this.look(this.direction,e)},F.prototype.twistRight=function(e){e=(0,l.Z)(e,this.defaultLookAmount),this.look(this.direction,-e)};const Ce=new S.Z,Ze=new C.Z;F.prototype.rotate=function(e,n){if(!(0,c.Z)(e))throw new d.Z("axis is required.");const t=(0,l.Z)(n,this.defaultRotateAmount),o=S.Z.fromAxisAngle(e,-t,Ce),i=C.Z.fromQuaternion(o,Ze);C.Z.multiplyByVector(i,this.position,this.position),C.Z.multiplyByVector(i,this.direction,this.direction),C.Z.multiplyByVector(i,this.up,this.up),a.Z.cross(this.direction,this.up,this.right),a.Z.cross(this.right,this.direction,this.up),this._adjustOrthographicFrustum(!1)},F.prototype.rotateDown=function(e){ze(this,e=(0,l.Z)(e,this.defaultRotateAmount))},F.prototype.rotateUp=function(e){ze(this,-(e=(0,l.Z)(e,this.defaultRotateAmount)))};const Te=new a.Z,Ee=new a.Z,we=new a.Z,Se=new a.Z;function ze(e,n){const t=e.position;if((0,c.Z)(e.constrainedAxis)&&!a.Z.equalsEpsilon(e.position,a.Z.ZERO,x.Z.EPSILON2)){const o=a.Z.normalize(t,Te),i=a.Z.equalsEpsilon(o,e.constrainedAxis,x.Z.EPSILON2),r=a.Z.equalsEpsilon(o,a.Z.negate(e.constrainedAxis,Se),x.Z.EPSILON2);if(i||r)(i&&n<0||r&&n>0)&&e.rotate(e.right,n);else{const t=a.Z.normalize(e.constrainedAxis,Ee);let i=a.Z.dot(o,t),r=x.Z.acosClamped(i);n>0&&n>r&&(n=r-x.Z.EPSILON4),i=a.Z.dot(o,a.Z.negate(t,Se)),r=x.Z.acosClamped(i),n<0&&-n>r&&(n=-r+x.Z.EPSILON4);const s=a.Z.cross(t,o,we);e.rotate(s,n)}}else e.rotate(e.right,n)}function Ae(e,n){(0,c.Z)(e.constrainedAxis)?e.rotate(e.constrainedAxis,n):e.rotate(e.up,n)}function be(e,n){const t=e.frustum;if(!(t instanceof E.Z&&(0,c.Z)(t.left)&&(0,c.Z)(t.right)&&(0,c.Z)(t.bottom)&&(0,c.Z)(t.top)))throw new d.Z("The camera frustum is expected to be orthographic for 2D camera control.");let o;if(n*=.5,Math.abs(t.top)+Math.abs(t.bottom)>Math.abs(t.left)+Math.abs(t.right)){let i=t.top-n,a=t.bottom+n,r=e._maxCoord.y;e._scene.mapMode2D===D.Z.ROTATE&&(r*=e.maximumZoomFactor),a>r&&(a=r,i=-r),i<=a&&(i=1,a=-1),o=t.right/t.top,t.top=i,t.bottom=a,t.right=t.top*o,t.left=-t.right}else{let i=t.right-n,a=t.left+n,r=e._maxCoord.x;e._scene.mapMode2D===D.Z.ROTATE&&(r*=e.maximumZoomFactor),i>r&&(i=r,a=-r),i<=a&&(i=1,a=-1),o=t.top/t.right,t.right=i,t.left=a,t.top=t.right*o,t.bottom=-t.top}}function Pe(e,n){e.move(e.direction,n)}F.prototype.rotateRight=function(e){Ae(this,-(e=(0,l.Z)(e,this.defaultRotateAmount)))},F.prototype.rotateLeft=function(e){Ae(this,e=(0,l.Z)(e,this.defaultRotateAmount))},F.prototype.zoomIn=function(e){e=(0,l.Z)(e,this.defaultZoomAmount),this._mode===I.Z.SCENE2D?be(this,e):Pe(this,e)},F.prototype.zoomOut=function(e){e=(0,l.Z)(e,this.defaultZoomAmount),this._mode===I.Z.SCENE2D?be(this,-e):Pe(this,-e)},F.prototype.getMagnitude=function(){return this._mode===I.Z.SCENE3D?a.Z.magnitude(this.position):this._mode===I.Z.COLUMBUS_VIEW?Math.abs(this.position.z):this._mode===I.Z.SCENE2D?Math.max(this.frustum.right-this.frustum.left,this.frustum.top-this.frustum.bottom):void 0};const De=new Z.Z;F.prototype.lookAt=function(e,n){if(!(0,c.Z)(e))throw new d.Z("target is required");if(!(0,c.Z)(n))throw new d.Z("offset is required");if(this._mode===I.Z.MORPHING)throw new d.Z("lookAt is not supported while morphing.");const t=b.Z.eastNorthUpToFixedFrame(e,u.Z.WGS84,De);this.lookAtTransform(t,n)};const Ie=new a.Z,Fe=new S.Z,Le=new S.Z,Ne=new C.Z;function Re(e,n,t){n=x.Z.clamp(n,-x.Z.PI_OVER_TWO,x.Z.PI_OVER_TWO),e=x.Z.zeroToTwoPi(e)-x.Z.PI_OVER_TWO;const o=S.Z.fromAxisAngle(a.Z.UNIT_Y,-n,Fe),i=S.Z.fromAxisAngle(a.Z.UNIT_Z,-e,Le),r=S.Z.multiply(i,o,i),s=C.Z.fromQuaternion(r,Ne),l=a.Z.clone(a.Z.UNIT_X,Ie);return C.Z.multiplyByVector(s,l,l),a.Z.negate(l,l),a.Z.multiplyByScalar(l,t,l),l}F.prototype.lookAtTransform=function(e,n){if(!(0,c.Z)(e))throw new d.Z("transform is required");if(this._mode===I.Z.MORPHING)throw new d.Z("lookAtTransform is not supported while morphing.");if(this._setTransform(e),!(0,c.Z)(n))return;let t;if(t=(0,c.Z)(n.heading)?Re(n.heading,n.pitch,n.range):n,this._mode===I.Z.SCENE2D){i.Z.clone(i.Z.ZERO,this.position),a.Z.negate(t,this.up),this.up.z=0,a.Z.magnitudeSquared(this.up)<x.Z.EPSILON10&&a.Z.clone(a.Z.UNIT_Y,this.up),a.Z.normalize(this.up,this.up),this._setTransform(Z.Z.IDENTITY),a.Z.negate(a.Z.UNIT_Z,this.direction),a.Z.cross(this.direction,this.up,this.right),a.Z.normalize(this.right,this.right);const n=this.frustum,o=n.top/n.right;return n.right=.5*a.Z.magnitude(t),n.left=-n.right,n.top=o*n.right,n.bottom=-n.top,void this._setTransform(e)}a.Z.clone(t,this.position),a.Z.negate(this.position,this.direction),a.Z.normalize(this.direction,this.direction),a.Z.cross(this.direction,a.Z.UNIT_Z,this.right),a.Z.magnitudeSquared(this.right)<x.Z.EPSILON10&&a.Z.clone(a.Z.UNIT_X,this.right),a.Z.normalize(this.right,this.right),a.Z.cross(this.right,this.direction,this.up),a.Z.normalize(this.up,this.up),this._adjustOrthographicFrustum(!0)};const Oe=new s.Z,Me=new s.Z,He=new a.Z,We=new a.Z,Ge=new a.Z,Be=new a.Z,Ue=new a.Z,Ve=new a.Z,ke=new a.Z,Ye=new a.Z,Xe={direction:new a.Z,right:new a.Z,up:new a.Z};let qe;function je(e,n,t,o){return Math.abs(a.Z.dot(n,t))/o-a.Z.dot(e,t)}function Qe(e,n,t,o){const i=e._projection.ellipsoid,r=o?e:Xe,s=n.north,l=n.south;let d=n.east;const m=n.west;m>d&&(d+=x.Z.TWO_PI);const u=.5*(m+d);let f;if(l<-x.Z.PI_OVER_TWO+x.Z.RADIANS_PER_DEGREE&&s>x.Z.PI_OVER_TWO-x.Z.RADIANS_PER_DEGREE)f=0;else{const e=Oe;e.longitude=u,e.latitude=s,e.height=0;const n=Me;n.longitude=u,n.latitude=l,n.height=0;let t=qe;(0,c.Z)(t)&&t.ellipsoid===i||(qe=t=new p.Z(void 0,void 0,i)),t.setEndPoints(e,n),f=t.interpolateUsingFraction(.5,Oe).latitude}const h=Oe;h.longitude=u,h.latitude=f,h.height=0;const g=i.cartographicToCartesian(h,ke),_=Oe;_.longitude=d,_.latitude=s;const v=i.cartographicToCartesian(_,He);_.longitude=m;const y=i.cartographicToCartesian(_,Ge);_.longitude=u;const C=i.cartographicToCartesian(_,Ue);_.latitude=l;const Z=i.cartographicToCartesian(_,Ve);_.longitude=d;const E=i.cartographicToCartesian(_,Be);_.longitude=m;const w=i.cartographicToCartesian(_,We);a.Z.subtract(y,g,y),a.Z.subtract(E,g,E),a.Z.subtract(v,g,v),a.Z.subtract(w,g,w),a.Z.subtract(C,g,C),a.Z.subtract(Z,g,Z);const S=i.geodeticSurfaceNormal(g,r.direction);a.Z.negate(S,S);const z=a.Z.cross(S,a.Z.UNIT_Z,r.right);a.Z.normalize(z,z);const A=a.Z.cross(z,S,r.up);let b;if(e.frustum instanceof T.Z){const n=Math.max(a.Z.distance(v,y),a.Z.distance(E,w)),t=Math.max(a.Z.distance(v,E),a.Z.distance(y,w));let o,i;const r=e.frustum._offCenterFrustum.right/e.frustum._offCenterFrustum.top,s=t*r;n>s?(o=n,i=o/r):(i=t,o=s),b=Math.max(o,i)}else{const n=Math.tan(.5*e.frustum.fovy),t=e.frustum.aspectRatio*n;if(b=Math.max(je(S,A,y,n),je(S,A,E,n),je(S,A,v,n),je(S,A,w,n),je(S,A,C,n),je(S,A,Z,n),je(S,z,y,t),je(S,z,E,t),je(S,z,v,t),je(S,z,w,t),je(S,z,C,t),je(S,z,Z,t)),l<0&&s>0){const e=Oe;e.longitude=m,e.latitude=0,e.height=0;let o=i.cartographicToCartesian(e,Ye);a.Z.subtract(o,g,o),b=Math.max(b,je(S,A,o,n),je(S,z,o,t)),e.longitude=d,o=i.cartographicToCartesian(e,Ye),a.Z.subtract(o,g,o),b=Math.max(b,je(S,A,o,n),je(S,z,o,t))}}return a.Z.add(g,a.Z.multiplyByScalar(S,-b,Ye),t)}const Ke=new s.Z,Je=new a.Z,$e=new a.Z,en=new s.Z,nn=new a.Z,tn=new a.Z;F.prototype.getRectangleCameraCoordinates=function(e,n){if(!(0,c.Z)(e))throw new d.Z("rectangle is required");const t=this._mode;return(0,c.Z)(n)||(n=new a.Z),t===I.Z.SCENE3D?Qe(this,e,n):t===I.Z.COLUMBUS_VIEW?function(e,n,t){const o=e._projection;n.west>n.east&&(n=A.Z.MAX_VALUE);const i=e._actualTransform,a=e._actualInvTransform,r=Ke;r.longitude=n.east,r.latitude=n.north;const s=o.project(r,Je);Z.Z.multiplyByPoint(i,s,s),Z.Z.multiplyByPoint(a,s,s),r.longitude=n.west,r.latitude=n.south;const l=o.project(r,$e);if(Z.Z.multiplyByPoint(i,l,l),Z.Z.multiplyByPoint(a,l,l),t.x=.5*(s.x-l.x)+l.x,t.y=.5*(s.y-l.y)+l.y,(0,c.Z)(e.frustum.fovy)){const n=Math.tan(.5*e.frustum.fovy),o=e.frustum.aspectRatio*n;t.z=.5*Math.max((s.x-l.x)/o,(s.y-l.y)/n)}else{const e=s.x-l.x,n=s.y-l.y;t.z=Math.max(e,n)}return t}(this,e,n):t===I.Z.SCENE2D?function(e,n,t){const o=e._projection;let i=n.east;n.west>n.east&&(e._scene.mapMode2D===D.Z.INFINITE_SCROLL?i+=x.Z.TWO_PI:i=(n=A.Z.MAX_VALUE).east);let a=en;a.longitude=i,a.latitude=n.north;const r=o.project(a,nn);a.longitude=n.west,a.latitude=n.south;const s=o.project(a,tn),l=.5*Math.abs(r.x-s.x);let c,d,m=.5*Math.abs(r.y-s.y);const u=e.frustum.right/e.frustum.top,p=m*u;return l>p?(c=l,d=c/u):(d=m,c=p),m=Math.max(2*c,2*d),t.x=.5*(r.x-s.x)+s.x,t.y=.5*(r.y-s.y)+s.y,a=o.unproject(t,a),a.height=m,o.project(a,t)}(this,e,n):void 0};const on=new z.Z,an=new z.Z,rn=new z.Z;F.prototype.pickEllipsoid=function(e,n,t){if(!(0,c.Z)(e))throw new d.Z("windowPosition is required.");const o=this._scene.canvas;if(0!==o.clientWidth&&0!==o.clientHeight){if((0,c.Z)(t)||(t=new a.Z),n=(0,l.Z)(n,u.Z.WGS84),this._mode===I.Z.SCENE3D)t=function(e,n,t,o){t=(0,l.Z)(t,u.Z.WGS84);const i=e.getPickRay(n,on),a=y.Z.rayEllipsoid(i,t);if(!a)return;const r=a.start>0?a.start:a.stop;return z.Z.getPoint(i,r,o)}(this,e,n,t);else if(this._mode===I.Z.SCENE2D)t=function(e,n,t,o){let i=e.getPickRay(n,an).origin;i=a.Z.fromElements(i.y,i.z,0,i);const r=t.unproject(i);if(!(r.latitude<-x.Z.PI_OVER_TWO||r.latitude>x.Z.PI_OVER_TWO))return t.ellipsoid.cartographicToCartesian(r,o)}(this,e,this._projection,t);else{if(this._mode!==I.Z.COLUMBUS_VIEW)return;t=function(e,n,t,o){const i=e.getPickRay(n,rn),r=-i.origin.x/i.direction.x;z.Z.getPoint(i,r,o);const s=t.unproject(new a.Z(o.y,o.z,0));if(!(s.latitude<-x.Z.PI_OVER_TWO||s.latitude>x.Z.PI_OVER_TWO||s.longitude<-Math.PI||s.longitude>Math.PI))return t.ellipsoid.cartographicToCartesian(s,o)}(this,e,this._projection,t)}return t}};const sn=new a.Z,ln=new a.Z,cn=new a.Z,dn=new a.Z;F.prototype.getPickRay=function(e,n){if(!(0,c.Z)(e))throw new d.Z("windowPosition is required.");(0,c.Z)(n)||(n=new z.Z);const t=this.frustum;return(0,c.Z)(t.aspectRatio)&&(0,c.Z)(t.fov)&&(0,c.Z)(t.near)?function(e,n,t){const o=e._scene.canvas,i=o.clientWidth,r=o.clientHeight,s=Math.tan(.5*e.frustum.fovy),l=e.frustum.aspectRatio*s,c=e.frustum.near,d=2/i*n.x-1,m=2/r*(r-n.y)-1,u=e.positionWC;a.Z.clone(u,t.origin);const p=a.Z.multiplyByScalar(e.directionWC,c,sn);a.Z.add(u,p,p);const f=a.Z.multiplyByScalar(e.rightWC,d*c*l,ln),h=a.Z.multiplyByScalar(e.upWC,m*c*s,cn),g=a.Z.add(p,f,t.direction);return a.Z.add(g,h,g),a.Z.subtract(g,u,g),a.Z.normalize(g,g),t}(this,e,n):function(e,n,t){const o=e._scene.canvas,i=o.clientWidth,r=o.clientHeight;let s=e.frustum;(0,c.Z)(s._offCenterFrustum)&&(s=s._offCenterFrustum);let l=2/i*n.x-1;l*=.5*(s.right-s.left);let d=2/r*(r-n.y)-1;d*=.5*(s.top-s.bottom);const m=t.origin;return a.Z.clone(e.position,m),a.Z.multiplyByScalar(e.right,l,dn),a.Z.add(dn,m,m),a.Z.multiplyByScalar(e.up,d,dn),a.Z.add(dn,m,m),a.Z.clone(e.directionWC,t.direction),e._mode!==I.Z.COLUMBUS_VIEW&&e._mode!==I.Z.SCENE2D||a.Z.fromElements(t.origin.z,t.origin.x,t.origin.y,t.origin),t}(this,e,n)};const mn=new a.Z,un=new a.Z;F.prototype.distanceToBoundingSphere=function(e){if(!(0,c.Z)(e))throw new d.Z("boundingSphere is required.");const n=a.Z.subtract(this.positionWC,e.center,mn),t=a.Z.multiplyByScalar(this.directionWC,a.Z.dot(n,this.directionWC),un);return Math.max(0,a.Z.magnitude(t)-e.radius)};const pn=new i.Z;F.prototype.getPixelSize=function(e,n,t){if(!(0,c.Z)(e))throw new d.Z("boundingSphere is required.");if(!(0,c.Z)(n))throw new d.Z("drawingBufferWidth is required.");if(!(0,c.Z)(t))throw new d.Z("drawingBufferHeight is required.");const o=this.distanceToBoundingSphere(e),i=this.frustum.getPixelDimensions(n,t,o,this._scene.pixelRatio,pn);return Math.max(i.x,i.y)};const fn=new a.Z,hn=new a.Z,gn=new a.Z,_n=new a.Z;F.prototype.createCorrectPositionTween=function(e){if(!(0,c.Z)(e))throw new d.Z("duration is required.");if(this._mode===I.Z.COLUMBUS_VIEW)return function(e,n){let t=e.position;const o=e.direction,i=e.worldToCameraCoordinatesVector(a.Z.UNIT_X,fn),r=-a.Z.dot(i,t)/a.Z.dot(i,o),s=a.Z.add(t,a.Z.multiplyByScalar(o,r,hn),hn);e.cameraToWorldCoordinatesPoint(s,s),t=e.cameraToWorldCoordinatesPoint(e.position,gn);const l=Math.tan(.5*e.frustum.fovy),c=e.frustum.aspectRatio*l,d=a.Z.magnitude(a.Z.subtract(t,s,_n)),u=c*d,p=l*d,f=e._maxCoord.x,h=e._maxCoord.y,g=Math.max(u-f,f),_=Math.max(p-h,h);if(t.z<-g||t.z>g||t.y<-_||t.y>_){const o=s.y<-g||s.y>g,i=s.z<-_||s.z>_;if(o||i)return function(e,n,t,o,i,r){const s=a.Z.clone(n);return t.y>o?s.y-=t.y-o:t.y<-o&&(s.y+=-o-t.y),t.z>i?s.z-=t.z-i:t.z<-i&&(s.z+=-i-t.z),{easingFunction:m.Z.EXPONENTIAL_OUT,startObject:{time:0},stopObject:{time:1},duration:r,update:function(t){const o=a.Z.lerp(n,s,t.time,new a.Z);e.worldToCameraCoordinatesPoint(o,e.position)}}}(e,t,s,g,_,n)}}(this,e)};const vn=new a.Z,yn={destination:void 0,heading:void 0,pitch:void 0,roll:void 0,duration:void 0,complete:void 0,cancel:void 0,endTransform:void 0,maximumHeight:void 0,easingFunction:void 0};function xn(e,n,t){t=g.Z.clone((0,c.Z)(t)?t:F.DEFAULT_OFFSET);const o=e._scene.screenSpaceCameraController.minimumZoomDistance,i=e._scene.screenSpaceCameraController.maximumZoomDistance,a=t.range;if(!(0,c.Z)(a)||0===a){const a=n.radius;0===a?t.range=100:e.frustum instanceof T.Z||e._mode===I.Z.SCENE2D?t.range=function(e,n){let t,o,i=e.frustum;(0,c.Z)(i._offCenterFrustum)&&(i=i._offCenterFrustum);const a=i.right/i.top,r=n*a;return n>r?(t=n,o=t/a):(o=n,t=r),1.5*Math.max(t,o)}(e,a):t.range=function(e,n){const t=e.frustum,o=Math.tan(.5*t.fovy),i=t.aspectRatio*o;return Math.max(n/i,n/o)}(e,a),t.range=x.Z.clamp(t.range,o,i)}return t}F.prototype.cancelFlight=function(){(0,c.Z)(this._currentFlight)&&(this._currentFlight.cancelTween(),this._currentFlight=void 0)},F.prototype.completeFlight=function(){if((0,c.Z)(this._currentFlight)){this._currentFlight.cancelTween();const e={destination:void 0,orientation:{heading:void 0,pitch:void 0,roll:void 0}};e.destination=yn.destination,e.orientation.heading=yn.heading,e.orientation.pitch=yn.pitch,e.orientation.roll=yn.roll,this.setView(e),(0,c.Z)(this._currentFlight.complete)&&this._currentFlight.complete(),this._currentFlight=void 0}},F.prototype.flyTo=function(e){let n=(e=(0,l.Z)(e,l.Z.EMPTY_OBJECT)).destination;if(!(0,c.Z)(n))throw new d.Z("destination is required.");if(this._mode===I.Z.MORPHING)return;this.cancelFlight();let t=(0,l.Z)(e.orientation,l.Z.EMPTY_OBJECT);if((0,c.Z)(t.direction)&&(t=pe(this,n,t,fe.orientation)),(0,c.Z)(e.duration)&&e.duration<=0){const n=fe;return n.destination=e.destination,n.orientation.heading=t.heading,n.orientation.pitch=t.pitch,n.orientation.roll=t.roll,n.convert=e.convert,n.endTransform=e.endTransform,this.setView(n),void("function"==typeof e.complete&&e.complete())}const o=(0,c.Z)(n.west);o&&(n=this.getRectangleCameraCoordinates(n,vn));const i=this;let a;yn.destination=n,yn.heading=t.heading,yn.pitch=t.pitch,yn.roll=t.roll,yn.duration=e.duration,yn.complete=function(){a===i._currentFlight&&(i._currentFlight=void 0),(0,c.Z)(e.complete)&&e.complete()},yn.cancel=e.cancel,yn.endTransform=e.endTransform,yn.convert=!o&&e.convert,yn.maximumHeight=e.maximumHeight,yn.pitchAdjustHeight=e.pitchAdjustHeight,yn.flyOverLongitude=e.flyOverLongitude,yn.flyOverLongitudeWeight=e.flyOverLongitudeWeight,yn.easingFunction=e.easingFunction;const r=this._scene,s=P.Z.createTween(r,yn);if(0===s.duration)return void("function"==typeof s.complete&&s.complete());a=r.tweens.add(s),this._currentFlight=a;let m=this._scene.preloadFlightCamera;this._mode!==I.Z.SCENE2D&&((0,c.Z)(m)||(m=F.clone(this)),m.setView({destination:n,orientation:t}),this._scene.preloadFlightCullingVolume=m.frustum.computeCullingVolume(m.positionWC,m.directionWC,m.upWC))},F.prototype.viewBoundingSphere=function(e,n){if(!(0,c.Z)(e))throw new d.Z("boundingSphere is required.");if(this._mode===I.Z.MORPHING)throw new d.Z("viewBoundingSphere is not supported while morphing.");n=xn(this,e,n),this.lookAt(e.center,n)};const Cn=new Z.Z,Zn=new a.Z,Tn=new a.Z,En=new a.Z,wn=new a.Z,Sn=new r.Z,zn=new S.Z,An=new C.Z;F.prototype.flyToBoundingSphere=function(e,n){if(!(0,c.Z)(e))throw new d.Z("boundingSphere is required.");n=(0,l.Z)(n,l.Z.EMPTY_OBJECT);const t=this._mode===I.Z.SCENE2D||this._mode===I.Z.COLUMBUS_VIEW;this._setTransform(Z.Z.IDENTITY);const o=xn(this,e,n.offset);let i;i=t?a.Z.multiplyByScalar(a.Z.UNIT_Z,o.range,Zn):Re(o.heading,o.pitch,o.range);const r=b.Z.eastNorthUpToFixedFrame(e.center,u.Z.WGS84,Cn);let s,m;if(Z.Z.multiplyByPoint(r,i,i),!t){if(s=a.Z.subtract(e.center,i,Tn),a.Z.normalize(s,s),m=Z.Z.multiplyByPointAsVector(r,a.Z.UNIT_Z,En),1-Math.abs(a.Z.dot(s,m))<x.Z.EPSILON6){const e=S.Z.fromAxisAngle(s,o.heading,zn),n=C.Z.fromQuaternion(e,An);a.Z.fromCartesian4(Z.Z.getColumn(r,1,Sn),m),C.Z.multiplyByVector(n,m,m)}const n=a.Z.cross(s,m,wn);a.Z.cross(n,s,m),a.Z.normalize(m,m)}this.flyTo({destination:i,orientation:{direction:s,up:m},duration:n.duration,complete:n.complete,cancel:n.cancel,endTransform:n.endTransform,maximumHeight:n.maximumHeight,easingFunction:n.easingFunction,flyOverLongitude:n.flyOverLongitude,flyOverLongitudeWeight:n.flyOverLongitudeWeight,pitchAdjustHeight:n.pitchAdjustHeight})};const bn=new a.Z,Pn=new a.Z,Dn=new a.Z,In=new a.Z,Fn=[new a.Z,new a.Z,new a.Z,new a.Z],Ln=new i.Z,Nn=new a.Z,Rn=[new s.Z,new s.Z,new s.Z,new s.Z];function On(e,n,t,o,i,a){Ln.x=e,Ln.y=n;const r=o.pickEllipsoid(Ln,i,Nn);return(0,c.Z)(r)?(Rn[t]=i.cartesianToCartographic(r,Rn[t]),1):(Rn[t]=i.cartesianToCartographic(a[t],Rn[t]),0)}F.prototype.computeViewRectangle=function(e,n){e=(0,l.Z)(e,u.Z.WGS84);const t=this.frustum.computeCullingVolume(this.positionWC,this.directionWC,this.upWC),i=new o.Z(a.Z.ZERO,e.maximumRadius);if(t.computeVisibility(i)===v.Z.OUTSIDE)return;const r=this._scene.canvas,s=r.clientWidth,c=r.clientHeight;let d=0;const m=function(e,n){const t=n.radii,o=e.positionWC,i=a.Z.multiplyComponents(n.oneOverRadii,o,bn),r=a.Z.magnitude(i),s=a.Z.normalize(i,Pn);let l,c;a.Z.equalsEpsilon(s,a.Z.UNIT_Z,x.Z.EPSILON10)?(l=new a.Z(0,1,0),c=new a.Z(0,0,1)):(l=a.Z.normalize(a.Z.cross(a.Z.UNIT_Z,s,Dn),Dn),c=a.Z.normalize(a.Z.cross(s,l,In),In));const d=Math.sqrt(a.Z.magnitudeSquared(i)-1),m=a.Z.multiplyByScalar(s,1/r,bn),u=d/r,p=a.Z.multiplyByScalar(l,u,Pn),f=a.Z.multiplyByScalar(c,u,Dn),h=a.Z.add(m,f,Fn[0]);a.Z.subtract(h,p,h),a.Z.multiplyComponents(t,h,h);const g=a.Z.subtract(m,f,Fn[1]);a.Z.subtract(g,p,g),a.Z.multiplyComponents(t,g,g);const _=a.Z.subtract(m,f,Fn[2]);a.Z.add(_,p,_),a.Z.multiplyComponents(t,_,_);const v=a.Z.add(m,f,Fn[3]);return a.Z.add(v,p,v),a.Z.multiplyComponents(t,v,v),Fn}(this,e);if(d+=On(0,0,0,this,e,m),d+=On(0,c,1,this,e,m),d+=On(s,c,2,this,e,m),d+=On(s,0,3,this,e,m),d<2)return A.Z.MAX_VALUE;n=A.Z.fromCartographicArray(Rn,n);let p=0,f=Rn[3].longitude;for(let e=0;e<4;++e){const n=Rn[e].longitude,t=Math.abs(n-f);t>x.Z.PI?p+=x.Z.TWO_PI-t:p+=t,f=n}return x.Z.equalsEpsilon(Math.abs(p),x.Z.TWO_PI,x.Z.EPSILON9)&&(n.west=-x.Z.PI,n.east=x.Z.PI,Rn[0].latitude>=0?n.north=x.Z.PI_OVER_TWO:n.south=-x.Z.PI_OVER_TWO),n},F.prototype.switchToPerspectiveFrustum=function(){if(this._mode===I.Z.SCENE2D||this.frustum instanceof w.Z)return;const e=this._scene;this.frustum=new w.Z,this.frustum.aspectRatio=e.drawingBufferWidth/e.drawingBufferHeight,this.frustum.fov=x.Z.toRadians(60)},F.prototype.switchToOrthographicFrustum=function(){if(this._mode===I.Z.SCENE2D||this.frustum instanceof T.Z)return;const e=oe(this),n=this._scene;this.frustum=new T.Z,this.frustum.aspectRatio=n.drawingBufferWidth/n.drawingBufferHeight,this.frustum.width=e},F.clone=function(e,n){return(0,c.Z)(n)||(n=new F(e._scene)),a.Z.clone(e.position,n.position),a.Z.clone(e.direction,n.direction),a.Z.clone(e.up,n.up),a.Z.clone(e.right,n.right),Z.Z.clone(e._transform,n.transform),n._transformChanged=!0,n.frustum=e.frustum.clone(),n};const Mn=F},183154:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});var o=t(591382),i=t(911926);function a(e,n){this._content=e,this._batchId=n,this._color=void 0}Object.defineProperties(a.prototype,{show:{get:function(){return this._content.batchTable.getShow(this._batchId)},set:function(e){this._content.batchTable.setShow(this._batchId,e)}},color:{get:function(){return(0,i.Z)(this._color)||(this._color=new o.Z),this._content.batchTable.getColor(this._batchId,this._color)},set:function(e){this._content.batchTable.setColor(this._batchId,e)}},polylinePositions:{get:function(){if((0,i.Z)(this._content.getPolylinePositions))return this._content.getPolylinePositions(this._batchId)}},content:{get:function(){return this._content}},tileset:{get:function(){return this._content.tileset}},primitive:{get:function(){return this._content.tileset}},featureId:{get:function(){return this._batchId}},pickId:{get:function(){return this._content.batchTable.getPickColor(this._batchId)}}}),a.prototype.hasProperty=function(e){return this._content.batchTable.hasProperty(this._batchId,e)},a.prototype.getPropertyNames=function(e){return this._content.batchTable.getPropertyNames(this._batchId,e)},a.prototype.getProperty=function(e){return this._content.batchTable.getProperty(this._batchId,e)},a.getPropertyInherited=function(e,n,t){let o;const a=e.batchTable;if((0,i.Z)(a)){if(o=a.getPropertyBySemantic(n,t),(0,i.Z)(o))return o;if(o=a.getProperty(n,t),(0,i.Z)(o))return o}const r=e.tile.metadata;if((0,i.Z)(r)){if(o=r.getPropertyBySemantic(t),(0,i.Z)(o))return o;if(o=r.getProperty(t),(0,i.Z)(o))return o}const s=e.groupMetadata;if((0,i.Z)(s)){if(o=s.getPropertyBySemantic(t),(0,i.Z)(o))return o;if(o=s.getProperty(t),(0,i.Z)(o))return o}let l=e.tileset.metadata;if((0,i.Z)(l)&&(0,i.Z)(l.tileset)){if(l=l.tileset,o=l.getPropertyBySemantic(t),(0,i.Z)(o))return o;if(o=l.getProperty(t),(0,i.Z)(o))return o}},a.prototype.getPropertyInherited=function(e){return a.getPropertyInherited(this._content,this._batchId,e)},a.prototype.setProperty=function(e,n){this._content.batchTable.setProperty(this._batchId,e,n),this._content.featurePropertiesDirty=!0},a.prototype.isExactClass=function(e){return this._content.batchTable.isExactClass(this._batchId,e)},a.prototype.isClass=function(e){return this._content.batchTable.isClass(this._batchId,e)},a.prototype.getExactClassName=function(){return this._content.batchTable.getExactClassName(this._batchId)};const r=a},389003:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){switch(e){case"SCALAR":return 1;case"VEC2":return 2;case"VEC3":return 3;case"VEC4":case"MAT2":return 4;case"MAT3":return 9;case"MAT4":return 16}}},536958:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(911926);const i=function(e,n){const t=e.extensionsRequired;if((0,o.Z)(t)){const o=t.indexOf(n);o>=0&&t.splice(o,1),0===t.length&&delete e.extensionsRequired}}},850220:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});var o=t(536958),i=t(911926);const a=function(e,n){const t=e.extensionsUsed;if((0,i.Z)(t)){const i=t.indexOf(n);i>=0&&t.splice(i,1),(0,o.Z)(e,n),0===t.length&&delete e.extensionsUsed}}},722577:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(911926);const i=function(e,n){return(0,o.Z)(e.extensionsUsed)&&e.extensionsUsed.indexOf(n)>=0}},700935:(e,n,t)=>{"use strict";function o(){this.pass=void 0,this.alphaMode=void 0,this.alphaCutoff=void 0}t.d(n,{Z:()=>o})},842987:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e){this.offset=e.offset,this.count=e.count,this.color=e.color,this.batchIds=e.batchIds}},454109:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=function(e,n,t,o,i){return function(){const a=document.createElement("canvas"),r=i+2*o;a.height=a.width=r;const s=a.getContext("2d");return s.clearRect(0,0,r,r),0!==o&&(s.beginPath(),s.arc(r/2,r/2,r/2,0,2*Math.PI,!0),s.closePath(),s.fillStyle=t,s.fill(),e<1&&(s.save(),s.globalCompositeOperation="destination-out",s.beginPath(),s.arc(r/2,r/2,i/2,0,2*Math.PI,!0),s.closePath(),s.fillStyle="black",s.fill(),s.restore())),s.beginPath(),s.arc(r/2,r/2,i/2,0,2*Math.PI,!0),s.closePath(),s.fillStyle=n,s.fill(),a}}},769058:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(87053);function i(e,n){if((0,o.Z)(n,"3DTILES_metadata")){const t=n.extensions["3DTILES_metadata"].group;return e.metadata.groups[t]}}},87053:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var o=t(911926);function i(e,n){return(0,o.Z)(e)&&(0,o.Z)(e.extensions)&&(0,o.Z)(e.extensions[n])}},53595:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef MRT\n#extension GL_EXT_draw_buffers : enable\n#endif\n\nuniform vec4 u_bgColor;\nuniform sampler2D u_depthTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    if (texture2D(u_depthTexture, v_textureCoordinates).r < 1.0)\n    {\n#ifdef MRT\n        gl_FragData[0] = u_bgColor;\n        gl_FragData[1] = vec4(u_bgColor.a);\n#else\n        gl_FragColor = u_bgColor;\n#endif\n        return;\n    }\n    \n    discard;\n}\n"},40962:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec3 v_tangentEC;\nvarying vec3 v_bitangentEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    vec3 positionToEyeEC = -v_positionEC;\n    mat3 tangentToEyeMatrix = czm_tangentToEyeSpaceMatrix(v_normalEC, v_tangentEC, v_bitangentEC);\n\n    vec3 normalEC = normalize(v_normalEC);\n#ifdef FACE_FORWARD\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\n#endif\n\n    czm_materialInput materialInput;\n    materialInput.normalEC = normalEC;\n    materialInput.tangentToEyeMatrix = tangentToEyeMatrix;\n    materialInput.positionToEyeEC = positionToEyeEC;\n    materialInput.st = v_st;\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef FLAT\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#else\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n#endif\n}\n"},74003:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 normal;\nattribute vec3 tangent;\nattribute vec3 bitangent;\nattribute vec2 st;\nattribute float batchId;\n\nvarying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec3 v_tangentEC;\nvarying vec3 v_bitangentEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\n    v_tangentEC = czm_normal * tangent;                       // tangent in eye coordinates\n    v_bitangentEC = czm_normal * bitangent;                   // bitangent in eye coordinates\n    v_st = st;\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},697705:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_positionEC;\nvarying vec3 v_normalEC;\n\nvoid main()\n{\n    vec3 positionToEyeEC = -v_positionEC;\n\n    vec3 normalEC = normalize(v_normalEC);\n#ifdef FACE_FORWARD\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\n#endif\n\n    czm_materialInput materialInput;\n    materialInput.normalEC = normalEC;\n    materialInput.positionToEyeEC = positionToEyeEC;\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef FLAT\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#else\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n#endif\n}\n"},457315:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 normal;\nattribute float batchId;\n\nvarying vec3 v_positionEC;\nvarying vec3 v_normalEC;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},277096:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_positionMC;\nvarying vec3 v_positionEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    czm_materialInput materialInput;\n\n    vec3 normalEC = normalize(czm_normal3D * czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0)));\n#ifdef FACE_FORWARD\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\n#endif\n\n    materialInput.s = v_st.s;\n    materialInput.st = v_st;\n    materialInput.str = vec3(v_st, 0.0);\n\n    // Convert tangent space material normal to eye space\n    materialInput.normalEC = normalEC;\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, materialInput.normalEC);\n\n    // Convert view vector to world space\n    vec3 positionToEyeEC = -v_positionEC;\n    materialInput.positionToEyeEC = positionToEyeEC;\n\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef FLAT\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#else\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n#endif\n}\n"},469285:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec2 st;\nattribute float batchId;\n\nvarying vec3 v_positionMC;\nvarying vec3 v_positionEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_positionMC = position3DHigh + position3DLow;           // position in model coordinates\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;     // position in eye coordinates\n    v_st = st;\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},57928:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec4 v_color;\n\nvoid main()\n{\n    vec3 positionToEyeEC = -v_positionEC;\n\n    vec3 normalEC = normalize(v_normalEC);\n#ifdef FACE_FORWARD\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\n#endif\n\n    vec4 color = czm_gammaCorrect(v_color);\n\n    czm_materialInput materialInput;\n    materialInput.normalEC = normalEC;\n    materialInput.positionToEyeEC = positionToEyeEC;\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n}\n"},807430:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 normal;\nattribute vec4 color;\nattribute float batchId;\n\nvarying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec4 v_color;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\n    v_color = color;\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},340670:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec4 v_color;\n\nvoid main()\n{\n    gl_FragColor = czm_gammaCorrect(v_color);\n}\n"},546071:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec4 color;\nattribute float batchId;\n\nvarying vec4 v_color;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_color = color;\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},992166:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 prevPosition3DHigh;\nattribute vec3 prevPosition3DLow;\nattribute vec3 nextPosition3DHigh;\nattribute vec3 nextPosition3DLow;\nattribute vec2 expandAndWidth;\nattribute vec4 color;\nattribute float batchId;\n\nvarying vec4 v_color;\n\nvoid main()\n{\n    float expandDir = expandAndWidth.x;\n    float width = abs(expandAndWidth.y) + 0.5;\n    bool usePrev = expandAndWidth.y < 0.0;\n\n    vec4 p = czm_computePosition();\n    vec4 prev = czm_computePrevPosition();\n    vec4 next = czm_computeNextPosition();\n\n    float angle;\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\n    gl_Position = czm_viewportOrthographic * positionWC;\n\n    v_color = color;\n}\n"},395219:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 prevPosition3DHigh;\nattribute vec3 prevPosition3DLow;\nattribute vec3 nextPosition3DHigh;\nattribute vec3 nextPosition3DLow;\nattribute vec2 expandAndWidth;\nattribute vec2 st;\nattribute float batchId;\n\nvarying float v_width;\nvarying vec2 v_st;\nvarying float v_polylineAngle;\n\nvoid main()\n{\n    float expandDir = expandAndWidth.x;\n    float width = abs(expandAndWidth.y) + 0.5;\n    bool usePrev = expandAndWidth.y < 0.0;\n\n    vec4 p = czm_computePosition();\n    vec4 prev = czm_computePrevPosition();\n    vec4 next = czm_computeNextPosition();\n\n    float angle;\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, angle);\n    gl_Position = czm_viewportOrthographic * positionWC;\n\n    v_width = width;\n    v_st.s = st.s;\n    v_st.t = czm_writeNonPerspective(st.t, gl_Position.w);\n    v_polylineAngle = angle;\n}\n"},537300:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    vec3 positionToEyeEC = -v_positionEC;\n\n    vec3 normalEC = normalize(v_normalEC);\n#ifdef FACE_FORWARD\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\n#endif\n\n    czm_materialInput materialInput;\n    materialInput.normalEC = normalEC;\n    materialInput.positionToEyeEC = positionToEyeEC;\n    materialInput.st = v_st;\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef FLAT\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#else\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n#endif\n}\n"},799457:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 normal;\nattribute vec2 st;\nattribute float batchId;\n\nvarying vec3 v_positionEC;\nvarying vec3 v_normalEC;\nvarying vec2 v_st;\n\nvoid main()\n{\n    vec4 p = czm_computePosition();\n\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\n    v_st = st;\n\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\n}\n"},78218:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\nuniform sampler2D u_atlas;\n\n#ifdef VECTOR_TILE\nuniform vec4 u_highlightColor;\n#endif\n\nvarying vec2 v_textureCoordinates;\nvarying vec4 v_pickColor;\nvarying vec4 v_color;\n\n#ifdef SDF\nvarying vec4 v_outlineColor;\nvarying float v_outlineWidth;\n#endif\n\n#ifdef FRAGMENT_DEPTH_CHECK\nvarying vec4 v_textureCoordinateBounds;                  // the min and max x and y values for the texture coordinates\nvarying vec4 v_originTextureCoordinateAndTranslate;      // texture coordinate at the origin, billboard translate (used for label glyphs)\nvarying vec4 v_compressed;                               // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\nvarying mat2 v_rotationMatrix;\n\nconst float SHIFT_LEFT12 = 4096.0;\nconst float SHIFT_LEFT1 = 2.0;\n\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\n\nfloat getGlobeDepth(vec2 adjustedST, vec2 depthLookupST, bool applyTranslate, vec2 dimensions, vec2 imageSize)\n{\n    vec2 lookupVector = imageSize * (depthLookupST - adjustedST);\n    lookupVector = v_rotationMatrix * lookupVector;\n    vec2 labelOffset = (dimensions - imageSize) * (depthLookupST - vec2(0.0, v_originTextureCoordinateAndTranslate.y)); // aligns label glyph with bounding rectangle.  Will be zero for billboards because dimensions and imageSize will be equal\n\n    vec2 translation = v_originTextureCoordinateAndTranslate.zw;\n\n    if (applyTranslate)\n    {\n        // this is only needed for labels where the horizontal origin is not LEFT\n        // it moves the label back to where the "origin" should be since all label glyphs are set to HorizontalOrigin.LEFT\n        translation += (dimensions * v_originTextureCoordinateAndTranslate.xy * vec2(1.0, 0.0));\n    }\n\n    vec2 st = ((lookupVector - translation + labelOffset) + gl_FragCoord.xy) / czm_viewport.zw;\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st));\n\n    if (logDepthOrDepth == 0.0)\n    {\n        return 0.0; // not on the globe\n    }\n\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\n    return eyeCoordinate.z / eyeCoordinate.w;\n}\n#endif\n\n\n#ifdef SDF\n\n// Get the distance from the edge of a glyph at a given position sampling an SDF texture.\nfloat getDistance(vec2 position)\n{\n    return texture2D(u_atlas, position).r;\n}\n\n// Samples the sdf texture at the given position and produces a color based on the fill color and the outline.\nvec4 getSDFColor(vec2 position, float outlineWidth, vec4 outlineColor, float smoothing)\n{\n    float distance = getDistance(position);\n\n    if (outlineWidth > 0.0)\n    {\n        // Don\'t get the outline edge exceed the SDF_EDGE\n        float outlineEdge = clamp(SDF_EDGE - outlineWidth, 0.0, SDF_EDGE);\n        float outlineFactor = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\n        vec4 sdfColor = mix(outlineColor, v_color, outlineFactor);\n        float alpha = smoothstep(outlineEdge - smoothing, outlineEdge + smoothing, distance);\n        return vec4(sdfColor.rgb, sdfColor.a * alpha);\n    }\n    else\n    {\n        float alpha = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\n        return vec4(v_color.rgb, v_color.a * alpha);\n    }\n}\n#endif\n\nvoid main()\n{\n    vec4 color = texture2D(u_atlas, v_textureCoordinates);\n\n#ifdef SDF\n    float outlineWidth = v_outlineWidth;\n    vec4 outlineColor = v_outlineColor;\n\n    // Get the current distance\n    float distance = getDistance(v_textureCoordinates);\n\n#ifdef GL_OES_standard_derivatives\n    float smoothing = fwidth(distance);\n    // Get an offset that is approximately half the distance to the neighbor pixels\n    // 0.354 is approximately half of 1/sqrt(2)\n    vec2 sampleOffset = 0.354 * vec2(dFdx(v_textureCoordinates) + dFdy(v_textureCoordinates));\n\n    // Sample the center point\n    vec4 center = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\n\n    // Sample the 4 neighbors\n    vec4 color1 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\n    vec4 color2 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\n    vec4 color3 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\n    vec4 color4 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\n\n    // Equally weight the center sample and the 4 neighboring samples\n    color = (center + color1 + color2 + color3 + color4)/5.0;\n#else\n    // Just do a single sample\n    float smoothing = 1.0/32.0;\n    color = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\n#endif\n\n    color = czm_gammaCorrect(color);\n#else\n    color = czm_gammaCorrect(color);\n    color *= czm_gammaCorrect(v_color);\n#endif\n\n// Fully transparent parts of the billboard are not pickable.\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\n    if (color.a < 0.005)   // matches 0/255 and 1/255\n    {\n        discard;\n    }\n#else\n// The billboard is rendered twice. The opaque pass discards translucent fragments\n// and the translucent pass discards opaque fragments.\n#ifdef OPAQUE\n    if (color.a < 0.995)   // matches < 254/255\n    {\n        discard;\n    }\n#else\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\n    {\n        discard;\n    }\n#endif\n#endif\n\n#ifdef VECTOR_TILE\n    color *= u_highlightColor;\n#endif\n    gl_FragColor = color;\n\n#ifdef LOG_DEPTH\n    czm_writeLogDepth();\n#endif\n\n#ifdef FRAGMENT_DEPTH_CHECK\n    float temp = v_compressed.y;\n\n    temp = temp * SHIFT_RIGHT1;\n\n    float temp2 = (temp - floor(temp)) * SHIFT_LEFT1;\n    bool enableDepthTest = temp2 != 0.0;\n    bool applyTranslate = floor(temp) != 0.0;\n\n    if (enableDepthTest) {\n        temp = v_compressed.z;\n        temp = temp * SHIFT_RIGHT12;\n\n        vec2 dimensions;\n        dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\n        dimensions.x = floor(temp);\n\n        temp = v_compressed.w;\n        temp = temp * SHIFT_RIGHT12;\n\n        vec2 imageSize;\n        imageSize.y = (temp - floor(temp)) * SHIFT_LEFT12;\n        imageSize.x = floor(temp);\n\n        vec2 adjustedST = v_textureCoordinates - v_textureCoordinateBounds.xy;\n        adjustedST = adjustedST / vec2(v_textureCoordinateBounds.z - v_textureCoordinateBounds.x, v_textureCoordinateBounds.w - v_textureCoordinateBounds.y);\n\n        float epsilonEyeDepth = v_compressed.x + czm_epsilon1;\n        float globeDepth1 = getGlobeDepth(adjustedST, v_originTextureCoordinateAndTranslate.xy, applyTranslate, dimensions, imageSize);\n\n        // negative values go into the screen\n        if (globeDepth1 != 0.0 && globeDepth1 > epsilonEyeDepth)\n        {\n            float globeDepth2 = getGlobeDepth(adjustedST, vec2(0.0, 1.0), applyTranslate, dimensions, imageSize); // top left corner\n            if (globeDepth2 != 0.0 && globeDepth2 > epsilonEyeDepth)\n            {\n                float globeDepth3 = getGlobeDepth(adjustedST, vec2(1.0, 1.0), applyTranslate, dimensions, imageSize); // top right corner\n                if (globeDepth3 != 0.0 && globeDepth3 > epsilonEyeDepth)\n                {\n                    discard;\n                }\n            }\n        }\n    }\n#endif\n\n}\n'},56821:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef INSTANCED\nattribute vec2 direction;\n#endif\nattribute vec4 positionHighAndScale;\nattribute vec4 positionLowAndRotation;\nattribute vec4 compressedAttribute0;                       // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates (texture offset)\nattribute vec4 compressedAttribute1;                       // aligned axis, translucency by distance, image width\nattribute vec4 compressedAttribute2;                       // label horizontal origin, image height, color, pick color, size in meters, valid aligned axis, 13 bits free\nattribute vec4 eyeOffset;                                  // eye offset in meters, 4 bytes free (texture range)\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\nattribute vec4 pixelOffsetScaleByDistance;                 // near, nearScale, far, farScale\nattribute vec4 compressedAttribute3;                       // distance display condition near, far, disableDepthTestDistance, dimensions\nattribute vec2 sdf;                                        // sdf outline color (rgb) and width (w)\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\nattribute vec4 textureCoordinateBoundsOrLabelTranslate;    // the min and max x and y values for the texture coordinates\n#endif\n#ifdef VECTOR_TILE\nattribute float a_batchId;\n#endif\n\nvarying vec2 v_textureCoordinates;\n#ifdef FRAGMENT_DEPTH_CHECK\nvarying vec4 v_textureCoordinateBounds;\nvarying vec4 v_originTextureCoordinateAndTranslate;\nvarying vec4 v_compressed;                                 // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\nvarying mat2 v_rotationMatrix;\n#endif\n\nvarying vec4 v_pickColor;\nvarying vec4 v_color;\n#ifdef SDF\nvarying vec4 v_outlineColor;\nvarying float v_outlineWidth;\n#endif\n\nconst float UPPER_BOUND = 32768.0;\n\nconst float SHIFT_LEFT16 = 65536.0;\nconst float SHIFT_LEFT12 = 4096.0;\nconst float SHIFT_LEFT8 = 256.0;\nconst float SHIFT_LEFT7 = 128.0;\nconst float SHIFT_LEFT5 = 32.0;\nconst float SHIFT_LEFT3 = 8.0;\nconst float SHIFT_LEFT2 = 4.0;\nconst float SHIFT_LEFT1 = 2.0;\n\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\nconst float SHIFT_RIGHT7 = 1.0 / 128.0;\nconst float SHIFT_RIGHT5 = 1.0 / 32.0;\nconst float SHIFT_RIGHT3 = 1.0 / 8.0;\nconst float SHIFT_RIGHT2 = 1.0 / 4.0;\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\n\nvec4 addScreenSpaceOffset(vec4 positionEC, vec2 imageSize, float scale, vec2 direction, vec2 origin, vec2 translate, vec2 pixelOffset, vec3 alignedAxis, bool validAlignedAxis, float rotation, bool sizeInMeters, out mat2 rotationMatrix, out float mpp)\n{\n    // Note the halfSize cannot be computed in JavaScript because it is sent via\n    // compressed vertex attributes that coerce it to an integer.\n    vec2 halfSize = imageSize * scale * 0.5;\n    halfSize *= ((direction * 2.0) - 1.0);\n\n    vec2 originTranslate = origin * abs(halfSize);\n\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\n    if (validAlignedAxis || rotation != 0.0)\n    {\n        float angle = rotation;\n        if (validAlignedAxis)\n        {\n            vec4 projectedAlignedAxis = czm_modelViewProjection * vec4(alignedAxis, 0.0);\n            angle += sign(-projectedAlignedAxis.x) * acos(sign(projectedAlignedAxis.y) * (projectedAlignedAxis.y * projectedAlignedAxis.y) /\n                    (projectedAlignedAxis.x * projectedAlignedAxis.x + projectedAlignedAxis.y * projectedAlignedAxis.y));\n        }\n\n        float cosTheta = cos(angle);\n        float sinTheta = sin(angle);\n        rotationMatrix = mat2(cosTheta, sinTheta, -sinTheta, cosTheta);\n        halfSize = rotationMatrix * halfSize;\n    }\n    else\n    {\n        rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\n    }\n#endif\n\n    mpp = czm_metersPerPixel(positionEC);\n    positionEC.xy += (originTranslate + halfSize) * czm_branchFreeTernary(sizeInMeters, 1.0, mpp);\n    positionEC.xy += (translate + pixelOffset) * mpp;\n\n    return positionEC;\n}\n\n#ifdef VERTEX_DEPTH_CHECK\nfloat getGlobeDepth(vec4 positionEC)\n{\n    vec4 posWC = czm_eyeToWindowCoordinates(positionEC);\n\n    float globeDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, posWC.xy / czm_viewport.zw));\n\n    if (globeDepth == 0.0)\n    {\n        return 0.0; // not on the globe\n    }\n\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(posWC.xy, globeDepth);\n    return eyeCoordinate.z / eyeCoordinate.w;\n}\n#endif\nvoid main()\n{\n    // Modifying this shader may also require modifications to Billboard._computeScreenSpacePosition\n\n    // unpack attributes\n    vec3 positionHigh = positionHighAndScale.xyz;\n    vec3 positionLow = positionLowAndRotation.xyz;\n    float scale = positionHighAndScale.w;\n\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\n    float rotation = positionLowAndRotation.w;\n#else\n    float rotation = 0.0;\n#endif\n\n    float compressed = compressedAttribute0.x;\n\n    vec2 pixelOffset;\n    pixelOffset.x = floor(compressed * SHIFT_RIGHT7);\n    compressed -= pixelOffset.x * SHIFT_LEFT7;\n    pixelOffset.x -= UPPER_BOUND;\n\n    vec2 origin;\n    origin.x = floor(compressed * SHIFT_RIGHT5);\n    compressed -= origin.x * SHIFT_LEFT5;\n\n    origin.y = floor(compressed * SHIFT_RIGHT3);\n    compressed -= origin.y * SHIFT_LEFT3;\n\n#ifdef FRAGMENT_DEPTH_CHECK\n    vec2 depthOrigin = origin.xy;\n#endif\n    origin -= vec2(1.0);\n\n    float show = floor(compressed * SHIFT_RIGHT2);\n    compressed -= show * SHIFT_LEFT2;\n\n#ifdef INSTANCED\n    vec2 textureCoordinatesBottomLeft = czm_decompressTextureCoordinates(compressedAttribute0.w);\n    vec2 textureCoordinatesRange = czm_decompressTextureCoordinates(eyeOffset.w);\n    vec2 textureCoordinates = textureCoordinatesBottomLeft + direction * textureCoordinatesRange;\n#else\n    vec2 direction;\n    direction.x = floor(compressed * SHIFT_RIGHT1);\n    direction.y = compressed - direction.x * SHIFT_LEFT1;\n\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressedAttribute0.w);\n#endif\n\n    float temp = compressedAttribute0.y  * SHIFT_RIGHT8;\n    pixelOffset.y = -(floor(temp) - UPPER_BOUND);\n\n    vec2 translate;\n    translate.y = (temp - floor(temp)) * SHIFT_LEFT16;\n\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\n    translate.x = floor(temp) - UPPER_BOUND;\n\n    translate.y += (temp - floor(temp)) * SHIFT_LEFT8;\n    translate.y -= UPPER_BOUND;\n\n    temp = compressedAttribute1.x * SHIFT_RIGHT8;\n    float temp2 = floor(compressedAttribute2.w * SHIFT_RIGHT2);\n\n    vec2 imageSize = vec2(floor(temp), temp2);\n\n#ifdef FRAGMENT_DEPTH_CHECK\n    float labelHorizontalOrigin = floor(compressedAttribute2.w - (temp2 * SHIFT_LEFT2));\n    float applyTranslate = 0.0;\n    if (labelHorizontalOrigin != 0.0) // is a billboard, so set apply translate to false\n    {\n        applyTranslate = 1.0;\n        labelHorizontalOrigin -= 2.0;\n        depthOrigin.x = labelHorizontalOrigin + 1.0;\n    }\n\n    depthOrigin = vec2(1.0) - (depthOrigin * 0.5);\n#endif\n\n#ifdef EYE_DISTANCE_TRANSLUCENCY\n    vec4 translucencyByDistance;\n    translucencyByDistance.x = compressedAttribute1.z;\n    translucencyByDistance.z = compressedAttribute1.w;\n\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\n\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\n#endif\n\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\n    temp = compressedAttribute3.w;\n    temp = temp * SHIFT_RIGHT12;\n\n    vec2 dimensions;\n    dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\n    dimensions.x = floor(temp);\n#endif\n\n#ifdef ALIGNED_AXIS\n    vec3 alignedAxis = czm_octDecode(floor(compressedAttribute1.y * SHIFT_RIGHT8));\n    temp = compressedAttribute2.z * SHIFT_RIGHT5;\n    bool validAlignedAxis = (temp - floor(temp)) * SHIFT_LEFT1 > 0.0;\n#else\n    vec3 alignedAxis = vec3(0.0);\n    bool validAlignedAxis = false;\n#endif\n\n    vec4 pickColor;\n    vec4 color;\n\n    temp = compressedAttribute2.y;\n    temp = temp * SHIFT_RIGHT8;\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    pickColor.r = floor(temp);\n\n    temp = compressedAttribute2.x;\n    temp = temp * SHIFT_RIGHT8;\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    color.r = floor(temp);\n\n    temp = compressedAttribute2.z * SHIFT_RIGHT8;\n    bool sizeInMeters = floor((temp - floor(temp)) * SHIFT_LEFT7) > 0.0;\n    temp = floor(temp) * SHIFT_RIGHT8;\n\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\n    pickColor /= 255.0;\n\n    color.a = floor(temp);\n    color /= 255.0;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\n\n#if defined(FRAGMENT_DEPTH_CHECK) || defined(VERTEX_DEPTH_CHECK)\n    float eyeDepth = positionEC.z;\n#endif\n\n    positionEC = czm_eyeOffset(positionEC, eyeOffset.xyz);\n    positionEC.xyz *= show;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(EYE_DISTANCE_PIXEL_OFFSET) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\n    float lengthSq;\n    if (czm_sceneMode == czm_sceneMode2D)\n    {\n        // 2D camera distance is a special case\n        // treat all billboards as flattened to the z=0.0 plane\n        lengthSq = czm_eyeHeight2D.y;\n    }\n    else\n    {\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\n    }\n#endif\n\n#ifdef EYE_DISTANCE_SCALING\n    float distanceScale = czm_nearFarScalar(scaleByDistance, lengthSq);\n    scale *= distanceScale;\n    translate *= distanceScale;\n    // push vertex behind near plane for clipping\n    if (scale == 0.0)\n    {\n        positionEC.xyz = vec3(0.0);\n    }\n#endif\n\n    float translucency = 1.0;\n#ifdef EYE_DISTANCE_TRANSLUCENCY\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\n    // push vertex behind near plane for clipping\n    if (translucency == 0.0)\n    {\n        positionEC.xyz = vec3(0.0);\n    }\n#endif\n\n#ifdef EYE_DISTANCE_PIXEL_OFFSET\n    float pixelOffsetScale = czm_nearFarScalar(pixelOffsetScaleByDistance, lengthSq);\n    pixelOffset *= pixelOffsetScale;\n#endif\n\n#ifdef DISTANCE_DISPLAY_CONDITION\n    float nearSq = compressedAttribute3.x;\n    float farSq = compressedAttribute3.y;\n    if (lengthSq < nearSq || lengthSq > farSq)\n    {\n        positionEC.xyz = vec3(0.0);\n    }\n#endif\n\n    mat2 rotationMatrix;\n    float mpp;\n\n#ifdef DISABLE_DEPTH_DISTANCE\n    float disableDepthTestDistance = compressedAttribute3.z;\n#endif\n\n#ifdef VERTEX_DEPTH_CHECK\nif (lengthSq < disableDepthTestDistance) {\n    float depthsilon = 10.0;\n\n    vec2 labelTranslate = textureCoordinateBoundsOrLabelTranslate.xy;\n    vec4 pEC1 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\n    float globeDepth1 = getGlobeDepth(pEC1);\n\n    if (globeDepth1 != 0.0 && pEC1.z + depthsilon < globeDepth1)\n    {\n        vec4 pEC2 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0, 1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\n        float globeDepth2 = getGlobeDepth(pEC2);\n\n        if (globeDepth2 != 0.0 && pEC2.z + depthsilon < globeDepth2)\n        {\n            vec4 pEC3 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\n            float globeDepth3 = getGlobeDepth(pEC3);\n            if (globeDepth3 != 0.0 && pEC3.z + depthsilon < globeDepth3)\n            {\n                positionEC.xyz = vec3(0.0);\n            }\n        }\n    }\n}\n#endif\n\n    positionEC = addScreenSpaceOffset(positionEC, imageSize, scale, direction, origin, translate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\n    gl_Position = czm_projection * positionEC;\n    v_textureCoordinates = textureCoordinates;\n\n#ifdef LOG_DEPTH\n    czm_vertexLogDepth();\n#endif\n\n#ifdef DISABLE_DEPTH_DISTANCE\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\n    {\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\n    }\n\n    if (disableDepthTestDistance != 0.0)\n    {\n        // Don't try to \"multiply both sides\" by w.  Greater/less-than comparisons won't work for negative values of w.\n        float zclip = gl_Position.z / gl_Position.w;\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\n        {\n            // Position z on the near plane.\n            gl_Position.z = -gl_Position.w;\n#ifdef LOG_DEPTH\n            v_depthFromNearPlusOne = 1.0;\n#endif\n        }\n    }\n#endif\n\n#ifdef FRAGMENT_DEPTH_CHECK\n    if (sizeInMeters) {\n        translate /= mpp;\n        dimensions /= mpp;\n        imageSize /= mpp;\n    }\n\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\n    v_rotationMatrix = rotationMatrix;\n#else\n    v_rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\n#endif\n\n    float enableDepthCheck = 0.0;\n    if (lengthSq < disableDepthTestDistance)\n    {\n        enableDepthCheck = 1.0;\n    }\n\n    float dw = floor(clamp(dimensions.x, 0.0, SHIFT_LEFT12));\n    float dh = floor(clamp(dimensions.y, 0.0, SHIFT_LEFT12));\n\n    float iw = floor(clamp(imageSize.x, 0.0, SHIFT_LEFT12));\n    float ih = floor(clamp(imageSize.y, 0.0, SHIFT_LEFT12));\n\n    v_compressed.x = eyeDepth;\n    v_compressed.y = applyTranslate * SHIFT_LEFT1 + enableDepthCheck;\n    v_compressed.z = dw * SHIFT_LEFT12 + dh;\n    v_compressed.w = iw * SHIFT_LEFT12 + ih;\n    v_originTextureCoordinateAndTranslate.xy = depthOrigin;\n    v_originTextureCoordinateAndTranslate.zw = translate;\n    v_textureCoordinateBounds = textureCoordinateBoundsOrLabelTranslate;\n\n#endif\n\n#ifdef SDF\n    vec4 outlineColor;\n    float outlineWidth;\n\n    temp = sdf.x;\n    temp = temp * SHIFT_RIGHT8;\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    outlineColor.r = floor(temp);\n\n    temp = sdf.y;\n    temp = temp * SHIFT_RIGHT8;\n    float temp3 = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    outlineWidth = (temp - floor(temp)) * SHIFT_LEFT8;\n    outlineColor.a = floor(temp);\n    outlineColor /= 255.0;\n\n    v_outlineWidth = outlineWidth / 255.0;\n    v_outlineColor = outlineColor;\n    v_outlineColor.a *= translucency;\n#endif\n\n    v_pickColor = pickColor;\n\n    v_color = color;\n    v_color.a *= translucency;\n\n}\n"},998052:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec2 v_textureCoordinates;\nconst float M_PI = 3.141592653589793;\n\nfloat vdcRadicalInverse(int i)\n{\n    float r;\n    float base = 2.0;\n    float value = 0.0;\n    float invBase = 1.0 / base;\n    float invBi = invBase;\n    for (int x = 0; x < 100; x++)\n    {\n        if (i <= 0)\n        {\n            break;\n        }\n        r = mod(float(i), base);\n        value += r * invBi;\n        invBi *= invBase;\n        i = int(float(i) * invBase);\n    }\n    return value;\n}\n\nvec2 hammersley2D(int i, int N)\n{\n    return vec2(float(i) / float(N), vdcRadicalInverse(i));\n}\n\nvec3 importanceSampleGGX(vec2 xi, float roughness, vec3 N)\n{\n    float a = roughness * roughness;\n    float phi = 2.0 * M_PI * xi.x;\n    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangentX = normalize(cross(upVector, N));\n    vec3 tangentY = cross(N, tangentX);\n    return tangentX * H.x + tangentY * H.y + N * H.z;\n}\n\nfloat G1_Smith(float NdotV, float k)\n{\n    return NdotV / (NdotV * (1.0 - k) + k);\n}\n\nfloat G_Smith(float roughness, float NdotV, float NdotL)\n{\n    float k = roughness * roughness / 2.0;\n    return G1_Smith(NdotV, k) * G1_Smith(NdotL, k);\n}\n\nvec2 integrateBrdf(float roughness, float NdotV)\n{\n    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);\n    float A = 0.0;\n    float B = 0.0;\n    const int NumSamples = 1024;\n    for (int i = 0; i < NumSamples; i++)\n    {\n        vec2 xi = hammersley2D(i, NumSamples);\n        vec3 H = importanceSampleGGX(xi, roughness, vec3(0.0, 0.0, 1.0));\n        vec3 L = 2.0 * dot(V, H) * H - V;\n        float NdotL = clamp(L.z, 0.0, 1.0);\n        float NdotH = clamp(H.z, 0.0, 1.0);\n        float VdotH = clamp(dot(V, H), 0.0, 1.0);\n        if (NdotL > 0.0)\n        {\n            float G = G_Smith(roughness, NdotV, NdotL);\n            float G_Vis = G * VdotH / (NdotH * NdotV);\n            float Fc = pow(1.0 - VdotH, 5.0);\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    return vec2(A, B) / float(NumSamples);\n}\n\nvoid main()\n{\n    gl_FragColor = vec4(integrateBrdf(v_textureCoordinates.y, v_textureCoordinates.x), 0.0, 1.0);\n}\n"},87848:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for converting radians to degrees.\n *\n * @alias czm_degreesPerRadian\n * @glslConstant\n *\n * @see CesiumMath.DEGREES_PER_RADIAN\n *\n * @example\n * // GLSL declaration\n * const float czm_degreesPerRadian = ...;\n *\n * // Example\n * float deg = czm_degreesPerRadian * rad;\n */\nconst float czm_degreesPerRadian = 57.29577951308232;\n"},709059:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL vec2 constant for defining the depth range.\n * This is a workaround to a bug where IE11 does not implement gl_DepthRange.\n *\n * @alias czm_depthRange\n * @glslConstant\n *\n * @example\n * // GLSL declaration\n * float depthRangeNear = czm_depthRange.near;\n * float depthRangeFar = czm_depthRange.far;\n *\n */\nconst czm_depthRangeStruct czm_depthRange = czm_depthRangeStruct(0.0, 1.0);\n"},454560:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.1\n *\n * @name czm_epsilon1\n * @glslConstant\n */\nconst float czm_epsilon1 = 0.1;\n"},873734:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.01\n *\n * @name czm_epsilon2\n * @glslConstant\n */\nconst float czm_epsilon2 = 0.01;\n"},21162:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.001\n *\n * @name czm_epsilon3\n * @glslConstant\n */\nconst float czm_epsilon3 = 0.001;\n"},662813:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.0001\n *\n * @name czm_epsilon4\n * @glslConstant\n */\nconst float czm_epsilon4 = 0.0001;\n"},117542:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.00001\n *\n * @name czm_epsilon5\n * @glslConstant\n */\nconst float czm_epsilon5 = 0.00001;\n"},880146:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.000001\n *\n * @name czm_epsilon6\n * @glslConstant\n */\nconst float czm_epsilon6 = 0.000001;\n"},708670:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * 0.0000001\n *\n * @name czm_epsilon7\n * @glslConstant\n */\nconst float czm_epsilon7 = 0.0000001;\n"},388197:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_infinity\n * @glslConstant\n */\nconst float czm_infinity = 5906376272000.0;  // Distance from the Sun to Pluto in meters.  TODO: What is best given lowp, mediump, and highp?\n"},422190:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>1/pi</code>.\n *\n * @alias czm_oneOverPi\n * @glslConstant\n *\n * @see CesiumMath.ONE_OVER_PI\n *\n * @example\n * // GLSL declaration\n * const float czm_oneOverPi = ...;\n *\n * // Example\n * float pi = 1.0 / czm_oneOverPi;\n */\nconst float czm_oneOverPi = 0.3183098861837907;\n"},333427:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>1/2pi</code>.\n *\n * @alias czm_oneOverTwoPi\n * @glslConstant\n *\n * @see CesiumMath.ONE_OVER_TWO_PI\n *\n * @example\n * // GLSL declaration\n * const float czm_oneOverTwoPi = ...;\n *\n * // Example\n * float pi = 2.0 * czm_oneOverTwoPi;\n */\nconst float czm_oneOverTwoPi = 0.15915494309189535;\n"},398153:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE}\n *\n * @name czm_passCesium3DTile\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passCesium3DTile = 4.0;\n"},732954:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION}\n *\n * @name czm_passCesium3DTileClassification\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passCesium3DTileClassification = 5.0;\n"},481972:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW}\n *\n * @name czm_passCesium3DTileClassificationIgnoreShow\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passCesium3DTileClassificationIgnoreShow = 6.0;\n"},689546:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#CLASSIFICATION}\n *\n * @name czm_passClassification\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passClassification = 7.0;\n"},541389:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#COMPUTE}\n *\n * @name czm_passCompute\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passCompute = 1.0;\n"},40038:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#ENVIRONMENT}\n *\n * @name czm_passEnvironment\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passEnvironment = 0.0;\n"},312841:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#GLOBE}\n *\n * @name czm_passGlobe\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passGlobe = 2.0;\n"},768548:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#OPAQUE}\n *\n * @name czm_passOpaque\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passOpaque = 7.0;\n"},231123:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#OVERLAY}\n *\n * @name czm_passOverlay\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passOverlay = 9.0;\n"},936497:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#TERRAIN_CLASSIFICATION}\n *\n * @name czm_passTerrainClassification\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passTerrainClassification = 3.0;\n"},439651:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The automatic GLSL constant for {@link Pass#TRANSLUCENT}\n *\n * @name czm_passTranslucent\n * @glslConstant\n *\n * @see czm_pass\n */\nconst float czm_passTranslucent = 8.0;\n"},371081:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>Math.PI</code>.\n *\n * @alias czm_pi\n * @glslConstant\n *\n * @see CesiumMath.PI\n *\n * @example\n * // GLSL declaration\n * const float czm_pi = ...;\n *\n * // Example\n * float twoPi = 2.0 * czm_pi;\n */\nconst float czm_pi = 3.141592653589793;\n"},239131:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>pi/4</code>.\n *\n * @alias czm_piOverFour\n * @glslConstant\n *\n * @see CesiumMath.PI_OVER_FOUR\n *\n * @example\n * // GLSL declaration\n * const float czm_piOverFour = ...;\n *\n * // Example\n * float pi = 4.0 * czm_piOverFour;\n */\nconst float czm_piOverFour = 0.7853981633974483;\n"},462877:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>pi/6</code>.\n *\n * @alias czm_piOverSix\n * @glslConstant\n *\n * @see CesiumMath.PI_OVER_SIX\n *\n * @example\n * // GLSL declaration\n * const float czm_piOverSix = ...;\n *\n * // Example\n * float pi = 6.0 * czm_piOverSix;\n */\nconst float czm_piOverSix = 0.5235987755982988;\n"},4783:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>pi/3</code>.\n *\n * @alias czm_piOverThree\n * @glslConstant\n *\n * @see CesiumMath.PI_OVER_THREE\n *\n * @example\n * // GLSL declaration\n * const float czm_piOverThree = ...;\n *\n * // Example\n * float pi = 3.0 * czm_piOverThree;\n */\nconst float czm_piOverThree = 1.0471975511965976;\n"},394545:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>pi/2</code>.\n *\n * @alias czm_piOverTwo\n * @glslConstant\n *\n * @see CesiumMath.PI_OVER_TWO\n *\n * @example\n * // GLSL declaration\n * const float czm_piOverTwo = ...;\n *\n * // Example\n * float pi = 2.0 * czm_piOverTwo;\n */\nconst float czm_piOverTwo = 1.5707963267948966;\n"},595055:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for converting degrees to radians.\n *\n * @alias czm_radiansPerDegree\n * @glslConstant\n *\n * @see CesiumMath.RADIANS_PER_DEGREE\n *\n * @example\n * // GLSL declaration\n * const float czm_radiansPerDegree = ...;\n *\n * // Example\n * float rad = czm_radiansPerDegree * deg;\n */\nconst float czm_radiansPerDegree = 0.017453292519943295;\n"},397677:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The constant identifier for the 2D {@link SceneMode}\n *\n * @name czm_sceneMode2D\n * @glslConstant\n * @see czm_sceneMode\n * @see czm_sceneModeColumbusView\n * @see czm_sceneMode3D\n * @see czm_sceneModeMorphing\n */\nconst float czm_sceneMode2D = 2.0;\n"},484394:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The constant identifier for the 3D {@link SceneMode}\n *\n * @name czm_sceneMode3D\n * @glslConstant\n * @see czm_sceneMode\n * @see czm_sceneMode2D\n * @see czm_sceneModeColumbusView\n * @see czm_sceneModeMorphing\n */\nconst float czm_sceneMode3D = 3.0;\n"},165855:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The constant identifier for the Columbus View {@link SceneMode}\n *\n * @name czm_sceneModeColumbusView\n * @glslConstant\n * @see czm_sceneMode\n * @see czm_sceneMode2D\n * @see czm_sceneMode3D\n * @see czm_sceneModeMorphing\n */\nconst float czm_sceneModeColumbusView = 1.0;\n"},674560:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The constant identifier for the Morphing {@link SceneMode}\n *\n * @name czm_sceneModeMorphing\n * @glslConstant\n * @see czm_sceneMode\n * @see czm_sceneMode2D\n * @see czm_sceneModeColumbusView\n * @see czm_sceneMode3D\n */\nconst float czm_sceneModeMorphing = 0.0;\n"},908298:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for one solar radius.\n *\n * @alias czm_solarRadius\n * @glslConstant\n *\n * @see CesiumMath.SOLAR_RADIUS\n *\n * @example\n * // GLSL declaration\n * const float czm_solarRadius = ...;\n */\nconst float czm_solarRadius = 695500000.0;\n"},296942:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>3pi/2</code>.\n *\n * @alias czm_threePiOver2\n * @glslConstant\n *\n * @see CesiumMath.THREE_PI_OVER_TWO\n *\n * @example\n * // GLSL declaration\n * const float czm_threePiOver2 = ...;\n *\n * // Example\n * float pi = (2.0 / 3.0) * czm_threePiOver2;\n */\nconst float czm_threePiOver2 = 4.71238898038469;\n"},415240:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * A built-in GLSL floating-point constant for <code>2pi</code>.\n *\n * @alias czm_twoPi\n * @glslConstant\n *\n * @see CesiumMath.TWO_PI\n *\n * @example\n * // GLSL declaration\n * const float czm_twoPi = ...;\n *\n * // Example\n * float pi = czm_twoPi / 2.0;\n */\nconst float czm_twoPi = 6.283185307179586;\n"},583711:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * The maximum latitude, in radians, both North and South, supported by a Web Mercator\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\n * for any latitude up to (but not including) 90 degrees, but it makes sense\n * to cut it off sooner because it grows exponentially with increasing latitude.\n * The logic behind this particular cutoff value, which is the one used by\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\n * square.  That is, the rectangle is equal in the X and Y directions.\n *\n * The constant value is computed as follows:\n *   czm_pi * 0.5 - (2.0 * atan(exp(-czm_pi)))\n *\n * @name czm_webMercatorMaxLatitude\n * @glslConstant\n */\nconst float czm_webMercatorMaxLatitude = 1.4844222297453324;\n"},411342:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an HSB color (hue, saturation, brightness) to RGB\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\n *\n * @name czm_HSBToRGB\n * @glslFunction\n * \n * @param {vec3} hsb The color in HSB.\n *\n * @returns {vec3} The color in RGB.\n *\n * @example\n * vec3 hsb = czm_RGBToHSB(rgb);\n * hsb.z *= 0.1;\n * rgb = czm_HSBToRGB(hsb);\n */\n\nconst vec4 K_HSB2RGB = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\nvec3 czm_HSBToRGB(vec3 hsb)\n{\n    vec3 p = abs(fract(hsb.xxx + K_HSB2RGB.xyz) * 6.0 - K_HSB2RGB.www);\n    return hsb.z * mix(K_HSB2RGB.xxx, clamp(p - K_HSB2RGB.xxx, 0.0, 1.0), hsb.y);\n}\n"},63856:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an HSL color (hue, saturation, lightness) to RGB\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\n *\n * @name czm_HSLToRGB\n * @glslFunction\n * \n * @param {vec3} rgb The color in HSL.\n *\n * @returns {vec3} The color in RGB.\n *\n * @example\n * vec3 hsl = czm_RGBToHSL(rgb);\n * hsl.z *= 0.1;\n * rgb = czm_HSLToRGB(hsl);\n */\n\nvec3 hueToRGB(float hue)\n{\n    float r = abs(hue * 6.0 - 3.0) - 1.0;\n    float g = 2.0 - abs(hue * 6.0 - 2.0);\n    float b = 2.0 - abs(hue * 6.0 - 4.0);\n    return clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nvec3 czm_HSLToRGB(vec3 hsl)\n{\n    vec3 rgb = hueToRGB(hsl.x);\n    float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;\n    return (rgb - 0.5) * c + hsl.z;\n}\n"},917051:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an RGB color to HSB (hue, saturation, brightness)\n * HSB <-> RGB conversion with minimal branching: {@link http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl}\n *\n * @name czm_RGBToHSB\n * @glslFunction\n * \n * @param {vec3} rgb The color in RGB.\n *\n * @returns {vec3} The color in HSB.\n *\n * @example\n * vec3 hsb = czm_RGBToHSB(rgb);\n * hsb.z *= 0.1;\n * rgb = czm_HSBToRGB(hsb);\n */\n\nconst vec4 K_RGB2HSB = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\nvec3 czm_RGBToHSB(vec3 rgb)\n{\n    vec4 p = mix(vec4(rgb.bg, K_RGB2HSB.wz), vec4(rgb.gb, K_RGB2HSB.xy), step(rgb.b, rgb.g));\n    vec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + czm_epsilon7)), d / (q.x + czm_epsilon7), q.x);\n}\n"},251284:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an RGB color to HSL (hue, saturation, lightness)\n * HSL <-> RGB conversion: {@link http://www.chilliant.com/rgb2hsv.html}\n *\n * @name czm_RGBToHSL\n * @glslFunction\n * \n * @param {vec3} rgb The color in RGB.\n *\n * @returns {vec3} The color in HSL.\n *\n * @example\n * vec3 hsl = czm_RGBToHSL(rgb);\n * hsl.z *= 0.1;\n * rgb = czm_HSLToRGB(hsl);\n */\n \nvec3 RGBtoHCV(vec3 rgb)\n{\n    // Based on work by Sam Hocevar and Emil Persson\n    vec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1.0, 2.0 / 3.0) : vec4(rgb.gb, 0.0, -1.0 / 3.0);\n    vec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);\n    float c = q.x - min(q.w, q.y);\n    float h = abs((q.w - q.y) / (6.0 * c + czm_epsilon7) + q.z);\n    return vec3(h, c, q.x);\n}\n\nvec3 czm_RGBToHSL(vec3 rgb)\n{\n    vec3 hcv = RGBtoHCV(rgb);\n    float l = hcv.z - hcv.y * 0.5;\n    float s = hcv.y / (1.0 - abs(l * 2.0 - 1.0) + czm_epsilon7);\n    return vec3(hcv.x, s, l);\n}\n"},1978:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an RGB color to CIE Yxy.\n * <p>The conversion is described in\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\n * </p>\n * \n * @name czm_RGBToXYZ\n * @glslFunction\n * \n * @param {vec3} rgb The color in RGB.\n *\n * @returns {vec3} The color in CIE Yxy.\n *\n * @example\n * vec3 xyz = czm_RGBToXYZ(rgb);\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\n * rgb = czm_XYZToRGB(xyz);\n */\nvec3 czm_RGBToXYZ(vec3 rgb)\n{\n    const mat3 RGB2XYZ = mat3(0.4124, 0.2126, 0.0193,\n                              0.3576, 0.7152, 0.1192,\n                              0.1805, 0.0722, 0.9505);\n    vec3 xyz = RGB2XYZ * rgb;\n    vec3 Yxy;\n    Yxy.r = xyz.g;\n    float temp = dot(vec3(1.0), xyz);\n    Yxy.gb = xyz.rg / temp;\n    return Yxy;\n}\n"},248142:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts a CIE Yxy color to RGB.\n * <p>The conversion is described in\n * {@link http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering#Luminance_Transform|Luminance Transform}\n * </p>\n * \n * @name czm_XYZToRGB\n * @glslFunction\n * \n * @param {vec3} Yxy The color in CIE Yxy.\n *\n * @returns {vec3} The color in RGB.\n *\n * @example\n * vec3 xyz = czm_RGBToXYZ(rgb);\n * xyz.x = max(xyz.x - luminanceThreshold, 0.0);\n * rgb = czm_XYZToRGB(xyz);\n */\nvec3 czm_XYZToRGB(vec3 Yxy)\n{\n    const mat3 XYZ2RGB = mat3( 3.2405, -0.9693,  0.0556,\n                              -1.5371,  1.8760, -0.2040,\n                              -0.4985,  0.0416,  1.0572);\n    vec3 xyz;\n    xyz.r = Yxy.r * Yxy.g / Yxy.b;\n    xyz.g = Yxy.r;\n    xyz.b = Yxy.r * (1.0 - Yxy.g - Yxy.b) / Yxy.b;\n    \n    return XYZ2RGB * xyz;\n}\n"},822548:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="// See:\n//    https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n\nvec3 czm_acesTonemapping(vec3 color) {\n    float g = 0.985;\n    float a = 0.065;\n    float b = 0.0001;\n    float c = 0.433;\n    float d = 0.238;\n\n    color = (color * (color + a) - b) / (color * (g * color + c) + d);\n\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n"},58496:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @private\n */\nfloat czm_alphaWeight(float a)\n{\n    float z = (gl_FragCoord.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\n\n    // See Weighted Blended Order-Independent Transparency for examples of different weighting functions:\n    // http://jcgt.org/published/0002/02/09/\n    return pow(a + 0.01, 4.0) + max(1e-2, min(3.0 * 1e3, 0.003 / (1e-5 + pow(abs(z) / 200.0, 4.0))));\n}\n"},230468:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Procedural anti-aliasing by blurring two colors that meet at a sharp edge.\n *\n * @name czm_antialias\n * @glslFunction\n *\n * @param {vec4} color1 The color on one side of the edge.\n * @param {vec4} color2 The color on the other side of the edge.\n * @param {vec4} currentcolor The current color, either <code>color1</code> or <code>color2</code>.\n * @param {float} dist The distance to the edge in texture coordinates.\n * @param {float} [fuzzFactor=0.1] Controls the blurriness between the two colors.\n * @returns {vec4} The anti-aliased color.\n *\n * @example\n * // GLSL declarations\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor);\n * vec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist);\n *\n * // get the color for a material that has a sharp edge at the line y = 0.5 in texture space\n * float dist = abs(textureCoordinates.t - 0.5);\n * vec4 currentColor = mix(bottomColor, topColor, step(0.5, textureCoordinates.t));\n * vec4 color = czm_antialias(bottomColor, topColor, currentColor, dist, 0.1);\n */\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist, float fuzzFactor)\n{\n    float val1 = clamp(dist / fuzzFactor, 0.0, 1.0);\n    float val2 = clamp((dist - 0.5) / fuzzFactor, 0.0, 1.0);\n    val1 = val1 * (1.0 - val2);\n    val1 = val1 * val1 * (3.0 - (2.0 * val1));\n    val1 = pow(val1, 0.5); //makes the transition nicer\n    \n    vec4 midColor = (color1 + color2) * 0.5;\n    return mix(midColor, currentColor, val1);\n}\n\nvec4 czm_antialias(vec4 color1, vec4 color2, vec4 currentColor, float dist)\n{\n    return czm_antialias(color1, color2, currentColor, dist, 0.1);\n}\n"},548133:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Approximately computes spherical coordinates given a normal.\n * Uses approximate inverse trigonometry for speed and consistency,\n * since inverse trigonometry can differ from vendor-to-vendor and when compared with the CPU.\n *\n * @name czm_approximateSphericalCoordinates\n * @glslFunction\n *\n * @param {vec3} normal arbitrary-length normal.\n *\n * @returns {vec2} Approximate latitude and longitude spherical coordinates.\n */\nvec2 czm_approximateSphericalCoordinates(vec3 normal) {\n    // Project into plane with vertical for latitude\n    float latitudeApproximation = czm_fastApproximateAtan(sqrt(normal.x * normal.x + normal.y * normal.y), normal.z);\n    float longitudeApproximation = czm_fastApproximateAtan(normal.x, normal.y);\n    return vec2(latitudeApproximation, longitudeApproximation);\n}\n"},653300:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Determines if the fragment is back facing\n *\n * @name czm_backFacing\n * @glslFunction \n * \n * @returns {bool} <code>true</code> if the fragment is back facing; otherwise, <code>false</code>.\n */\nbool czm_backFacing()\n{\n    // !gl_FrontFacing doesn't work as expected on Mac/Intel so use the more verbose form instead. See https://github.com/CesiumGS/cesium/pull/8494.\n    return gl_FrontFacing == false;\n}\n"},104201:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Branchless ternary operator to be used when it's inexpensive to explicitly\n * evaluate both possibilities for a float expression.\n *\n * @name czm_branchFreeTernary\n * @glslFunction\n *\n * @param {bool} comparison A comparison statement\n * @param {float} a Value to return if the comparison is true.\n * @param {float} b Value to return if the comparison is false.\n *\n * @returns {float} equivalent of comparison ? a : b\n */\nfloat czm_branchFreeTernary(bool comparison, float a, float b) {\n    float useA = float(comparison);\n    return a * useA + b * (1.0 - useA);\n}\n\n/**\n * Branchless ternary operator to be used when it's inexpensive to explicitly\n * evaluate both possibilities for a vec2 expression.\n *\n * @name czm_branchFreeTernary\n * @glslFunction\n *\n * @param {bool} comparison A comparison statement\n * @param {vec2} a Value to return if the comparison is true.\n * @param {vec2} b Value to return if the comparison is false.\n *\n * @returns {vec2} equivalent of comparison ? a : b\n */\nvec2 czm_branchFreeTernary(bool comparison, vec2 a, vec2 b) {\n    float useA = float(comparison);\n    return a * useA + b * (1.0 - useA);\n}\n\n/**\n * Branchless ternary operator to be used when it's inexpensive to explicitly\n * evaluate both possibilities for a vec3 expression.\n *\n * @name czm_branchFreeTernary\n * @glslFunction\n *\n * @param {bool} comparison A comparison statement\n * @param {vec3} a Value to return if the comparison is true.\n * @param {vec3} b Value to return if the comparison is false.\n *\n * @returns {vec3} equivalent of comparison ? a : b\n */\nvec3 czm_branchFreeTernary(bool comparison, vec3 a, vec3 b) {\n    float useA = float(comparison);\n    return a * useA + b * (1.0 - useA);\n}\n\n/**\n * Branchless ternary operator to be used when it's inexpensive to explicitly\n * evaluate both possibilities for a vec4 expression.\n *\n * @name czm_branchFreeTernary\n * @glslFunction\n *\n * @param {bool} comparison A comparison statement\n * @param {vec3} a Value to return if the comparison is true.\n * @param {vec3} b Value to return if the comparison is false.\n *\n * @returns {vec3} equivalent of comparison ? a : b\n */\nvec4 czm_branchFreeTernary(bool comparison, vec4 a, vec4 b) {\n    float useA = float(comparison);\n    return a * useA + b * (1.0 - useA);\n}\n"},258300:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nvec4 czm_cascadeColor(vec4 weights)\n{\n    return vec4(1.0, 0.0, 0.0, 1.0) * weights.x +\n           vec4(0.0, 1.0, 0.0, 1.0) * weights.y +\n           vec4(0.0, 0.0, 1.0, 1.0) * weights.z +\n           vec4(1.0, 0.0, 1.0, 1.0) * weights.w;\n}\n"},329558:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nuniform vec4 shadowMap_cascadeDistances;\n\nfloat czm_cascadeDistance(vec4 weights)\n{\n    return dot(shadowMap_cascadeDistances, weights);\n}\n"},804051:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nuniform mat4 shadowMap_cascadeMatrices[4];\n\nmat4 czm_cascadeMatrix(vec4 weights)\n{\n    return shadowMap_cascadeMatrices[0] * weights.x +\n           shadowMap_cascadeMatrices[1] * weights.y +\n           shadowMap_cascadeMatrices[2] * weights.z +\n           shadowMap_cascadeMatrices[3] * weights.w;\n}\n"},77622:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nuniform vec4 shadowMap_cascadeSplits[2];\n\nvec4 czm_cascadeWeights(float depthEye)\n{\n    // One component is set to 1.0 and all others set to 0.0.\n    vec4 near = step(shadowMap_cascadeSplits[0], vec4(depthEye));\n    vec4 far = step(depthEye, shadowMap_cascadeSplits[1]);\n    return near * far;\n}\n"},282613:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_columbusViewMorph\n * @glslFunction\n */\nvec4 czm_columbusViewMorph(vec4 position2D, vec4 position3D, float time)\n{\n    // Just linear for now.\n    vec3 p = mix(position2D.xyz, position3D.xyz, time);\n    return vec4(p, 1.0);\n}\n"},937502:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Returns a position in model coordinates relative to eye taking into\n * account the current scene mode: 3D, 2D, or Columbus view.\n * <p>\n * This uses standard position attributes, <code>position3DHigh</code>, \n * <code>position3DLow</code>, <code>position2DHigh</code>, and <code>position2DLow</code>, \n * and should be used when writing a vertex shader for an {@link Appearance}.\n * </p>\n *\n * @name czm_computePosition\n * @glslFunction\n *\n * @returns {vec4} The position relative to eye.\n *\n * @example\n * vec4 p = czm_computePosition();\n * v_positionEC = (czm_modelViewRelativeToEye * p).xyz;\n * gl_Position = czm_modelViewProjectionRelativeToEye * p;\n *\n * @see czm_translateRelativeToEye\n */\nvec4 czm_computePosition();\n"},740203:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @private\n */\nvec2 cordic(float angle)\n{\n// Scale the vector by the appropriate factor for the 24 iterations to follow.\n    vec2 vector = vec2(6.0725293500888267e-1, 0.0);\n// Iteration 1\n    float sense = (angle < 0.0) ? -1.0 : 1.0;\n //   float factor = sense * 1.0;  // 2^-0\n    mat2 rotation = mat2(1.0, sense, -sense, 1.0);\n    vector = rotation * vector;\n    angle -= sense * 7.8539816339744828e-1;  // atan(2^-0)\n// Iteration 2\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    float factor = sense * 5.0e-1;  // 2^-1\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 4.6364760900080609e-1;  // atan(2^-1)\n// Iteration 3\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 2.5e-1;  // 2^-2\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 2.4497866312686414e-1;  // atan(2^-2)\n// Iteration 4\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.25e-1;  // 2^-3\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.2435499454676144e-1;  // atan(2^-3)\n// Iteration 5\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 6.25e-2;  // 2^-4\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 6.2418809995957350e-2;  // atan(2^-4)\n// Iteration 6\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 3.125e-2;  // 2^-5\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 3.1239833430268277e-2;  // atan(2^-5)\n// Iteration 7\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.5625e-2;  // 2^-6\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.5623728620476831e-2;  // atan(2^-6)\n// Iteration 8\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 7.8125e-3;  // 2^-7\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 7.8123410601011111e-3;  // atan(2^-7)\n// Iteration 9\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 3.90625e-3;  // 2^-8\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 3.9062301319669718e-3;  // atan(2^-8)\n// Iteration 10\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.953125e-3;  // 2^-9\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.9531225164788188e-3;  // atan(2^-9)\n// Iteration 11\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 9.765625e-4;  // 2^-10\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 9.7656218955931946e-4;  // atan(2^-10)\n// Iteration 12\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 4.8828125e-4;  // 2^-11\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 4.8828121119489829e-4;  // atan(2^-11)\n// Iteration 13\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 2.44140625e-4;  // 2^-12\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 2.4414062014936177e-4;  // atan(2^-12)\n// Iteration 14\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.220703125e-4;  // 2^-13\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.2207031189367021e-4;  // atan(2^-13)\n// Iteration 15\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 6.103515625e-5;  // 2^-14\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 6.1035156174208773e-5;  // atan(2^-14)\n// Iteration 16\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 3.0517578125e-5;  // 2^-15\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 3.0517578115526096e-5;  // atan(2^-15)\n// Iteration 17\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.52587890625e-5;  // 2^-16\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.5258789061315762e-5;  // atan(2^-16)\n// Iteration 18\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 7.62939453125e-6;  // 2^-17\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 7.6293945311019700e-6;  // atan(2^-17)\n// Iteration 19\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 3.814697265625e-6;  // 2^-18\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 3.8146972656064961e-6;  // atan(2^-18)\n// Iteration 20\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.9073486328125e-6;  // 2^-19\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 1.9073486328101870e-6;  // atan(2^-19)\n// Iteration 21\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 9.5367431640625e-7;  // 2^-20\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 9.5367431640596084e-7;  // atan(2^-20)\n// Iteration 22\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 4.76837158203125e-7;  // 2^-21\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 4.7683715820308884e-7;  // atan(2^-21)\n// Iteration 23\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 2.384185791015625e-7;  // 2^-22\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n    angle -= sense * 2.3841857910155797e-7;  // atan(2^-22)\n// Iteration 24\n    sense = (angle < 0.0) ? -1.0 : 1.0;\n    factor = sense * 1.1920928955078125e-7;  // 2^-23\n    rotation[0][1] = factor;\n    rotation[1][0] = -factor;\n    vector = rotation * vector;\n//    angle -= sense * 1.1920928955078068e-7;  // atan(2^-23)\n\n    return vector;\n}\n\n/**\n * Computes the cosine and sine of the provided angle using the CORDIC algorithm.\n *\n * @name czm_cosineAndSine\n * @glslFunction\n *\n * @param {float} angle The angle in radians.\n *\n * @returns {vec2} The resulting cosine of the angle (as the x coordinate) and sine of the angle (as the y coordinate).\n *\n * @example\n * vec2 v = czm_cosineAndSine(czm_piOverSix);\n * float cosine = v.x;\n * float sine = v.y;\n */\nvec2 czm_cosineAndSine(float angle)\n{\n    if (angle < -czm_piOverTwo || angle > czm_piOverTwo)\n    {\n        if (angle < 0.0)\n        {\n            return -cordic(angle + czm_pi);\n        }\n        else\n        {\n            return -cordic(angle - czm_pi);\n        }\n    }\n    else\n    {\n        return cordic(angle);\n    }\n}\n"},435673:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Decompresses texture coordinates that were packed into a single float.\n *\n * @name czm_decompressTextureCoordinates\n * @glslFunction\n *\n * @param {float} encoded The compressed texture coordinates.\n * @returns {vec2} The decompressed texture coordinates.\n */\n vec2 czm_decompressTextureCoordinates(float encoded)\n {\n    float temp = encoded / 4096.0;\n    float xZeroTo4095 = floor(temp);\n    float stx = xZeroTo4095 / 4095.0;\n    float sty = (encoded - xZeroTo4095 * 4096.0) / 4095.0;\n    return vec2(stx, sty);\n }\n"},27518:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Get default parameters for physically based rendering. These defaults\n * describe a rough dielectric (non-metal) surface (e.g. rough plastic).\n *\n * @return {czm_pbrParameters} Default parameters for {@link czm_pbrLighting}\n */\nczm_pbrParameters czm_defaultPbrMaterial()\n{\n    czm_pbrParameters results;\n    results.diffuseColor = vec3(1.0);\n    results.roughness = 1.0;\n\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\n    results.f0 = REFLECTANCE_DIELECTRIC;\n    return results;\n}\n"},4082:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="// emulated noperspective\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\nvarying float v_WindowZ;\n#endif\n\n/**\n * Emulates GL_DEPTH_CLAMP, which is not available in WebGL 1 or 2.\n * GL_DEPTH_CLAMP clamps geometry that is outside the near and far planes, \n * capping the shadow volume. More information here: \n * https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_depth_clamp.txt.\n *\n * When GL_EXT_frag_depth is available we emulate GL_DEPTH_CLAMP by ensuring \n * no geometry gets clipped by setting the clip space z value to 0.0 and then\n * sending the unaltered screen space z value (using emulated noperspective\n * interpolation) to the frag shader where it is clamped to [0,1] and then\n * written with gl_FragDepth (see czm_writeDepthClamp). This technique is based on:\n * https://stackoverflow.com/questions/5960757/how-to-emulate-gl-depth-clamp-nv.\n *\n * When GL_EXT_frag_depth is not available, which is the case on some mobile \n * devices, we must attempt to fix this only in the vertex shader. \n * The approach is to clamp the z value to the far plane, which closes the \n * shadow volume but also distorts the geometry, so there can still be artifacts\n * on frustum seams.\n *\n * @name czm_depthClamp\n * @glslFunction\n *\n * @param {vec4} coords The vertex in clip coordinates.\n * @returns {vec4} The modified vertex.\n *\n * @example\n * gl_Position = czm_depthClamp(czm_modelViewProjection * vec4(position, 1.0));\n *\n * @see czm_writeDepthClamp\n */\nvec4 czm_depthClamp(vec4 coords)\n{\n#ifndef LOG_DEPTH\n#ifdef GL_EXT_frag_depth\n    v_WindowZ = (0.5 * (coords.z / coords.w) + 0.5) * coords.w;\n    coords.z = 0.0;\n#else\n    coords.z = min(coords.z, coords.w);\n#endif\n#endif\n    return coords;\n}\n"},633484:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes a 3x3 rotation matrix that transforms vectors from an ellipsoid's east-north-up coordinate system \n * to eye coordinates.  In east-north-up coordinates, x points east, y points north, and z points along the \n * surface normal.  East-north-up can be used as an ellipsoid's tangent space for operations such as bump mapping.\n * <br /><br />\n * The ellipsoid is assumed to be centered at the model coordinate's origin.\n *\n * @name czm_eastNorthUpToEyeCoordinates\n * @glslFunction\n *\n * @param {vec3} positionMC The position on the ellipsoid in model coordinates.\n * @param {vec3} normalEC The normalized ellipsoid surface normal, at <code>positionMC</code>, in eye coordinates.\n *\n * @returns {mat3} A 3x3 rotation matrix that transforms vectors from the east-north-up coordinate system to eye coordinates.\n *\n * @example\n * // Transform a vector defined in the east-north-up coordinate \n * // system, (0, 0, 1) which is the surface normal, to eye \n * // coordinates.\n * mat3 m = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\n * vec3 normalEC = m * vec3(0.0, 0.0, 1.0);\n */\nmat3 czm_eastNorthUpToEyeCoordinates(vec3 positionMC, vec3 normalEC)\n{\n    vec3 tangentMC = normalize(vec3(-positionMC.y, positionMC.x, 0.0));  // normalized surface tangent in model coordinates\n    vec3 tangentEC = normalize(czm_normal3D * tangentMC);                // normalized surface tangent in eye coordiantes\n    vec3 bitangentEC = normalize(cross(normalEC, tangentEC));            // normalized surface bitangent in eye coordinates\n\n    return mat3(\n        tangentEC.x,   tangentEC.y,   tangentEC.z,\n        bitangentEC.x, bitangentEC.y, bitangentEC.z,\n        normalEC.x,    normalEC.y,    normalEC.z);\n}\n"},370050:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_ellipsoidContainsPoint\n * @glslFunction\n *\n */\nbool czm_ellipsoidContainsPoint(vec3 ellipsoid_inverseRadii, vec3 point)\n{\n    vec3 scaled = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(point, 1.0)).xyz;\n    return (dot(scaled, scaled) <= 1.0);\n}\n"},748664:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_ellipsoidWgs84TextureCoordinates\n * @glslFunction\n */\nvec2 czm_ellipsoidWgs84TextureCoordinates(vec3 normal)\n{\n    return vec2(atan(normal.y, normal.x) * czm_oneOverTwoPi + 0.5, asin(normal.z) * czm_oneOverPi + 0.5);\n}\n"},688519:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Compares <code>left</code> and <code>right</code> componentwise. Returns <code>true</code>\n * if they are within <code>epsilon</code> and <code>false</code> otherwise. The inputs\n * <code>left</code> and <code>right</code> can be <code>float</code>s, <code>vec2</code>s,\n * <code>vec3</code>s, or <code>vec4</code>s.\n *\n * @name czm_equalsEpsilon\n * @glslFunction\n *\n * @param {} left The first vector.\n * @param {} right The second vector.\n * @param {float} epsilon The epsilon to use for equality testing.\n * @returns {bool} <code>true</code> if the components are within <code>epsilon</code> and <code>false</code> otherwise.\n *\n * @example\n * // GLSL declarations\n * bool czm_equalsEpsilon(float left, float right, float epsilon);\n * bool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon);\n * bool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon);\n * bool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon);\n */\nbool czm_equalsEpsilon(vec4 left, vec4 right, float epsilon) {\n    return all(lessThanEqual(abs(left - right), vec4(epsilon)));\n}\n\nbool czm_equalsEpsilon(vec3 left, vec3 right, float epsilon) {\n    return all(lessThanEqual(abs(left - right), vec3(epsilon)));\n}\n\nbool czm_equalsEpsilon(vec2 left, vec2 right, float epsilon) {\n    return all(lessThanEqual(abs(left - right), vec2(epsilon)));\n}\n\nbool czm_equalsEpsilon(float left, float right, float epsilon) {\n    return (abs(left - right) <= epsilon);\n}\n"},850728:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_eyeOffset\n * @glslFunction\n *\n * @param {vec4} positionEC DOC_TBA.\n * @param {vec3} eyeOffset DOC_TBA.\n *\n * @returns {vec4} DOC_TBA.\n */\nvec4 czm_eyeOffset(vec4 positionEC, vec3 eyeOffset)\n{\n    // This equation is approximate in x and y.\n    vec4 p = positionEC;\n    vec4 zEyeOffset = normalize(p) * eyeOffset.z;\n    p.xy += eyeOffset.xy + zEyeOffset.xy;\n    p.z += zEyeOffset.z;\n    return p;\n}\n"},698679:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Transforms a position from eye to window coordinates.  The transformation\n * from eye to clip coordinates is done using {@link czm_projection}.\n * The transform from normalized device coordinates to window coordinates is\n * done using {@link czm_viewportTransformation}, which assumes a depth range\n * of <code>near = 0</code> and <code>far = 1</code>.\n * <br /><br />\n * This transform is useful when there is a need to manipulate window coordinates\n * in a vertex shader as done by {@link BillboardCollection}.\n *\n * @name czm_eyeToWindowCoordinates\n * @glslFunction\n *\n * @param {vec4} position The position in eye coordinates to transform.\n *\n * @returns {vec4} The transformed position in window coordinates.\n *\n * @see czm_modelToWindowCoordinates\n * @see czm_projection\n * @see czm_viewportTransformation\n * @see BillboardCollection\n *\n * @example\n * vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\n */\nvec4 czm_eyeToWindowCoordinates(vec4 positionEC)\n{\n    vec4 q = czm_projection * positionEC;                        // clip coordinates\n    q.xyz /= q.w;                                                // normalized device coordinates\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\n    return q;\n}\n"},49509:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Approxiamtes atan over the range [0, 1]. Safe to flip output for negative input.\n *\n * Based on Michal Drobot's approximation from ShaderFastLibs, which in turn is based on\n * \"Efficient approximations for the arctangent function,\" Rajan, S. Sichun Wang Inkol, R. Joyal, A., May 2006.\n * Adapted from ShaderFastLibs under MIT License.\n *\n * Chosen for the following characteristics over range [0, 1]:\n * - basically no error at 0 and 1, important for getting around range limit (naive atan2 via atan requires infinite range atan)\n * - no visible artifacts from first-derivative discontinuities, unlike latitude via range-reduced sqrt asin approximations (at equator)\n *\n * The original code is x * (-0.1784 * abs(x) - 0.0663 * x * x + 1.0301);\n * Removed the abs() in here because it isn't needed, the input range is guaranteed as [0, 1] by how we're approximating atan2.\n *\n * @name czm_fastApproximateAtan\n * @glslFunction\n *\n * @param {float} x Value between 0 and 1 inclusive.\n *\n * @returns {float} Approximation of atan(x)\n */\nfloat czm_fastApproximateAtan(float x) {\n    return x * (-0.1784 * x - 0.0663 * x * x + 1.0301);\n}\n\n/**\n * Approximation of atan2.\n *\n * Range reduction math based on nvidia's cg reference implementation for atan2: http://developer.download.nvidia.com/cg/atan2.html\n * However, we replaced their atan curve with Michael Drobot's (see above).\n *\n * @name czm_fastApproximateAtan\n * @glslFunction\n *\n * @param {float} x Value between -1 and 1 inclusive.\n * @param {float} y Value between -1 and 1 inclusive.\n *\n * @returns {float} Approximation of atan2(x, y)\n */\nfloat czm_fastApproximateAtan(float x, float y) {\n    // atan approximations are usually only reliable over [-1, 1], or, in our case, [0, 1] due to modifications.\n    // So range-reduce using abs and by flipping whether x or y is on top.\n    float t = abs(x); // t used as swap and atan result.\n    float opposite = abs(y);\n    float adjacent = max(t, opposite);\n    opposite = min(t, opposite);\n\n    t = czm_fastApproximateAtan(opposite / adjacent);\n\n    // Undo range reduction\n    t = czm_branchFreeTernary(abs(y) > abs(x), czm_piOverTwo - t, t);\n    t = czm_branchFreeTernary(x < 0.0, czm_pi - t, t);\n    t = czm_branchFreeTernary(y < 0.0, -t, t);\n    return t;\n}\n"},22485:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Gets the color with fog at a distance from the camera.\n *\n * @name czm_fog\n * @glslFunction\n *\n * @param {float} distanceToCamera The distance to the camera in meters.\n * @param {vec3} color The original color.\n * @param {vec3} fogColor The color of the fog.\n *\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\n */\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor)\n{\n    float scalar = distanceToCamera * czm_fogDensity;\n    float fog = 1.0 - exp(-(scalar * scalar));\n    return mix(color, fogColor, fog);\n}\n\n/**\n * Gets the color with fog at a distance from the camera.\n *\n * @name czm_fog\n * @glslFunction\n *\n * @param {float} distanceToCamera The distance to the camera in meters.\n * @param {vec3} color The original color.\n * @param {vec3} fogColor The color of the fog.\n * @param {float} fogModifierConstant A constant to modify the appearance of fog.\n *\n * @returns {vec3} The color adjusted for fog at the distance from the camera.\n */\nvec3 czm_fog(float distanceToCamera, vec3 color, vec3 fogColor, float fogModifierConstant)\n{\n    float scalar = distanceToCamera * czm_fogDensity;\n    float fog = 1.0 - exp(-((fogModifierConstant * scalar + fogModifierConstant) * (scalar * (1.0 + fogModifierConstant))));\n    return mix(color, fogColor, fog);\n}\n"},892270:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts a color from RGB space to linear space.\n *\n * @name czm_gammaCorrect\n * @glslFunction\n *\n * @param {vec3} color The color in RGB space.\n * @returns {vec3} The color in linear space.\n */\nvec3 czm_gammaCorrect(vec3 color) {\n#ifdef HDR\n    color = pow(color, vec3(czm_gamma));\n#endif\n    return color;\n}\n\nvec4 czm_gammaCorrect(vec4 color) {\n#ifdef HDR\n    color.rgb = pow(color.rgb, vec3(czm_gamma));\n#endif\n    return color;\n}\n"},159197:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_geodeticSurfaceNormal\n * @glslFunction\n *\n * @param {vec3} positionOnEllipsoid DOC_TBA\n * @param {vec3} ellipsoidCenter DOC_TBA\n * @param {vec3} oneOverEllipsoidRadiiSquared DOC_TBA\n * \n * @returns {vec3} DOC_TBA.\n */\nvec3 czm_geodeticSurfaceNormal(vec3 positionOnEllipsoid, vec3 ellipsoidCenter, vec3 oneOverEllipsoidRadiiSquared)\n{\n    return normalize((positionOnEllipsoid - ellipsoidCenter) * oneOverEllipsoidRadiiSquared);\n}\n"},567739:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * An czm_material with default values. Every material's czm_getMaterial\n * should use this default material as a base for the material it returns.\n * The default normal value is given by materialInput.normalEC.\n *\n * @name czm_getDefaultMaterial\n * @glslFunction\n *\n * @param {czm_materialInput} input The input used to construct the default material.\n *\n * @returns {czm_material} The default material.\n *\n * @see czm_materialInput\n * @see czm_material\n * @see czm_getMaterial\n */\nczm_material czm_getDefaultMaterial(czm_materialInput materialInput)\n{\n    czm_material material;\n    material.diffuse = vec3(0.0);\n    material.specular = 0.0;\n    material.shininess = 1.0;\n    material.normal = materialInput.normalEC;\n    material.emission = vec3(0.0);\n    material.alpha = 1.0;\n    return material;\n}\n"},495390:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Calculates the intensity of diffusely reflected light.\n *\n * @name czm_getLambertDiffuse\n * @glslFunction\n *\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\n * @param {vec3} normalEC The surface normal in eye coordinates.\n *\n * @returns {float} The intensity of the diffuse reflection.\n *\n * @see czm_phong\n *\n * @example\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\n */\nfloat czm_getLambertDiffuse(vec3 lightDirectionEC, vec3 normalEC)\n{\n    return max(dot(lightDirectionEC, normalEC), 0.0);\n}\n"},345712:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Calculates the specular intensity of reflected light.\n *\n * @name czm_getSpecular\n * @glslFunction\n *\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\n * @param {vec3} toEyeEC Unit vector pointing to the eye position in eye coordinates.\n * @param {vec3} normalEC The surface normal in eye coordinates.\n * @param {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\n *\n * @returns {float} The intensity of the specular highlight.\n *\n * @see czm_phong\n *\n * @example\n * float diffuseIntensity = czm_getLambertDiffuse(lightDirectionEC, normalEC);\n * float specularIntensity = czm_getSpecular(lightDirectionEC, toEyeEC, normalEC, 200);\n * vec3 color = (diffuseColor * diffuseIntensity) + (specularColor * specularIntensity);\n */\nfloat czm_getSpecular(vec3 lightDirectionEC, vec3 toEyeEC, vec3 normalEC, float shininess)\n{\n    vec3 toReflectedLight = reflect(-lightDirectionEC, normalEC);\n    float specular = max(dot(toReflectedLight, toEyeEC), 0.0);\n\n    // pow has undefined behavior if both parameters <= 0.\n    // Prevent this by making sure shininess is at least czm_epsilon2.\n    return pow(specular, max(shininess, czm_epsilon2));\n}\n"},544674:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @private\n */\nvec4 czm_getWaterNoise(sampler2D normalMap, vec2 uv, float time, float angleInRadians)\n{\n    float cosAngle = cos(angleInRadians);\n    float sinAngle = sin(angleInRadians);\n\n    // time dependent sampling directions\n    vec2 s0 = vec2(1.0/17.0, 0.0);\n    vec2 s1 = vec2(-1.0/29.0, 0.0);\n    vec2 s2 = vec2(1.0/101.0, 1.0/59.0);\n    vec2 s3 = vec2(-1.0/109.0, -1.0/57.0);\n\n    // rotate sampling direction by specified angle\n    s0 = vec2((cosAngle * s0.x) - (sinAngle * s0.y), (sinAngle * s0.x) + (cosAngle * s0.y));\n    s1 = vec2((cosAngle * s1.x) - (sinAngle * s1.y), (sinAngle * s1.x) + (cosAngle * s1.y));\n    s2 = vec2((cosAngle * s2.x) - (sinAngle * s2.y), (sinAngle * s2.x) + (cosAngle * s2.y));\n    s3 = vec2((cosAngle * s3.x) - (sinAngle * s3.y), (sinAngle * s3.x) + (cosAngle * s3.y));\n\n    vec2 uv0 = (uv/103.0) + (time * s0);\n    vec2 uv1 = uv/107.0 + (time * s1) + vec2(0.23);\n    vec2 uv2 = uv/vec2(897.0, 983.0) + (time * s2) + vec2(0.51);\n    vec2 uv3 = uv/vec2(991.0, 877.0) + (time * s3) + vec2(0.71);\n\n    uv0 = fract(uv0);\n    uv1 = fract(uv1);\n    uv2 = fract(uv2);\n    uv3 = fract(uv3);\n    vec4 noise = (texture2D(normalMap, uv0)) +\n                 (texture2D(normalMap, uv1)) +\n                 (texture2D(normalMap, uv2)) +\n                 (texture2D(normalMap, uv3));\n\n    // average and scale to between -1 and 1\n    return ((noise / 4.0) - 0.5) * 2.0;\n}\n"},549074:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Adjusts the hue of a color.\n * \n * @name czm_hue\n * @glslFunction\n * \n * @param {vec3} rgb The color.\n * @param {float} adjustment The amount to adjust the hue of the color in radians.\n *\n * @returns {float} The color with the hue adjusted.\n *\n * @example\n * vec3 adjustHue = czm_hue(color, czm_pi); // The same as czm_hue(color, -czm_pi)\n */\nvec3 czm_hue(vec3 rgb, float adjustment)\n{\n    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,\n                            0.595716, -0.274453, -0.321263,\n                            0.211456, -0.522591,  0.311135);\n    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,\n                            1.0, -0.2721, -0.6474,\n                            1.0, -1.107,   1.7046);\n    \n    vec3 yiq = toYIQ * rgb;\n    float hue = atan(yiq.z, yiq.y) + adjustment;\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\n    \n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\n    return toRGB * color;\n}\n"},867403:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts a color in linear space to RGB space.\n *\n * @name czm_inverseGamma\n * @glslFunction\n *\n * @param {vec3} color The color in linear space.\n * @returns {vec3} The color in RGB space.\n */\nvec3 czm_inverseGamma(vec3 color) {\n    return pow(color, vec3(1.0 / czm_gamma));\n}\n"},117430:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Determines if a time interval is empty.\n *\n * @name czm_isEmpty\n * @glslFunction \n * \n * @param {czm_raySegment} interval The interval to test.\n * \n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\n *\n * @example\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\n */\nbool czm_isEmpty(czm_raySegment interval)\n{\n    return (interval.stop < 0.0);\n}\n"},955410:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Determines if a time interval is empty.\n *\n * @name czm_isFull\n * @glslFunction \n * \n * @param {czm_raySegment} interval The interval to test.\n * \n * @returns {bool} <code>true</code> if the time interval is empty; otherwise, <code>false</code>.\n *\n * @example\n * bool b0 = czm_isEmpty(czm_emptyRaySegment);      // true\n * bool b1 = czm_isEmpty(czm_raySegment(0.0, 1.0)); // false\n * bool b2 = czm_isEmpty(czm_raySegment(1.0, 1.0)); // false, contains 1.0.\n */\nbool czm_isFull(czm_raySegment interval)\n{\n    return (interval.start == 0.0 && interval.stop == czm_infinity);\n}\n"},642140:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes the fraction of a Web Wercator rectangle at which a given geodetic latitude is located.\n *\n * @name czm_latitudeToWebMercatorFraction\n * @glslFunction\n *\n * @param {float} latitude The geodetic latitude, in radians.\n * @param {float} southMercatorY The Web Mercator coordinate of the southern boundary of the rectangle.\n * @param {float} oneOverMercatorHeight The total height of the rectangle in Web Mercator coordinates.\n *\n * @returns {float} The fraction of the rectangle at which the latitude occurs.  If the latitude is the southern\n *          boundary of the rectangle, the return value will be zero.  If it is the northern boundary, the return\n *          value will be 1.0.  Latitudes in between are mapped according to the Web Mercator projection.\n */ \nfloat czm_latitudeToWebMercatorFraction(float latitude, float southMercatorY, float oneOverMercatorHeight)\n{\n    float sinLatitude = sin(latitude);\n    float mercatorY = 0.5 * log((1.0 + sinLatitude) / (1.0 - sinLatitude));\n    \n    return (mercatorY - southMercatorY) * oneOverMercatorHeight;\n}\n"},858930:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes distance from an point in 2D to a line in 2D.\n *\n * @name czm_lineDistance\n * @glslFunction\n *\n * param {vec2} point1 A point along the line.\n * param {vec2} point2 A point along the line.\n * param {vec2} point A point that may or may not be on the line.\n * returns {float} The distance from the point to the line.\n */\nfloat czm_lineDistance(vec2 point1, vec2 point2, vec2 point) {\n    return abs((point2.y - point1.y) * point.x - (point2.x - point1.x) * point.y + point2.x * point1.y - point2.y * point1.x) / distance(point2, point1);\n}\n"},717374:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts a linear RGB color to an sRGB color.\n *\n * @param {vec3|vec4} linearIn The color in linear color space.\n * @returns {vec3|vec4} The color in sRGB color space. The vector type matches the input.\n */\nvec3 czm_linearToSrgb(vec3 linearIn) \n{\n    return pow(linearIn, vec3(1.0/2.2));\n}\n\nvec4 czm_linearToSrgb(vec4 linearIn) \n{\n    vec3 srgbOut = pow(linearIn.rgb, vec3(1.0/2.2));\n    return vec4(srgbOut, linearIn.a);\n}\n"},216461:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes the luminance of a color. \n *\n * @name czm_luminance\n * @glslFunction\n *\n * @param {vec3} rgb The color.\n * \n * @returns {float} The luminance.\n *\n * @example\n * float light = czm_luminance(vec3(0.0)); // 0.0\n * float dark = czm_luminance(vec3(1.0));  // ~1.0 \n */\nfloat czm_luminance(vec3 rgb)\n{\n    // Algorithm from Chapter 10 of Graphics Shaders.\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgb, W);\n}\n"},602324:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes the size of a pixel in meters at a distance from the eye.\n * <p>\n * Use this version when passing in a custom pixel ratio. For example, passing in 1.0 will return meters per native device pixel.\n * </p>\n * @name czm_metersPerPixel\n * @glslFunction\n *\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\n * @param {float} pixelRatio The scaling factor from pixel space to coordinate space\n *\n * @returns {float} The meters per pixel at positionEC.\n */\nfloat czm_metersPerPixel(vec4 positionEC, float pixelRatio)\n{\n    float width = czm_viewport.z;\n    float height = czm_viewport.w;\n    float pixelWidth;\n    float pixelHeight;\n\n    float top = czm_frustumPlanes.x;\n    float bottom = czm_frustumPlanes.y;\n    float left = czm_frustumPlanes.z;\n    float right = czm_frustumPlanes.w;\n\n    if (czm_sceneMode == czm_sceneMode2D || czm_orthographicIn3D == 1.0)\n    {\n        float frustumWidth = right - left;\n        float frustumHeight = top - bottom;\n        pixelWidth = frustumWidth / width;\n        pixelHeight = frustumHeight / height;\n    }\n    else\n    {\n        float distanceToPixel = -positionEC.z;\n        float inverseNear = 1.0 / czm_currentFrustum.x;\n        float tanTheta = top * inverseNear;\n        pixelHeight = 2.0 * distanceToPixel * tanTheta / height;\n        tanTheta = right * inverseNear;\n        pixelWidth = 2.0 * distanceToPixel * tanTheta / width;\n    }\n\n    return max(pixelWidth, pixelHeight) * pixelRatio;\n}\n\n/**\n * Computes the size of a pixel in meters at a distance from the eye.\n * <p>\n * Use this version when scaling by pixel ratio.\n * </p>\n * @name czm_metersPerPixel\n * @glslFunction\n *\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\n *\n * @returns {float} The meters per pixel at positionEC.\n */\nfloat czm_metersPerPixel(vec4 positionEC)\n{\n    return czm_metersPerPixel(positionEC, czm_pixelRatio);\n}\n"},283225:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Transforms a position from model to window coordinates.  The transformation\n * from model to clip coordinates is done using {@link czm_modelViewProjection}.\n * The transform from normalized device coordinates to window coordinates is\n * done using {@link czm_viewportTransformation}, which assumes a depth range\n * of <code>near = 0</code> and <code>far = 1</code>.\n * <br /><br />\n * This transform is useful when there is a need to manipulate window coordinates\n * in a vertex shader as done by {@link BillboardCollection}.\n * <br /><br />\n * This function should not be confused with {@link czm_viewportOrthographic},\n * which is an orthographic projection matrix that transforms from window \n * coordinates to clip coordinates.\n *\n * @name czm_modelToWindowCoordinates\n * @glslFunction\n *\n * @param {vec4} position The position in model coordinates to transform.\n *\n * @returns {vec4} The transformed position in window coordinates.\n *\n * @see czm_eyeToWindowCoordinates\n * @see czm_modelViewProjection\n * @see czm_viewportTransformation\n * @see czm_viewportOrthographic\n * @see BillboardCollection\n *\n * @example\n * vec4 positionWC = czm_modelToWindowCoordinates(positionMC);\n */\nvec4 czm_modelToWindowCoordinates(vec4 position)\n{\n    vec4 q = czm_modelViewProjection * position;                // clip coordinates\n    q.xyz /= q.w;                                                // normalized device coordinates\n    q.xyz = (czm_viewportTransformation * vec4(q.xyz, 1.0)).xyz; // window coordinates\n    return q;\n}\n"},453921:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_multiplyWithColorBalance\n * @glslFunction\n */\nvec3 czm_multiplyWithColorBalance(vec3 left, vec3 right)\n{\n    // Algorithm from Chapter 10 of Graphics Shaders.\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    \n    vec3 target = left * right;\n    float leftLuminance = dot(left, W);\n    float rightLuminance = dot(right, W);\n    float targetLuminance = dot(target, W);\n    \n    return ((leftLuminance + rightLuminance) / (2.0 * targetLuminance)) * target;\n}\n"},350867:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes a value that scales with distance.  The scaling is clamped at the near and\n * far distances, and does not extrapolate.  This function works with the\n * {@link NearFarScalar} JavaScript class.\n *\n * @name czm_nearFarScalar\n * @glslFunction\n *\n * @param {vec4} nearFarScalar A vector with 4 components: Near distance (x), Near value (y), Far distance (z), Far value (w).\n * @param {float} cameraDistSq The square of the current distance from the camera.\n *\n * @returns {float} The value at this distance.\n */\nfloat czm_nearFarScalar(vec4 nearFarScalar, float cameraDistSq)\n{\n    float valueAtMin = nearFarScalar.y;\n    float valueAtMax = nearFarScalar.w;\n    float nearDistanceSq = nearFarScalar.x * nearFarScalar.x;\n    float farDistanceSq = nearFarScalar.z * nearFarScalar.z;\n\n    float t = (cameraDistSq - nearDistanceSq) / (farDistanceSq - nearDistanceSq);\n\n    t = pow(clamp(t, 0.0, 1.0), 0.2);\n\n    return mix(valueAtMin, valueAtMax, t);\n}\n"},471080:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=" /**\n  * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component Cartesian vector.\n  * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n  * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\n  *\n  * @name czm_octDecode\n  * @param {vec2} encoded The oct-encoded, unit-length vector\n  * @param {float} range The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n  * @returns {vec3} The decoded and normalized vector\n  */\n  vec3 czm_octDecode(vec2 encoded, float range)\n  {\n      if (encoded.x == 0.0 && encoded.y == 0.0) {\n          return vec3(0.0, 0.0, 0.0);\n      }\n\n     encoded = encoded / range * 2.0 - 1.0;\n     vec3 v = vec3(encoded.x, encoded.y, 1.0 - abs(encoded.x) - abs(encoded.y));\n     if (v.z < 0.0)\n     {\n         v.xy = (1.0 - abs(v.yx)) * czm_signNotZero(v.xy);\n     }\n\n     return normalize(v);\n  }\n\n/**\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component Cartesian vector.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\n *\n * @name czm_octDecode\n * @param {vec2} encoded The oct-encoded, unit-length vector\n * @returns {vec3} The decoded and normalized vector\n */\n vec3 czm_octDecode(vec2 encoded)\n {\n    return czm_octDecode(encoded, 255.0);\n }\n\n /**\n * Decodes a unit-length vector in 'oct' encoding packed into a floating-point number to a normalized 3-component Cartesian vector.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\n *\n * @name czm_octDecode\n * @param {float} encoded The oct-encoded, unit-length vector\n * @returns {vec3} The decoded and normalized vector\n */\n vec3 czm_octDecode(float encoded)\n {\n    float temp = encoded / 256.0;\n    float x = floor(temp);\n    float y = (temp - x) * 256.0;\n    return czm_octDecode(vec2(x, y));\n }\n\n/**\n * Decodes three unit-length vectors in 'oct' encoding packed into two floating-point numbers to normalized 3-component Cartesian vectors.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: http://jcgt.org/published/0003/02/01/\n *\n * @name czm_octDecode\n * @param {vec2} encoded The packed oct-encoded, unit-length vectors.\n * @param {vec3} vector1 One decoded and normalized vector.\n * @param {vec3} vector2 One decoded and normalized vector.\n * @param {vec3} vector3 One decoded and normalized vector.\n */\n  void czm_octDecode(vec2 encoded, out vec3 vector1, out vec3 vector2, out vec3 vector3)\n {\n    float temp = encoded.x / 65536.0;\n    float x = floor(temp);\n    float encodedFloat1 = (temp - x) * 65536.0;\n\n    temp = encoded.y / 65536.0;\n    float y = floor(temp);\n    float encodedFloat2 = (temp - y) * 65536.0;\n\n    vector1 = czm_octDecode(encodedFloat1);\n    vector2 = czm_octDecode(encodedFloat2);\n    vector3 = czm_octDecode(vec2(x, y));\n }\n\n"},420132:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Packs a depth value into a vec3 that can be represented by unsigned bytes.\n *\n * @name czm_packDepth\n * @glslFunction\n *\n * @param {float} depth The floating-point depth.\n * @returns {vec3} The packed depth.\n */\nvec4 czm_packDepth(float depth)\n{\n    // See Aras Pranckevičius' post Encoding Floats to RGBA\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n    enc = fract(enc);\n    enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n    return enc;\n}\n"},688549:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="vec3 lambertianDiffuse(vec3 diffuseColor)\n{\n    return diffuseColor / czm_pi;\n}\n\nvec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH)\n{\n    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\n}\n\nfloat smithVisibilityG1(float NdotV, float roughness)\n{\n    // this is the k value for direct lighting.\n    // for image based lighting it will be roughness^2 / 2\n    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\n    return NdotV / (NdotV * (1.0 - k) + k);\n}\n\nfloat smithVisibilityGGX(float roughness, float NdotL, float NdotV)\n{\n    return (\n        smithVisibilityG1(NdotL, roughness) *\n        smithVisibilityG1(NdotV, roughness)\n    );\n}\n\nfloat GGX(float roughness, float NdotH)\n{\n    float roughnessSquared = roughness * roughness;\n    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\n    return roughnessSquared / (czm_pi * f * f);\n}\n\n/**\n * Compute the diffuse and specular contributions using physically based\n * rendering. This function only handles direct lighting.\n * <p>\n * This function only handles the lighting calculations. Metallic/roughness\n * and specular/glossy must be handled separately. See {@czm_pbrMetallicRoughnessMaterial}, {@czm_pbrSpecularGlossinessMaterial} and {@czm_defaultPbrMaterial}\n * </p>\n *\n * @name czm_pbrlighting\n * @glslFunction\n *\n * @param {vec3} positionEC The position of the fragment in eye coordinates\n * @param {vec3} normalEC The surface normal in eye coordinates\n * @param {vec3} lightDirectionEC Unit vector pointing to the light source in eye coordinates.\n * @param {vec3} lightColorHdr radiance of the light source. This is a HDR value.\n * @param {czm_pbrParameters} The computed PBR parameters.\n * @return {vec3} The computed HDR color\n *\n * @example\n * czm_pbrParameters pbrParameters = czm_pbrMetallicRoughnessMaterial(\n *  baseColor,\n *  metallic,\n *  roughness\n * );\n * vec3 color = czm_pbrlighting(\n *  positionEC,\n *  normalEC,\n *  lightDirectionEC,\n *  lightColorHdr,\n *  pbrParameters);\n */\nvec3 czm_pbrLighting(\n    vec3 positionEC,\n    vec3 normalEC,\n    vec3 lightDirectionEC,\n    vec3 lightColorHdr,\n    czm_pbrParameters pbrParameters\n)\n{\n    vec3 v = -normalize(positionEC);\n    vec3 l = normalize(lightDirectionEC);\n    vec3 h = normalize(v + l);\n    vec3 n = normalEC;\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\n    float NdotV = abs(dot(n, v)) + 0.001;\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\n\n    vec3 f0 = pbrParameters.f0;\n    float reflectance = max(max(f0.r, f0.g), f0.b);\n    vec3 f90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\n    vec3 F = fresnelSchlick2(f0, f90, VdotH);\n\n    float alpha = pbrParameters.roughness;\n    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\n    float D = GGX(alpha, NdotH);\n    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\n\n    vec3 diffuseColor = pbrParameters.diffuseColor;\n    // F here represents the specular contribution\n    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\n\n    // Lo = (diffuse + specular) * Li * NdotL\n    return (diffuseContribution + specularContribution) * NdotL * lightColorHdr;\n}\n"},474361:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Compute parameters for physically based rendering using the\n * metallic/roughness workflow. All inputs are linear; sRGB texture values must\n * be decoded beforehand\n *\n * @name czm_pbrMetallicRoughnessMaterial\n * @glslFunction\n *\n * @param {vec3} baseColor For dielectrics, this is the base color. For metals, this is the f0 value (reflectance at normal incidence)\n * @param {float} metallic 0.0 indicates dielectric. 1.0 indicates metal. Values in between are allowed (e.g. to model rust or dirt);\n * @param {float} roughness A value between 0.0 and 1.0\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\n */\nczm_pbrParameters czm_pbrMetallicRoughnessMaterial(\n    vec3 baseColor,\n    float metallic,\n    float roughness\n) \n{\n    czm_pbrParameters results;\n\n    // roughness is authored as perceptual roughness\n    // square it to get material roughness\n    roughness = clamp(roughness, 0.0, 1.0);\n    results.roughness = roughness * roughness;\n\n    // dielectrics us f0 = 0.04, metals use albedo as f0\n    metallic = clamp(metallic, 0.0, 1.0);\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\n    vec3 f0 = mix(REFLECTANCE_DIELECTRIC, baseColor, metallic);\n    results.f0 = f0;\n\n    // diffuse only applies to dielectrics.\n    results.diffuseColor = baseColor * (1.0 - f0) * (1.0 - metallic);\n\n    return results;\n}\n"},286215:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Compute parameters for physically based rendering using the\n * specular/glossy workflow. All inputs are linear; sRGB texture values must\n * be decoded beforehand\n *\n * @name czm_pbrSpecularGlossinessMaterial\n * @glslFunction\n *\n * @param {vec3} diffuse The diffuse color for dielectrics (non-metals)\n * @param {vec3} specular The reflectance at normal incidence (f0)\n * @param {float} glossiness A number from 0.0 to 1.0 indicating how smooth the surface is.\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\n */\nczm_pbrParameters czm_pbrSpecularGlossinessMaterial(\n    vec3 diffuse,\n    vec3 specular,\n    float glossiness\n) \n{\n    czm_pbrParameters results;\n\n    // glossiness is the opposite of roughness, but easier for artists to use.\n    float roughness = 1.0 - glossiness;\n    results.roughness = roughness * roughness;\n\n    results.diffuseColor = diffuse * (1.0 - max(max(specular.r, specular.g), specular.b));\n    results.f0 = specular;\n\n    return results;\n}\n"},940324:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="float czm_private_getLambertDiffuseOfMaterial(vec3 lightDirectionEC, czm_material material)\n{\n    return czm_getLambertDiffuse(lightDirectionEC, material.normal);\n}\n\nfloat czm_private_getSpecularOfMaterial(vec3 lightDirectionEC, vec3 toEyeEC, czm_material material)\n{\n    return czm_getSpecular(lightDirectionEC, toEyeEC, material.normal, material.shininess);\n}\n\n/**\n * Computes a color using the Phong lighting model.\n *\n * @name czm_phong\n * @glslFunction\n *\n * @param {vec3} toEye A normalized vector from the fragment to the eye in eye coordinates.\n * @param {czm_material} material The fragment's material.\n *\n * @returns {vec4} The computed color.\n *\n * @example\n * vec3 positionToEyeEC = // ...\n * czm_material material = // ...\n * vec3 lightDirectionEC = // ...\n * gl_FragColor = czm_phong(normalize(positionToEyeEC), material, lightDirectionEC);\n *\n * @see czm_getMaterial\n */\nvec4 czm_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\n{\n    // Diffuse from directional light sources at eye (for top-down)\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 0.0, 1.0), material);\n    if (czm_sceneMode == czm_sceneMode3D) {\n        // (and horizon views in 3D)\n        diffuse += czm_private_getLambertDiffuseOfMaterial(vec3(0.0, 1.0, 0.0), material);\n    }\n\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\n\n    // Temporary workaround for adding ambient.\n    vec3 materialDiffuse = material.diffuse * 0.5;\n\n    vec3 ambient = materialDiffuse;\n    vec3 color = ambient + material.emission;\n    color += materialDiffuse * diffuse * czm_lightColor;\n    color += material.specular * specular * czm_lightColor;\n\n    return vec4(color, material.alpha);\n}\n\nvec4 czm_private_phong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\n{\n    float diffuse = czm_private_getLambertDiffuseOfMaterial(lightDirectionEC, material);\n    float specular = czm_private_getSpecularOfMaterial(lightDirectionEC, toEye, material);\n\n    vec3 ambient = vec3(0.0);\n    vec3 color = ambient + material.emission;\n    color += material.diffuse * diffuse * czm_lightColor;\n    color += material.specular * specular * czm_lightColor;\n\n    return vec4(color, material.alpha);\n}\n"},555546:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes distance from a point to a plane.\n *\n * @name czm_planeDistance\n * @glslFunction\n *\n * param {vec4} plane A Plane in Hessian Normal Form. See Plane.js\n * param {vec3} point A point in the same space as the plane.\n * returns {float} The distance from the point to the plane.\n */\nfloat czm_planeDistance(vec4 plane, vec3 point) {\n    return (dot(plane.xyz, point) + plane.w);\n}\n\n/**\n * Computes distance from a point to a plane.\n *\n * @name czm_planeDistance\n * @glslFunction\n *\n * param {vec3} planeNormal Normal for a plane in Hessian Normal Form. See Plane.js\n * param {float} planeDistance Distance for a plane in Hessian Normal form. See Plane.js\n * param {vec3} point A point in the same space as the plane.\n * returns {float} The distance from the point to the plane.\n */\nfloat czm_planeDistance(vec3 planeNormal, float planeDistance, vec3 point) {\n    return (dot(planeNormal, point) + planeDistance);\n}\n"},110880:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes the point along a ray at the given time.  <code>time</code> can be positive, negative, or zero.\n *\n * @name czm_pointAlongRay\n * @glslFunction\n *\n * @param {czm_ray} ray The ray to compute the point along.\n * @param {float} time The time along the ray.\n * \n * @returns {vec3} The point along the ray at the given time.\n * \n * @example\n * czm_ray ray = czm_ray(vec3(0.0), vec3(1.0, 0.0, 0.0)); // origin, direction\n * vec3 v = czm_pointAlongRay(ray, 2.0); // (2.0, 0.0, 0.0)\n */\nvec3 czm_pointAlongRay(czm_ray ray, float time)\n{\n    return ray.origin + (time * ray.direction);\n}\n"},311982:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_rayEllipsoidIntersectionInterval\n * @glslFunction\n */\nczm_raySegment czm_rayEllipsoidIntersectionInterval(czm_ray ray, vec3 ellipsoid_center, vec3 ellipsoid_inverseRadii)\n{\n   // ray and ellipsoid center in eye coordinates.  radii in model coordinates.\n    vec3 q = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.origin, 1.0)).xyz;\n    vec3 w = ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ray.direction, 0.0)).xyz;\n\n    q = q - ellipsoid_inverseRadii * (czm_inverseModelView * vec4(ellipsoid_center, 1.0)).xyz;\n\n    float q2 = dot(q, q);\n    float qw = dot(q, w);\n\n    if (q2 > 1.0) // Outside ellipsoid.\n    {\n        if (qw >= 0.0) // Looking outward or tangent (0 intersections).\n        {\n            return czm_emptyRaySegment;\n        }\n        else // qw < 0.0.\n        {\n            float qw2 = qw * qw;\n            float difference = q2 - 1.0; // Positively valued.\n            float w2 = dot(w, w);\n            float product = w2 * difference;\n\n            if (qw2 < product) // Imaginary roots (0 intersections).\n            {\n                return czm_emptyRaySegment;\n            }\n            else if (qw2 > product) // Distinct roots (2 intersections).\n            {\n                float discriminant = qw * qw - product;\n                float temp = -qw + sqrt(discriminant); // Avoid cancellation.\n                float root0 = temp / w2;\n                float root1 = difference / temp;\n                if (root0 < root1)\n                {\n                    czm_raySegment i = czm_raySegment(root0, root1);\n                    return i;\n                }\n                else\n                {\n                    czm_raySegment i = czm_raySegment(root1, root0);\n                    return i;\n                }\n            }\n            else // qw2 == product.  Repeated roots (2 intersections).\n            {\n                float root = sqrt(difference / w2);\n                czm_raySegment i = czm_raySegment(root, root);\n                return i;\n            }\n        }\n    }\n    else if (q2 < 1.0) // Inside ellipsoid (2 intersections).\n    {\n        float difference = q2 - 1.0; // Negatively valued.\n        float w2 = dot(w, w);\n        float product = w2 * difference; // Negatively valued.\n        float discriminant = qw * qw - product;\n        float temp = -qw + sqrt(discriminant); // Positively valued.\n        czm_raySegment i = czm_raySegment(0.0, temp / w2);\n        return i;\n    }\n    else // q2 == 1.0. On ellipsoid.\n    {\n        if (qw < 0.0) // Looking inward.\n        {\n            float w2 = dot(w, w);\n            czm_raySegment i = czm_raySegment(0.0, -qw / w2);\n            return i;\n        }\n        else // qw >= 0.0.  Looking outward or tangent.\n        {\n            return czm_emptyRaySegment;\n        }\n    }\n}\n"},140878:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="float czm_readDepth(sampler2D depthTexture, vec2 texCoords)\n{\n    return czm_reverseLogDepth(texture2D(depthTexture, texCoords).r);\n}\n"},468187:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Reads a value previously transformed with {@link czm_writeNonPerspective}\n * by dividing it by `w`, the value used in the perspective divide.\n * This function is intended to be called in a fragment shader to access a\n * `varying` that should not be subject to perspective interpolation.\n * For example, screen-space texture coordinates. The value should have been\n * previously written in the vertex shader with a call to\n * {@link czm_writeNonPerspective}.\n *\n * @name czm_readNonPerspective\n * @glslFunction\n *\n * @param {float|vec2|vec3|vec4} value The non-perspective value to be read.\n * @param {float} oneOverW One over the perspective divide value, `w`. Usually this is simply `gl_FragCoord.w`.\n * @returns {float|vec2|vec3|vec4} The usable value.\n */\nfloat czm_readNonPerspective(float value, float oneOverW) {\n    return value * oneOverW;\n}\n\nvec2 czm_readNonPerspective(vec2 value, float oneOverW) {\n    return value * oneOverW;\n}\n\nvec3 czm_readNonPerspective(vec3 value, float oneOverW) {\n    return value * oneOverW;\n}\n\nvec4 czm_readNonPerspective(vec4 value, float oneOverW) {\n    return value * oneOverW;\n}\n"},24349:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="float czm_reverseLogDepth(float logZ)\n{\n#ifdef LOG_DEPTH\n    float near = czm_currentFrustum.x;\n    float far = czm_currentFrustum.y;\n    float log2Depth = logZ * czm_log2FarDepthFromNearPlusOne;\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\n    return far * (1.0 - near / (depthFromNear + near)) / (far - near);\n#endif\n    return logZ;\n}\n"},819964:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Samples the 4 neighboring pixels and return the weighted average.\n *\n * @private\n */\nvec3 czm_sampleOctahedralProjectionWithFiltering(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod)\n{\n    direction /= dot(vec3(1.0), abs(direction));\n    vec2 rev = abs(direction.zx) - vec2(1.0);\n    vec2 neg = vec2(direction.x < 0.0 ? rev.x : -rev.x,\n                    direction.z < 0.0 ? rev.y : -rev.y);\n    vec2 uv = direction.y < 0.0 ? neg : direction.xz;\n    vec2 coord = 0.5 * uv + vec2(0.5);\n    vec2 pixel = 1.0 / textureSize;\n\n    if (lod > 0.0)\n    {\n        // Each subseqeuent mip level is half the size\n        float scale = 1.0 / pow(2.0, lod);\n        float offset = ((textureSize.y + 1.0) / textureSize.x);\n\n        coord.x *= offset;\n        coord *= scale;\n\n        coord.x += offset + pixel.x;\n        coord.y += (1.0 - (1.0 / pow(2.0, lod - 1.0))) + pixel.y * (lod - 1.0) * 2.0;\n    }\n    else\n    {\n        coord.x *= (textureSize.y / textureSize.x);\n    }\n\n    // Do bilinear filtering\n    #ifndef OES_texture_float_linear\n        vec3 color1 = texture2D(projectedMap, coord + vec2(0.0, pixel.y)).rgb;\n        vec3 color2 = texture2D(projectedMap, coord + vec2(pixel.x, 0.0)).rgb;\n        vec3 color3 = texture2D(projectedMap, coord + pixel).rgb;\n        vec3 color4 = texture2D(projectedMap, coord).rgb;\n\n        vec2 texturePosition = coord * textureSize;\n\n        float fu = fract(texturePosition.x);\n        float fv = fract(texturePosition.y);\n\n        vec3 average1 = mix(color4, color2, fu);\n        vec3 average2 = mix(color1, color3, fu);\n\n        vec3 color = mix(average1, average2, fv);\n    #else\n        vec3 color = texture2D(projectedMap, coord).rgb;\n    #endif\n\n    return color;\n}\n\n\n/**\n * Samples from a cube map that has been projected using an octahedral projection from the given direction.\n *\n * @name czm_sampleOctahedralProjection\n * @glslFunction\n *\n * @param {sampler2D} projectedMap The texture with the octahedral projected cube map.\n * @param {vec2} textureSize The width and height dimensions in pixels of the projected map.\n * @param {vec3} direction The normalized direction used to sample the cube map.\n * @param {float} lod The level of detail to sample.\n * @param {float} maxLod The maximum level of detail.\n * @returns {vec3} The color of the cube map at the direction.\n */\nvec3 czm_sampleOctahedralProjection(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod, float maxLod) {\n    float currentLod = floor(lod + 0.5);\n    float nextLod = min(currentLod + 1.0, maxLod);\n\n    vec3 colorCurrentLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, currentLod);\n    vec3 colorNextLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, nextLod);\n\n    return mix(colorNextLod, colorCurrentLod, nextLod - lod);\n}\n"},348141:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Adjusts the saturation of a color.\n * \n * @name czm_saturation\n * @glslFunction\n * \n * @param {vec3} rgb The color.\n * @param {float} adjustment The amount to adjust the saturation of the color.\n *\n * @returns {float} The color with the saturation adjusted.\n *\n * @example\n * vec3 greyScale = czm_saturation(color, 0.0);\n * vec3 doubleSaturation = czm_saturation(color, 2.0);\n */\nvec3 czm_saturation(vec3 rgb, float adjustment)\n{\n    // Algorithm from Chapter 16 of OpenGL Shading Language\n    const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    vec3 intensity = vec3(dot(rgb, W));\n    return mix(intensity, rgb, adjustment);\n}\n"},411170:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nfloat czm_sampleShadowMap(highp samplerCube shadowMap, vec3 d)\n{\n    return czm_unpackDepth(textureCube(shadowMap, d));\n}\n\nfloat czm_sampleShadowMap(highp sampler2D shadowMap, vec2 uv)\n{\n#ifdef USE_SHADOW_DEPTH_TEXTURE\n    return texture2D(shadowMap, uv).r;\n#else\n    return czm_unpackDepth(texture2D(shadowMap, uv));\n#endif\n}\n\nfloat czm_shadowDepthCompare(samplerCube shadowMap, vec3 uv, float depth)\n{\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\n}\n\nfloat czm_shadowDepthCompare(sampler2D shadowMap, vec2 uv, float depth)\n{\n    return step(depth, czm_sampleShadowMap(shadowMap, uv));\n}\n"},501393:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nfloat czm_private_shadowVisibility(float visibility, float nDotL, float normalShadingSmooth, float darkness)\n{\n#ifdef USE_NORMAL_SHADING\n#ifdef USE_NORMAL_SHADING_SMOOTH\n    float strength = clamp(nDotL / normalShadingSmooth, 0.0, 1.0);\n#else\n    float strength = step(0.0, nDotL);\n#endif\n    visibility *= strength;\n#endif\n\n    visibility = max(visibility, darkness);\n    return visibility;\n}\n\n#ifdef USE_CUBE_MAP_SHADOW\nfloat czm_shadowVisibility(samplerCube shadowMap, czm_shadowParameters shadowParameters)\n{\n    float depthBias = shadowParameters.depthBias;\n    float depth = shadowParameters.depth;\n    float nDotL = shadowParameters.nDotL;\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\n    float darkness = shadowParameters.darkness;\n    vec3 uvw = shadowParameters.texCoords;\n\n    depth -= depthBias;\n    float visibility = czm_shadowDepthCompare(shadowMap, uvw, depth);\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\n}\n#else\nfloat czm_shadowVisibility(sampler2D shadowMap, czm_shadowParameters shadowParameters)\n{\n    float depthBias = shadowParameters.depthBias;\n    float depth = shadowParameters.depth;\n    float nDotL = shadowParameters.nDotL;\n    float normalShadingSmooth = shadowParameters.normalShadingSmooth;\n    float darkness = shadowParameters.darkness;\n    vec2 uv = shadowParameters.texCoords;\n\n    depth -= depthBias;\n#ifdef USE_SOFT_SHADOWS\n    vec2 texelStepSize = shadowParameters.texelStepSize;\n    float radius = 1.0;\n    float dx0 = -texelStepSize.x * radius;\n    float dy0 = -texelStepSize.y * radius;\n    float dx1 = texelStepSize.x * radius;\n    float dy1 = texelStepSize.y * radius;\n    float visibility = (\n        czm_shadowDepthCompare(shadowMap, uv, depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy0), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy0), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy0), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, 0.0), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, 0.0), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx0, dy1), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(0.0, dy1), depth) +\n        czm_shadowDepthCompare(shadowMap, uv + vec2(dx1, dy1), depth)\n    ) * (1.0 / 9.0);\n#else\n    float visibility = czm_shadowDepthCompare(shadowMap, uv, depth);\n#endif\n\n    return czm_private_shadowVisibility(visibility, nDotL, normalShadingSmooth, darkness);\n}\n#endif\n"},910377:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.  This is similar to the GLSL\n * built-in function <code>sign</code> except that returns 1.0 instead of 0.0 when the input value is 0.0.\n * \n * @name czm_signNotZero\n * @glslFunction\n *\n * @param {} value The value for which to determine the sign.\n * @returns {} 1.0 if the value is positive or zero, -1.0 if the value is negative.\n */\nfloat czm_signNotZero(float value)\n{\n    return value >= 0.0 ? 1.0 : -1.0;\n}\n\nvec2 czm_signNotZero(vec2 value)\n{\n    return vec2(czm_signNotZero(value.x), czm_signNotZero(value.y));\n}\n\nvec3 czm_signNotZero(vec3 value)\n{\n    return vec3(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z));\n}\n\nvec4 czm_signNotZero(vec4 value)\n{\n    return vec4(czm_signNotZero(value.x), czm_signNotZero(value.y), czm_signNotZero(value.z), czm_signNotZero(value.w));\n}\n"},530413:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Computes a color from the third order spherical harmonic coefficients and a normalized direction vector.\n * <p>\n * The order of the coefficients is [L00, L1_1, L10, L11, L2_2, L2_1, L20, L21, L22].\n * </p>\n *\n * @name czm_sphericalHarmonics\n * @glslFunction\n *\n * @param {vec3} normal The normalized direction.\n * @param {vec3[9]} coefficients The third order spherical harmonic coefficients.\n * @returns {vec3} The color at the direction.\n *\n * @see https://graphics.stanford.edu/papers/envmap/envmap.pdf\n */\nvec3 czm_sphericalHarmonics(vec3 normal, vec3 coefficients[9])\n{\n    vec3 L00 = coefficients[0];\n    vec3 L1_1 = coefficients[1];\n    vec3 L10 = coefficients[2];\n    vec3 L11 = coefficients[3];\n    vec3 L2_2 = coefficients[4];\n    vec3 L2_1 = coefficients[5];\n    vec3 L20 = coefficients[6];\n    vec3 L21 = coefficients[7];\n    vec3 L22 = coefficients[8];\n\n    float x = normal.x;\n    float y = normal.y;\n    float z = normal.z;\n\n    return\n          L00\n        + L1_1 * y\n        + L10 * z\n        + L11 * x\n        + L2_2 * (y * x)\n        + L2_1 * (y * z)\n        + L20 * (3.0 * z * z - 1.0)\n        + L21 * (z * x)\n        + L22 * (x * x - y * y);\n}\n"},422016:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Converts an sRGB color to a linear RGB color.\n *\n * @param {vec3|vec4} srgbIn The color in sRGB space\n * @returns {vec3|vec4} The color in linear color space. The vector type matches the input.\n */\nvec3 czm_srgbToLinear(vec3 srgbIn)\n{\n    return pow(srgbIn, vec3(2.2));\n}\n\nvec4 czm_srgbToLinear(vec4 srgbIn) \n{\n    vec3 linearOut = pow(srgbIn.rgb, vec3(2.2));\n    return vec4(linearOut, srgbIn.a);\n}\n"},438410:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Creates a matrix that transforms vectors from tangent space to eye space.\n *\n * @name czm_tangentToEyeSpaceMatrix\n * @glslFunction\n *\n * @param {vec3} normalEC The normal vector in eye coordinates.\n * @param {vec3} tangentEC The tangent vector in eye coordinates.\n * @param {vec3} bitangentEC The bitangent vector in eye coordinates.\n *\n * @returns {mat3} The matrix that transforms from tangent space to eye space.\n *\n * @example\n * mat3 tangentToEye = czm_tangentToEyeSpaceMatrix(normalEC, tangentEC, bitangentEC);\n * vec3 normal = tangentToEye * texture2D(normalMap, st).xyz;\n */\nmat3 czm_tangentToEyeSpaceMatrix(vec3 normalEC, vec3 tangentEC, vec3 bitangentEC)\n{\n    vec3 normal = normalize(normalEC);\n    vec3 tangent = normalize(tangentEC);\n    vec3 bitangent = normalize(bitangentEC);\n    return mat3(tangent.x  , tangent.y  , tangent.z,\n                bitangent.x, bitangent.y, bitangent.z,\n                normal.x   , normal.y   , normal.z);\n}\n"},601206:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Transforms a plane.\n * \n * @name czm_transformPlane\n * @glslFunction\n *\n * @param {vec4} plane The plane in Hessian Normal Form.\n * @param {mat4} transform The inverse-transpose of a transformation matrix.\n */\nvec4 czm_transformPlane(vec4 plane, mat4 transform) {\n    vec4 transformedPlane = transform * plane;\n    // Convert the transformed plane to Hessian Normal Form\n    float normalMagnitude = length(transformedPlane.xyz);\n    return transformedPlane / normalMagnitude;\n}\n"},815802:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Translates a position (or any <code>vec3</code>) that was encoded with {@link EncodedCartesian3},\n * and then provided to the shader as separate <code>high</code> and <code>low</code> bits to\n * be relative to the eye.  As shown in the example, the position can then be transformed in eye\n * or clip coordinates using {@link czm_modelViewRelativeToEye} or {@link czm_modelViewProjectionRelativeToEye},\n * respectively.\n * <p>\n * This technique, called GPU RTE, eliminates jittering artifacts when using large coordinates as\n * described in {@link http://help.agi.com/AGIComponents/html/BlogPrecisionsPrecisions.htm|Precisions, Precisions}.\n * </p>\n *\n * @name czm_translateRelativeToEye\n * @glslFunction\n *\n * @param {vec3} high The position's high bits.\n * @param {vec3} low The position's low bits.\n * @returns {vec3} The position translated to be relative to the camera's position.\n *\n * @example\n * attribute vec3 positionHigh;\n * attribute vec3 positionLow;\n *\n * void main()\n * {\n *   vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n *   gl_Position = czm_modelViewProjectionRelativeToEye * p;\n * }\n *\n * @see czm_modelViewRelativeToEye\n * @see czm_modelViewProjectionRelativeToEye\n * @see czm_computePosition\n * @see EncodedCartesian3\n */\nvec4 czm_translateRelativeToEye(vec3 high, vec3 low)\n{\n    vec3 highDifference = high - czm_encodedCameraPositionMCHigh;\n    vec3 lowDifference = low - czm_encodedCameraPositionMCLow;\n\n    return vec4(highDifference + lowDifference, 1.0);\n}\n"},457991:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @private\n */\nvec4 czm_translucentPhong(vec3 toEye, czm_material material, vec3 lightDirectionEC)\n{\n    // Diffuse from directional light sources at eye (for top-down and horizon views)\n    float diffuse = czm_getLambertDiffuse(vec3(0.0, 0.0, 1.0), material.normal);\n\n    if (czm_sceneMode == czm_sceneMode3D) {\n        // (and horizon views in 3D)\n        diffuse += czm_getLambertDiffuse(vec3(0.0, 1.0, 0.0), material.normal);\n    }\n\n    diffuse = clamp(diffuse, 0.0, 1.0);\n\n    float specular = czm_getSpecular(lightDirectionEC, toEye, material.normal, material.shininess);\n\n    // Temporary workaround for adding ambient.\n    vec3 materialDiffuse = material.diffuse * 0.5;\n\n    vec3 ambient = materialDiffuse;\n    vec3 color = ambient + material.emission;\n    color += materialDiffuse * diffuse * czm_lightColor;\n    color += material.specular * specular * czm_lightColor;\n\n    return vec4(color, material.alpha);\n}\n"},17269:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Returns the transpose of the matrix.  The input <code>matrix</code> can be\n * a <code>mat2</code>, <code>mat3</code>, or <code>mat4</code>.\n *\n * @name czm_transpose\n * @glslFunction\n *\n * @param {} matrix The matrix to transpose.\n *\n * @returns {} The transposed matrix.\n *\n * @example\n * // GLSL declarations\n * mat2 czm_transpose(mat2 matrix);\n * mat3 czm_transpose(mat3 matrix);\n * mat4 czm_transpose(mat4 matrix);\n *\n * // Transpose a 3x3 rotation matrix to find its inverse.\n * mat3 eastNorthUpToEye = czm_eastNorthUpToEyeCoordinates(\n *     positionMC, normalEC);\n * mat3 eyeToEastNorthUp = czm_transpose(eastNorthUpToEye);\n */\nmat2 czm_transpose(mat2 matrix)\n{\n    return mat2(\n        matrix[0][0], matrix[1][0],\n        matrix[0][1], matrix[1][1]);\n}\n\nmat3 czm_transpose(mat3 matrix)\n{\n    return mat3(\n        matrix[0][0], matrix[1][0], matrix[2][0],\n        matrix[0][1], matrix[1][1], matrix[2][1],\n        matrix[0][2], matrix[1][2], matrix[2][2]);\n}\n\nmat4 czm_transpose(mat4 matrix)\n{\n    return mat4(\n        matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0],\n        matrix[0][1], matrix[1][1], matrix[2][1], matrix[3][1],\n        matrix[0][2], matrix[1][2], matrix[2][2], matrix[3][2],\n        matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]);\n}\n"},927637:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Unpacks a vec4 depth value to a float in [0, 1) range.\n *\n * @name czm_unpackDepth\n * @glslFunction\n *\n * @param {vec4} packedDepth The packed depth.\n *\n * @returns {float} The floating-point depth in [0, 1) range.\n */\n float czm_unpackDepth(vec4 packedDepth)\n {\n    // See Aras Pranckevičius' post Encoding Floats to RGBA\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n    return dot(packedDepth, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n }\n"},531922:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Unpack an IEEE 754 single-precision float that is packed as a little-endian unsigned normalized vec4.\n *\n * @name czm_unpackFloat\n * @glslFunction\n *\n * @param {vec4} packedFloat The packed float.\n *\n * @returns {float} The floating-point depth in arbitrary range.\n */\nfloat czm_unpackFloat(vec4 packedFloat)\n{\n    // Convert to [0.0, 255.0] and round to integer\n    packedFloat = floor(packedFloat * 255.0 + 0.5);\n    float sign = 1.0 - step(128.0, packedFloat[3]) * 2.0;\n    float exponent = 2.0 * mod(packedFloat[3], 128.0) + step(128.0, packedFloat[2]) - 127.0;    \n    if (exponent == -127.0)\n    {\n        return 0.0;\n    }\n    float mantissa = mod(packedFloat[2], 128.0) * 65536.0 + packedFloat[1] * 256.0 + packedFloat[0] + float(0x800000);\n    float result = sign * exp2(exponent - 23.0) * mantissa;\n    return result;\n}\n"},240691:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef LOG_DEPTH\n// 1.0 at the near plane, increasing linearly from there.\nvarying float v_depthFromNearPlusOne;\n#ifdef SHADOW_MAP\nvarying vec3 v_logPositionEC;\n#endif\n#endif\n\nvec4 czm_updatePositionDepth(vec4 coords) {\n#if defined(LOG_DEPTH)\n\n#ifdef SHADOW_MAP\n    vec3 logPositionEC = (czm_inverseProjection * coords).xyz;\n    v_logPositionEC = logPositionEC;\n#endif\n\n    // With the very high far/near ratios used with the logarithmic depth\n    // buffer, floating point rounding errors can cause linear depth values\n    // to end up on the wrong side of the far plane, even for vertices that\n    // are really nowhere near it. Since we always write a correct logarithmic\n    // depth value in the fragment shader anyway, we just need to make sure\n    // such errors don't cause the primitive to be clipped entirely before\n    // we even get to the fragment shader.\n    coords.z = clamp(coords.z / coords.w, -1.0, 1.0) * coords.w;\n#endif\n\n    return coords;\n}\n\n/**\n * Writes the logarithmic depth to gl_Position using the already computed gl_Position.\n *\n * @name czm_vertexLogDepth\n * @glslFunction\n */\nvoid czm_vertexLogDepth()\n{\n#ifdef LOG_DEPTH\n    v_depthFromNearPlusOne = (gl_Position.w - czm_currentFrustum.x) + 1.0;\n    gl_Position = czm_updatePositionDepth(gl_Position);\n#endif\n}\n\n/**\n * Writes the logarithmic depth to gl_Position using the provided clip coordinates.\n * <p>\n * An example use case for this function would be moving the vertex in window coordinates\n * before converting back to clip coordinates. Use the original vertex clip coordinates.\n * </p>\n * @name czm_vertexLogDepth\n * @glslFunction\n *\n * @param {vec4} clipCoords The vertex in clip coordinates.\n *\n * @example\n * czm_vertexLogDepth(czm_projection * vec4(positionEyeCoordinates, 1.0));\n */\nvoid czm_vertexLogDepth(vec4 clipCoords)\n{\n#ifdef LOG_DEPTH\n    v_depthFromNearPlusOne = (clipCoords.w - czm_currentFrustum.x) + 1.0;\n    czm_updatePositionDepth(clipCoords);\n#endif\n}\n"},400545:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Transforms a position from window to eye coordinates.\n * The transform from window to normalized device coordinates is done using components\n * of (@link czm_viewport} and {@link czm_viewportTransformation} instead of calculating\n * the inverse of <code>czm_viewportTransformation</code>. The transformation from\n * normalized device coordinates to clip coordinates is done using <code>fragmentCoordinate.w</code>,\n * which is expected to be the scalar used in the perspective divide. The transformation\n * from clip to eye coordinates is done using {@link czm_inverseProjection}.\n *\n * @name czm_windowToEyeCoordinates\n * @glslFunction\n *\n * @param {vec4} fragmentCoordinate The position in window coordinates to transform.\n *\n * @returns {vec4} The transformed position in eye coordinates.\n *\n * @see czm_modelToWindowCoordinates\n * @see czm_eyeToWindowCoordinates\n * @see czm_inverseProjection\n * @see czm_viewport\n * @see czm_viewportTransformation\n *\n * @example\n * vec4 positionEC = czm_windowToEyeCoordinates(gl_FragCoord);\n */\nvec4 czm_windowToEyeCoordinates(vec4 fragmentCoordinate)\n{\n    // Reconstruct NDC coordinates\n    float x = 2.0 * (fragmentCoordinate.x - czm_viewport.x) / czm_viewport.z - 1.0;\n    float y = 2.0 * (fragmentCoordinate.y - czm_viewport.y) / czm_viewport.w - 1.0;\n    float z = (fragmentCoordinate.z - czm_viewportTransformation[3][2]) / czm_viewportTransformation[2][2];\n    vec4 q = vec4(x, y, z, 1.0);\n\n    // Reverse the perspective division to obtain clip coordinates.\n    q /= fragmentCoordinate.w;\n\n    // Reverse the projection transformation to obtain eye coordinates.\n    if (!(czm_inverseProjection == mat4(0.0))) // IE and Edge sometimes do something weird with != between mat4s\n    {\n        q = czm_inverseProjection * q;\n    }\n    else\n    {\n        float top = czm_frustumPlanes.x;\n        float bottom = czm_frustumPlanes.y;\n        float left = czm_frustumPlanes.z;\n        float right = czm_frustumPlanes.w;\n\n        float near = czm_currentFrustum.x;\n        float far = czm_currentFrustum.y;\n\n        q.x = (q.x * (right - left) + left + right) * 0.5;\n        q.y = (q.y * (top - bottom) + bottom + top) * 0.5;\n        q.z = (q.z * (near - far) - near - far) * 0.5;\n        q.w = 1.0;\n    }\n\n    return q;\n}\n\n/**\n * Transforms a position given as window x/y and a depth or a log depth from window to eye coordinates.\n * This function produces more accurate results for window positions with log depth than\n * conventionally unpacking the log depth using czm_reverseLogDepth and using the standard version\n * of czm_windowToEyeCoordinates.\n *\n * @name czm_windowToEyeCoordinates\n * @glslFunction\n *\n * @param {vec2} fragmentCoordinateXY The XY position in window coordinates to transform.\n * @param {float} depthOrLogDepth A depth or log depth for the fragment.\n *\n * @see czm_modelToWindowCoordinates\n * @see czm_eyeToWindowCoordinates\n * @see czm_inverseProjection\n * @see czm_viewport\n * @see czm_viewportTransformation\n *\n * @returns {vec4} The transformed position in eye coordinates.\n */\nvec4 czm_windowToEyeCoordinates(vec2 fragmentCoordinateXY, float depthOrLogDepth)\n{\n    // See reverseLogDepth.glsl. This is separate to re-use the pow.\n#ifdef LOG_DEPTH\n    float near = czm_currentFrustum.x;\n    float far = czm_currentFrustum.y;\n    float log2Depth = depthOrLogDepth * czm_log2FarDepthFromNearPlusOne;\n    float depthFromNear = pow(2.0, log2Depth) - 1.0;\n    float depthFromCamera = depthFromNear + near;\n    vec4 windowCoord = vec4(fragmentCoordinateXY, far * (1.0 - near / depthFromCamera) / (far - near), 1.0);\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\n    eyeCoordinate.w = 1.0 / depthFromCamera; // Better precision\n    return eyeCoordinate;\n#else\n    vec4 windowCoord = vec4(fragmentCoordinateXY, depthOrLogDepth, 1.0);\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(windowCoord);\n#endif\n    return eyeCoordinate;\n}\n"},448623:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="// emulated noperspective\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\nvarying float v_WindowZ;\n#endif\n\n/**\n * Emulates GL_DEPTH_CLAMP. Clamps a fragment to the near and far plane\n * by writing the fragment's depth. See czm_depthClamp for more details.\n * <p>\n * The shader must enable the GL_EXT_frag_depth extension.\n * </p>\n *\n * @name czm_writeDepthClamp\n * @glslFunction\n *\n * @example\n * gl_FragColor = color;\n * czm_writeDepthClamp();\n *\n * @see czm_depthClamp\n */\nvoid czm_writeDepthClamp()\n{\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\n    gl_FragDepthEXT = clamp(v_WindowZ * gl_FragCoord.w, 0.0, 1.0);\n#endif\n}\n"},238214:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef LOG_DEPTH\nvarying float v_depthFromNearPlusOne;\n\n#ifdef POLYGON_OFFSET\nuniform vec2 u_polygonOffset;\n#endif\n\n#endif\n\n/**\n * Writes the fragment depth to the logarithmic depth buffer.\n * <p>\n * Use this when the vertex shader does not call {@link czm_vertexlogDepth}, for example, when\n * ray-casting geometry using a full screen quad.\n * </p>\n * @name czm_writeLogDepth\n * @glslFunction\n *\n * @param {float} depth The depth coordinate, where 1.0 is on the near plane and\n *                      depth increases in eye-space units from there\n *\n * @example\n * czm_writeLogDepth((czm_projection * v_positionEyeCoordinates).w + 1.0);\n */\nvoid czm_writeLogDepth(float depth)\n{\n#if defined(GL_EXT_frag_depth) && defined(LOG_DEPTH)\n    // Discard the vertex if it's not between the near and far planes.\n    // We allow a bit of epsilon on the near plane comparison because a 1.0\n    // from the vertex shader (indicating the vertex should be _on_ the near\n    // plane) will not necessarily come here as exactly 1.0.\n    if (depth <= 0.9999999 || depth > czm_farDepthFromNearPlusOne) {\n        discard;\n    }\n\n#ifdef POLYGON_OFFSET\n    // Polygon offset: m * factor + r * units\n    float factor = u_polygonOffset[0];\n    float units = u_polygonOffset[1];\n\n    // If we can't compute derivatives, just leave out the factor I guess?\n#ifdef GL_OES_standard_derivatives\n    // m = sqrt(dZdX^2 + dZdY^2);\n    float x = dFdx(depth);\n    float y = dFdy(depth);\n    float m = sqrt(x * x + y * y);\n\n    // Apply the factor before computing the log depth.\n    depth += m * factor;\n#endif\n\n#endif\n\n    gl_FragDepthEXT = log2(depth) * czm_oneOverLog2FarDepthFromNearPlusOne;\n\n#ifdef POLYGON_OFFSET\n    // Apply the units after the log depth.\n    gl_FragDepthEXT += czm_epsilon7 * units;\n#endif\n\n#endif\n}\n\n/**\n * Writes the fragment depth to the logarithmic depth buffer.\n * <p>\n * Use this when the vertex shader calls {@link czm_vertexlogDepth}.\n * </p>\n *\n * @name czm_writeLogDepth\n * @glslFunction\n */\nvoid czm_writeLogDepth() {\n#ifdef LOG_DEPTH\n    czm_writeLogDepth(v_depthFromNearPlusOne);\n#endif\n}\n"},777051:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Transforms a value for non-perspective interpolation by multiplying\n * it by w, the value used in the perspective divide. This function is\n * intended to be called in a vertex shader to compute the value of a\n * `varying` that should not be subject to perspective interpolation.\n * For example, screen-space texture coordinates. The fragment shader\n * must call {@link czm_readNonPerspective} to retrieve the final\n * non-perspective value.\n *\n * @name czm_writeNonPerspective\n * @glslFunction\n *\n * @param {float|vec2|vec3|vec4} value The value to be interpolated without accounting for perspective.\n * @param {float} w The perspective divide value. Usually this is the computed `gl_Position.w`.\n * @returns {float|vec2|vec3|vec4} The transformed value, intended to be stored in a `varying` and read in the\n *          fragment shader with {@link czm_readNonPerspective}.\n */\nfloat czm_writeNonPerspective(float value, float w) {\n    return value * w;\n}\n\nvec2 czm_writeNonPerspective(vec2 value, float w) {\n    return value * w;\n}\n\nvec3 czm_writeNonPerspective(vec3 value, float w) {\n    return value * w;\n}\n\nvec4 czm_writeNonPerspective(vec4 value, float w) {\n    return value * w;\n}\n"},916853:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @name czm_depthRangeStruct\n * @glslStruct\n */\nstruct czm_depthRangeStruct\n{\n    float near;\n    float far;\n};\n"},954168:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Holds material information that can be used for lighting. Returned by all czm_getMaterial functions.\n *\n * @name czm_material\n * @glslStruct\n *\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\n * @property {float} specular Intensity of incoming light reflecting in a single direction.\n * @property {float} shininess The sharpness of the specular reflection.  Higher values create a smaller, more focused specular highlight.\n * @property {vec3} normal Surface's normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface's unmodified normal.\n * @property {vec3} emission Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\n */\nstruct czm_material\n{\n    vec3 diffuse;\n    float specular;\n    float shininess;\n    vec3 normal;\n    vec3 emission;\n    float alpha;\n};\n"},157572:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Used as input to every material's czm_getMaterial function.\n *\n * @name czm_materialInput\n * @glslStruct\n *\n * @property {float} s 1D texture coordinates.\n * @property {vec2} st 2D texture coordinates.\n * @property {vec3} str 3D texture coordinates.\n * @property {vec3} normalEC Unperturbed surface normal in eye coordinates.\n * @property {mat3} tangentToEyeMatrix Matrix for converting a tangent space normal to eye space.\n * @property {vec3} positionToEyeEC Vector from the fragment to the eye in eye coordinates.  The magnitude is the distance in meters from the fragment to the eye.\n * @property {float} height The height of the terrain in meters above or below the WGS84 ellipsoid.  Only available for globe materials.\n * @property {float} slope The slope of the terrain in radians.  0 is flat; pi/2 is vertical.  Only available for globe materials.\n * @property {float} aspect The aspect of the terrain in radians.  0 is East, pi/2 is North, pi is West, 3pi/2 is South.  Only available for globe materials.\n */\nstruct czm_materialInput\n{\n    float s;\n    vec2 st;\n    vec3 str;\n    vec3 normalEC;\n    mat3 tangentToEyeMatrix;\n    vec3 positionToEyeEC;\n    float height;\n    float slope;\n    float aspect;\n};\n"},783032:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Struct for representing a material for a {@link ModelExperimental}. The model\n * rendering pipeline will pass this struct between material, custom shaders,\n * and lighting stages. This is not to be confused with {@link czm_material}\n * which is used by the older Fabric materials system, although they are similar\n *\n * @name czm_modelMaterial\n * @glslStruct\n *\n * @property {vec3} diffuse Incoming light that scatters evenly in all directions.\n * @property {float} alpha Alpha of this material. 0.0 is completely transparent; 1.0 is completely opaque.\n * @property {vec3} specular Color of reflected light at normal incidence in PBR materials. This is sometimes referred to as f0 in the literature.\n * @property {float} roughness A number from 0.0 to 1.0 representing how rough the surface is. Values near 0.0 produce glossy surfaces, while values near 1.0 produce rough surfaces.\n * @property {vec3} normalEC Surface's normal in eye coordinates. It is used for effects such as normal mapping. The default is the surface's unmodified normal.\n * @property {float} occlusion Ambient occlusion recieved at this point on the material. 1.0 means fully lit, 0.0 means fully occluded.\n * @property {vec3} emissive Light emitted by the material equally in all directions. The default is vec3(0.0), which emits no light.\n */\nstruct czm_modelMaterial {\n    vec3 diffuse;\n    float alpha;\n    vec3 specular;\n    float roughness;\n    vec3 normalEC;\n    float occlusion;\n    vec3 emissive;\n};\n"},304495:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Struct for representing the output of a custom vertex shader.\n * \n * @name czm_modelVertexOutput\n * @glslStruct\n *\n * @see {@link CustomShader}\n * @see {@link ModelExperimental}\n *\n * @property {vec3} positionMC The position of the vertex in model coordinates\n * @property {float} pointSize A custom value for gl_PointSize. This is only used for point primitives. \n */\nstruct czm_modelVertexOutput {\n  vec3 positionMC;\n  float pointSize;\n};\n"},989462:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Parameters for {@link czm_pbrLighting}\n *\n * @name czm_material\n * @glslStruct\n *\n * @property {vec3} diffuseColor the diffuse color of the material for the lambert term of the rendering equation\n * @property {float} roughness a value from 0.0 to 1.0 that indicates how rough the surface of the material is.\n * @property {vec3} f0 The reflectance of the material at normal incidence\n */\nstruct czm_pbrParameters\n{\n    vec3 diffuseColor;\n    float roughness;\n    vec3 f0;\n};\n"},391273:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_ray\n * @glslStruct\n */\nstruct czm_ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n"},958769:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * DOC_TBA\n *\n * @name czm_raySegment\n * @glslStruct\n */\nstruct czm_raySegment\n{\n    float start;\n    float stop;\n};\n\n/**\n * DOC_TBA\n *\n * @name czm_emptyRaySegment\n * @glslConstant \n */\nconst czm_raySegment czm_emptyRaySegment = czm_raySegment(-czm_infinity, -czm_infinity);\n\n/**\n * DOC_TBA\n *\n * @name czm_fullRaySegment\n * @glslConstant \n */\nconst czm_raySegment czm_fullRaySegment = czm_raySegment(0.0, czm_infinity);\n"},625776:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="struct czm_shadowParameters\n{\n#ifdef USE_CUBE_MAP_SHADOW\n    vec3 texCoords;\n#else\n    vec2 texCoords;\n#endif\n\n    float depthBias;\n    float depth;\n    float nDotL;\n    vec2 texelStepSize;\n    float normalShadingSmooth;\n    float darkness;\n};\n"},524341:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D u_noiseTexture;\nuniform vec3 u_noiseTextureDimensions;\nuniform float u_noiseDetail;\nvarying vec2 v_offset;\nvarying vec3 v_maximumSize;\nvarying vec4 v_color;\nvarying float v_slice;\nvarying float v_brightness;\n\nfloat wrap(float value, float rangeLength) {\n    if(value < 0.0) {\n        float absValue = abs(value);\n        float modValue = mod(absValue, rangeLength);\n        return mod(rangeLength - modValue, rangeLength);\n    }\n    return mod(value, rangeLength);\n}\n\nvec3 wrapVec(vec3 value, float rangeLength) {\n    return vec3(wrap(value.x, rangeLength),\n                wrap(value.y, rangeLength),\n                wrap(value.z, rangeLength));\n}\n\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\nfloat noiseTextureRows = u_noiseTextureDimensions.y;\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\n\nfloat textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\nvec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\n                                          inverseNoiseTextureRows / textureSliceWidth);\n\nvec2 voxelToUV(vec3 voxelIndex) {\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\n\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\n}\n\n// Interpolate a voxel with its neighbor (along the positive X-axis)\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\n    vec2 uv0 = voxelToUV(voxelIndex);\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\n    vec4 sample0 = texture2D(u_noiseTexture, uv0);\n    vec4 sample1 = texture2D(u_noiseTexture, uv1);\n    return mix(sample0, sample1, x);\n}\n\nvec4 sampleNoiseTexture(vec3 position) {\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\n    vec3 lerpValue = fract(recenteredPos);\n    vec3 voxelIndex = floor(recenteredPos);\n\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\n\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\n    return mix(yLerp0, yLerp1, lerpValue.z);\n}\n\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\n                     out vec3 point, out vec3 normal) {\n    float A = dot(dir, dir);\n    float B = dot(origin, dir);\n    float C = dot(origin, origin) - 0.25;\n    float discriminant = (B * B) - (A * C);\n    if(discriminant < 0.0) {\n        return false;\n    }\n    float root = sqrt(discriminant);\n    float t = (-B - root) / A;\n    if(t < 0.0) {\n        t = (-B + root) / A;\n    }\n    point = origin + t * dir;\n\n    if(slice >= 0.0) {\n        point.z = (slice / 2.0) - 0.5;\n        if(length(point) > 0.5) {\n            return false;\n        }\n    }\n\n    normal = normalize(point);\n    point -= czm_epsilon2 * normal;\n    return true;\n}\n\n// Transforms the ray origin and direction into unit sphere space,\n// then transforms the result back into the ellipsoid's space.\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\n                        out vec3 point, out vec3 normal) {\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\n        return false;\n    }\n\n    vec3 o = (origin - center) / scale;\n    vec3 d = dir / scale;\n    vec3 p, n;\n    bool intersected = intersectSphere(o, d, slice, p, n);\n    if(intersected) {\n        point = (p * scale) + center;\n        normal = n;\n    }\n    return intersected;\n}\n\n// Assume that if phase shift is being called for octave i,\n// the frequency is of i - 1. This saves us from doing extra\n// division / multiplication operations.\nvec2 phaseShift2D(vec2 p, vec2 freq) {\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\n}\n\nvec2 phaseShift3D(vec3 p, vec2 freq) {\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\n}\n\n// The cloud texture function derived from Gardner's 1985 paper,\n// \"Visual Simulation of Clouds.\"\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\nconst float T0    = 0.6;  // contrast of the texture pattern\nconst float k     = 0.1;  // computed to produce a maximum value of 1\nconst float C0    = 0.8;  // coefficient\nconst float FX0   = 0.6;  // frequency X\nconst float FY0   = 0.6;  // frequency Y\nconst int octaves = 5;\n\nfloat T(vec3 point) {\n    vec2 sum = vec2(0.0);\n    float Ci = C0;\n    vec2 FXY = vec2(FX0, FY0);\n    vec2 PXY = vec2(0.0);\n    for(int i = 1; i <= octaves; i++) {\n        PXY = phaseShift3D(point, FXY);\n        Ci *= 0.707;\n        FXY *= 2.0;\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\n        sum += Ci * sinTerm + vec2(T0);\n    }\n    return k * sum.x * sum.y;\n}\n\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\nconst float t = 0.4;  // fraction of texture shading\nconst float s = 0.25; // fraction of specular reflection\n\nfloat I(float Id, float Is, float It) {\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\n}\n\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\n\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\n               float brightness) {\n    vec3 cloudPoint, cloudNormal;\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\n                            cloudPoint, cloudNormal)) {\n        return vec4(0.0);\n    }\n\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\n    float It = T(cloudPoint);                                 // texture function\n    float intensity = I(Id, Is, It);\n    vec3 color = vec3(intensity * clamp(brightness, 0.1, 1.0));\n\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\n    float W = noise.x;\n    float W2 = noise.y;\n    float W3 = noise.z;\n\n    // The dot product between the cloud's normal and the ray's direction is greatest\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\n    // so that no harsh lines appear.\n\n    // The first (and biggest) layer of worley noise is then subtracted from this.\n    // The final result is scaled up so that the base cloud is not too translucent.\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\n    float TR = pow(ndDot, 3.0) - W; // translucency\n    TR *= 1.3;\n\n    // Subtracting the second and third layers of worley noise is more complicated.\n    // If these layers of noise were simply subtracted from the current translucency,\n    // the shape derived from the first layer of noise would be completely deleted.\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\n    // However, because the edges of the ellipsoid were already blurred away, mapping\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\n    // The value of (0.5 - ndDot) provides the best compromise.\n    float minusDot = 0.5 - ndDot;\n\n    // Even with the previous calculation, subtracting the second layer of wnoise\n    // erode too much of the cloud. The addition of it, however, will detailed\n    // volume to the cloud. As long as the noise is only added and not subtracted,\n    // the results are aesthetically pleasing.\n\n    // The minusDot product is mapped in a way that it is larger at the edges of\n    // the ellipsoid, so a subtraction and min operation are used instead of\n    // an addition and max one.\n    TR -= min(minusDot * W2, 0.0);\n\n    // The third level of worley noise is subtracted from the result, with some\n    // modifications. First, a scalar is added to minusDot so that the noise\n    // starts affecting the shape farther away from the center of the ellipsoid's\n    // surface. Then, it is scaled down so its impact is not too intense.\n    TR -= 0.8 * (minusDot + 0.25) * W3;\n\n    // The texture function's shading does not correlate with the shape of the cloud\n    // produced by the layers of noise, so an extra shading scalar is calculated.\n    // The darkest areas of the cloud are assigned to be where the noise erodes\n    // the cloud the most. This is then interpolated based on the translucency\n    // and the diffuse shading term of that point in the cloud.\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\n\n    // To avoid values that are too dark, this scalar is increased by a small amount\n    // and clamped so it never goes to zero.\n    shading = clamp(shading + 0.2, 0.3, 1.0);\n\n    // Finally, the contrast of the cloud's color is increased.\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\n    return vec4(finalColor, clamp(TR, 0.0, 1.0)) * v_color;\n}\n\nvoid main() {\n#ifdef DEBUG_BILLBOARDS\n    gl_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\n#endif\n    // To avoid calculations with high values,\n    // we raycast from an arbitrarily smaller space.\n    vec2 coordinate = v_maximumSize.xy * v_offset;\n\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\n    vec3 ellipsoidCenter = vec3(0.0);\n\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\n    vec3 rayOrigin = eye;\n#ifdef DEBUG_ELLIPSOIDS\n    vec3 point, normal;\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\n                          point, normal)) {\n        gl_FragColor = v_brightness * v_color;\n    }\n#else\n#ifndef DEBUG_BILLBOARDS\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\n    if(cloud.w < 0.01) {\n        discard;\n    }\n    gl_FragColor = cloud;\n#endif\n#endif\n}\n"},245536:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef INSTANCED\nattribute vec2 direction;\n#endif\nattribute vec4 positionHighAndScaleX;\nattribute vec4 positionLowAndScaleY;\nattribute vec4 packedAttribute0;\nattribute vec4 packedAttribute1;\nattribute vec4 color;\n\nvarying vec2 v_offset;\nvarying vec3 v_maximumSize;\nvarying vec4 v_color;\nvarying float v_slice;\nvarying float v_brightness;\n\nvoid main() {\n    // Unpack attributes.\n    vec3 positionHigh = positionHighAndScaleX.xyz;\n    vec3 positionLow = positionLowAndScaleY.xyz;\n    vec2 scale = vec2(positionHighAndScaleX.w, positionLowAndScaleY.w);\n\n    float show = packedAttribute0.x;\n    float brightness = packedAttribute0.y;\n    vec2 coordinates = packedAttribute0.wz;\n    vec3 maximumSize = packedAttribute1.xyz;\n    float slice = packedAttribute1.w;\n\n#ifdef INSTANCED\n    vec2 dir = direction;\n#else\n    vec2 dir = coordinates;\n#endif\n\n    vec2 offset = dir - vec2(0.5, 0.5);\n    vec2 scaledOffset = scale * offset;\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\n    positionEC.xy += scaledOffset;\n    \n    positionEC.xyz *= show;\n    gl_Position = czm_projection * positionEC;\n\n    v_offset = offset;\n    v_maximumSize = maximumSize;\n    v_color = color;\n    v_slice = slice;\n    v_brightness = brightness;\n}\n"},646791:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec3 u_noiseTextureDimensions;\nuniform float u_noiseDetail;\nuniform vec3 u_noiseOffset;\nvarying vec2 v_position;\n\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\n\nfloat wrap(float value, float rangeLength) {\n    if(value < 0.0) {\n        float absValue = abs(value);\n        float modValue = mod(absValue, rangeLength);\n        return mod(rangeLength - modValue, rangeLength);\n    }\n    return mod(value, rangeLength);\n}\n\nvec3 wrapVec(vec3 value, float rangeLength) {\n    return vec3(wrap(value.x, rangeLength),\n                wrap(value.y, rangeLength),\n                wrap(value.z, rangeLength));\n}\n\nvec3 random3(vec3 p) {\n    float dot1 = dot(p, vec3(127.1, 311.7, 932.8));\n    float dot2 = dot(p, vec3(269.5, 183.3, 421.4));\n    return fract(vec3(sin(dot1 - dot2), cos(dot1 * dot2), dot1 * dot2));\n}\n\n// Frequency corresponds to cell size.\n// The higher the frequency, the smaller the cell size.\nvec3 getWorleyCellPoint(vec3 centerCell, vec3 offset, float freq) {\n    vec3 cell = centerCell + offset;\n    cell = wrapVec(cell, textureSliceWidth / u_noiseDetail);\n    cell += floor(u_noiseOffset / u_noiseDetail);\n    vec3 p = offset + random3(cell);\n    return p;\n}\n\nfloat worleyNoise(vec3 p, float freq) {\n    vec3 centerCell = floor(p * freq);\n    vec3 pointInCell = fract(p * freq);\n    float shortestDistance = 1000.0;\n\n    for(float z = -1.0; z <= 1.0; z++) {\n        for(float y = -1.0; y <= 1.0; y++) {\n            for(float x = -1.0; x <= 1.0; x++) {\n                vec3 offset = vec3(x, y, z);\n                vec3 point = getWorleyCellPoint(centerCell, offset, freq);\n\n                float distance = length(pointInCell - point);\n                if(distance < shortestDistance) {\n                    shortestDistance = distance;\n                }\n            }\n        }\n    }\n\n    return shortestDistance;\n}\n\nconst float MAX_FBM_ITERATIONS = 10.0;\n\nfloat worleyFBMNoise(vec3 p, float octaves, float scale) {\n    float noise = 0.0;\n    float freq = 1.0;\n    float persistence = 0.625;\n    for(float i = 0.0; i < MAX_FBM_ITERATIONS; i++) {\n        if(i >= octaves) {\n            break;\n        }\n\n        noise += worleyNoise(p * scale, freq * scale) * persistence;\n        persistence *= 0.5;\n        freq *= 2.0;\n    }\n    return noise;\n}\n\nvoid main() {\n    float x = mod(v_position.x, textureSliceWidth);\n    float y = mod(v_position.y, textureSliceWidth);\n    float sliceRow = floor(v_position.y / textureSliceWidth);\n    float z = floor(v_position.x / textureSliceWidth) + sliceRow * inverseNoiseTextureRows * textureSliceWidth;\n\n    vec3 position = vec3(x, y, z);\n    position /= u_noiseDetail;\n    float worley0 = clamp(worleyFBMNoise(position, 3.0, 1.0), 0.0, 1.0);\n    float worley1 = clamp(worleyFBMNoise(position, 3.0, 2.0), 0.0, 1.0);\n    float worley2 = clamp(worleyFBMNoise(position, 3.0, 3.0), 0.0, 1.0);\n    gl_FragColor = vec4(worley0, worley1, worley2, 1.0);\n}\n"},133893:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec3 u_noiseTextureDimensions;\nattribute vec2 position;\n\nvarying vec2 v_position;\n\nvoid main()\n{\n    gl_Position = vec4(position, 0.1, 1.0);\n\n    float textureSliceWidth = u_noiseTextureDimensions.x;\n    float noiseTextureRows = u_noiseTextureDimensions.y;\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\n    vec2 transformedPos = (position * 0.5) + vec2(0.5);\n    transformedPos *= textureSliceWidth;\n    transformedPos.x *= textureSliceWidth * inverseNoiseTextureRows;\n    transformedPos.y *= noiseTextureRows;\n    v_position = transformedPos;\n}\n"},170179:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D u_opaqueDepthTexture;\nuniform sampler2D u_translucentDepthTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    float opaqueDepth = texture2D(u_opaqueDepthTexture, v_textureCoordinates).r;\n    float translucentDepth = texture2D(u_translucentDepthTexture, v_textureCoordinates).r;\n    translucentDepth = czm_branchFreeTernary(translucentDepth > opaqueDepth, 1.0, translucentDepth);\n    gl_FragColor = czm_packDepth(translucentDepth);\n}\n"},425458:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * Compositing for Weighted Blended Order-Independent Transparency. See:\n * - http://jcgt.org/published/0002/02/09/\n * - http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html\n */\n\nuniform sampler2D u_opaque;\nuniform sampler2D u_accumulation;\nuniform sampler2D u_revealage;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    vec4 opaque = texture2D(u_opaque, v_textureCoordinates);\n    vec4 accum = texture2D(u_accumulation, v_textureCoordinates);\n    float r = texture2D(u_revealage, v_textureCoordinates).r;\n\n#ifdef MRT\n    vec4 transparent = vec4(accum.rgb / clamp(r, 1e-4, 5e4), accum.a);\n#else\n    vec4 transparent = vec4(accum.rgb / clamp(accum.a, 1e-4, 5e4), r);\n#endif\n\n    gl_FragColor = (1.0 - transparent.a) * transparent + transparent.a * opaque;\n\n    if (opaque != czm_backgroundColor)\n    {\n        gl_FragColor.a = 1.0;\n    }\n}\n"},364275:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec4 positionEC;\n\nvoid main()\n{\n    vec3 position;\n    vec3 direction;\n    if (czm_orthographicIn3D == 1.0)\n    {\n        vec2 uv = (gl_FragCoord.xy -  czm_viewport.xy) / czm_viewport.zw;\n        vec2 minPlane = vec2(czm_frustumPlanes.z, czm_frustumPlanes.y); // left, bottom\n        vec2 maxPlane = vec2(czm_frustumPlanes.w, czm_frustumPlanes.x); // right, top\n        position = vec3(mix(minPlane, maxPlane, uv), 0.0);\n        direction = vec3(0.0, 0.0, -1.0);\n    } \n    else \n    {\n        position = vec3(0.0);\n        direction = normalize(positionEC.xyz);\n    }\n\n    czm_ray ray = czm_ray(position, direction);\n\n    vec3 ellipsoid_center = czm_view[3].xyz;\n\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\n    if (!czm_isEmpty(intersection))\n    {\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    }\n    else\n    {\n        discard;\n    }\n\n    czm_writeLogDepth();\n}\n"},187550:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 position;\n\nvarying vec4 positionEC;\n\nvoid main()\n{\n    positionEC = czm_modelView * position;\n    gl_Position = czm_projection * positionEC;\n\n    czm_vertexLogDepth();\n}\n"},822887:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef WRITE_DEPTH\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n#endif\n#endif\n\nuniform vec3 u_radii;\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\n\nvarying vec3 v_positionEC;\n\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\n{\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\n\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\n    vec3 positionToEyeEC = -positionEC;\n\n    czm_materialInput materialInput;\n    materialInput.s = st.s;\n    materialInput.st = st;\n    materialInput.str = (positionMC + u_radii) / u_radii;\n    materialInput.normalEC = normalEC;\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\n    materialInput.positionToEyeEC = positionToEyeEC;\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef ONLY_SUN_LIGHTING\n    return czm_private_phong(normalize(positionToEyeEC), material, czm_sunDirectionEC);\n#else\n    return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\n#endif\n}\n\nvoid main()\n{\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\n    // Otherwise perform one intersection test which will be the common case.\n\n    // Test if the ray intersects a sphere with the ellipsoid's maximum radius.\n    // For very oblate ellipsoids, using the ellipsoid's radii for an intersection test\n    // may cause false negatives. This will discard fragments before marching the ray forward.\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\n    vec3 direction = normalize(v_positionEC);\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\n\n    float t1 = -1.0;\n    float t2 = -1.0;\n\n    float b = -2.0 * dot(direction, ellipsoidCenter);\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\n\n    float discriminant = b * b - 4.0 * c;\n    if (discriminant >= 0.0) {\n        t1 = (-b - sqrt(discriminant)) * 0.5;\n        t2 = (-b + sqrt(discriminant)) * 0.5;\n    }\n\n    if (t1 < 0.0 && t2 < 0.0) {\n        discard;\n    }\n\n    float t = min(t1, t2);\n    if (t < 0.0) {\n        t = 0.0;\n    }\n\n    // March ray forward to intersection with larger sphere and find\n    czm_ray ray = czm_ray(t * direction, direction);\n\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\n\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\n\n    if (czm_isEmpty(intersection))\n    {\n        discard;\n    }\n\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\n\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\n\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\n\n#ifdef WRITE_DEPTH\n#ifdef GL_EXT_frag_depth\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\n    vec3 positionEC = czm_pointAlongRay(ray, t);\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\n#ifdef LOG_DEPTH\n    czm_writeLogDepth(1.0 + positionCC.w);\n#else\n    float z = positionCC.z / positionCC.w;\n\n    float n = czm_depthRange.near;\n    float f = czm_depthRange.far;\n\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\n#endif\n#endif\n#endif\n}\n"},631187:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position;\n\nuniform vec3 u_radii;\n\nvarying vec3 v_positionEC;\n\nvoid main()\n{\n    // In the vertex data, the cube goes from (-1.0, -1.0, -1.0) to (1.0, 1.0, 1.0) in model coordinates.\n    // Scale to consider the radii.  We could also do this once on the CPU when using the BoxGeometry,\n    // but doing it here allows us to change the radii without rewriting the vertex data, and\n    // allows all ellipsoids to reuse the same vertex data.\n    vec4 p = vec4(u_radii * position, 1.0);\n\n    v_positionEC = (czm_modelView * p).xyz;     // position in eye coordinates\n    gl_Position = czm_modelViewProjection * p;  // position in clip coordinates\n\n    // With multi-frustum, when the ellipsoid primitive is positioned on the intersection of two frustums\n    // and close to terrain, the terrain (writes depth) in the closest frustum can overwrite part of the\n    // ellipsoid (does not write depth) that was rendered in the farther frustum.\n    //\n    // Here, we clamp the depth in the vertex shader to avoid being overwritten; however, this creates\n    // artifacts since some fragments can be alpha blended twice.  This is solved by only rendering\n    // the ellipsoid in the closest frustum to the viewer.\n    gl_Position.z = clamp(gl_Position.z, czm_depthRange.near, czm_depthRange.far);\n\n    czm_vertexLogDepth();\n}\n"},116583:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @license\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// NVIDIA GameWorks Graphics Samples GitHub link: https://github.com/NVIDIAGameWorks/GraphicsSamples\n// Original FXAA 3.11 shader link: https://github.com/NVIDIAGameWorks/GraphicsSamples/blob/master/samples/es3-kepler/FXAA/FXAA3_11.h\n\n// Steps used to integrate into Cesium:\n// * The following defines are set:\n//       #define FXAA_PC 1\n//       #define FXAA_WEBGL_1 1\n//       #define FXAA_GREEN_AS_LUMA 1\n//       #define FXAA_EARLY_EXIT 1\n//       #define FXAA_GLSL_120 1\n// * All other preprocessor directives besides the FXAA_QUALITY__P* directives were removed.\n// * Double underscores are invalid for preprocessor directives so replace them with a single underscore. Replace\n//   /FXAA_QUALITY__P(.*)/g with /FXAA_QUALITY__P$1/.\n// * There are no implicit conversions from ivec* to vec* so replace:\n//       #define FxaaInt2 ivec2\n//           with\n//       #define FxaaInt2 vec2\n// * The texture2DLod function is only available in vertex shaders so replace:\n//       #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n//       #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n//           with\n//       #define FxaaTexTop(t, p) texture2D(t, p)\n//       #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\n// * FXAA_QUALITY_PRESET is prepended in the javascript code. We may want to expose that setting in the future.\n// * The following parameters to FxaaPixelShader are unused and can be removed:\n//       fxaaConsolePosPos\n//       fxaaConsoleRcpFrameOpt\n//       fxaaConsoleRcpFrameOpt2\n//       fxaaConsole360RcpFrameOpt2\n//       fxaaConsoleEdgeSharpness\n//       fxaaConsoleEdgeThreshold\n//       fxaaConsoleEdgeThresholdMi\n//       fxaaConsole360ConstDir\n\n//\n// Choose the quality preset.\n// This needs to be compiled into the shader as it effects code.\n// Best option to include multiple presets is to\n// in each shader define the preset, then include this file.\n//\n// OPTIONS\n// -----------------------------------------------------------------------\n// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n// 39       - no dither, very expensive\n//\n// NOTES\n// -----------------------------------------------------------------------\n// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n// 13 = about same speed as FXAA 3.9 and better than 12\n// 23 = closest to FXAA 3.9 visually and performance wise\n//  _ = the lowest digit is directly related to performance\n// _  = the highest digit is directly related to style\n//\n//#define FXAA_QUALITY_PRESET 12\n\n\n#if (FXAA_QUALITY_PRESET == 10)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 3.0\n    #define FXAA_QUALITY_P2 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 11)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 3.0\n    #define FXAA_QUALITY_P3 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 12)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 4.0\n    #define FXAA_QUALITY_P4 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 13)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 4.0\n    #define FXAA_QUALITY_P5 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 14)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 4.0\n    #define FXAA_QUALITY_P6 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 15)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 12.0\n#endif\n#if (FXAA_QUALITY_PRESET == 20)\n    #define FXAA_QUALITY_PS 3\n    #define FXAA_QUALITY_P0 1.5\n    #define FXAA_QUALITY_P1 2.0\n    #define FXAA_QUALITY_P2 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 21)\n    #define FXAA_QUALITY_PS 4\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 22)\n    #define FXAA_QUALITY_PS 5\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 23)\n    #define FXAA_QUALITY_PS 6\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 24)\n    #define FXAA_QUALITY_PS 7\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 3.0\n    #define FXAA_QUALITY_P6 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 25)\n    #define FXAA_QUALITY_PS 8\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 4.0\n    #define FXAA_QUALITY_P7 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 26)\n    #define FXAA_QUALITY_PS 9\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 4.0\n    #define FXAA_QUALITY_P8 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 27)\n    #define FXAA_QUALITY_PS 10\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 4.0\n    #define FXAA_QUALITY_P9 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 28)\n    #define FXAA_QUALITY_PS 11\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 4.0\n    #define FXAA_QUALITY_P10 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 29)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.5\n    #define FXAA_QUALITY_P2 2.0\n    #define FXAA_QUALITY_P3 2.0\n    #define FXAA_QUALITY_P4 2.0\n    #define FXAA_QUALITY_P5 2.0\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n#if (FXAA_QUALITY_PRESET == 39)\n    #define FXAA_QUALITY_PS 12\n    #define FXAA_QUALITY_P0 1.0\n    #define FXAA_QUALITY_P1 1.0\n    #define FXAA_QUALITY_P2 1.0\n    #define FXAA_QUALITY_P3 1.0\n    #define FXAA_QUALITY_P4 1.0\n    #define FXAA_QUALITY_P5 1.5\n    #define FXAA_QUALITY_P6 2.0\n    #define FXAA_QUALITY_P7 2.0\n    #define FXAA_QUALITY_P8 2.0\n    #define FXAA_QUALITY_P9 2.0\n    #define FXAA_QUALITY_P10 4.0\n    #define FXAA_QUALITY_P11 8.0\n#endif\n\n#define FxaaBool bool\n#define FxaaFloat float\n#define FxaaFloat2 vec2\n#define FxaaFloat3 vec3\n#define FxaaFloat4 vec4\n#define FxaaHalf float\n#define FxaaHalf2 vec2\n#define FxaaHalf3 vec3\n#define FxaaHalf4 vec4\n#define FxaaInt2 vec2\n#define FxaaTex sampler2D\n\n#define FxaaSat(x) clamp(x, 0.0, 1.0)\n#define FxaaTexTop(t, p) texture2D(t, p)\n#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\n\nFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n\nFxaaFloat4 FxaaPixelShader(\n    //\n    // Use noperspective interpolation here (turn off perspective interpolation).\n    // {xy} = center of pixel\n    FxaaFloat2 pos,\n    //\n    // Input color texture.\n    // {rgb_} = color in linear or perceptual color space\n    // if (FXAA_GREEN_AS_LUMA == 0)\n    //     {___a} = luma in perceptual color space (not linear)\n    FxaaTex tex,\n    //\n    // Only used on FXAA Quality.\n    // This must be from a constant/uniform.\n    // {x_} = 1.0/screenWidthInPixels\n    // {_y} = 1.0/screenHeightInPixels\n    FxaaFloat2 fxaaQualityRcpFrame,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_SUBPIX define.\n    // It is here now to allow easier tuning.\n    // Choose the amount of sub-pixel aliasing removal.\n    // This can effect sharpness.\n    //   1.00 - upper limit (softer)\n    //   0.75 - default amount of filtering\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n    //   0.25 - almost off\n    //   0.00 - completely off\n    FxaaFloat fxaaQualitySubpix,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n    // It is here now to allow easier tuning.\n    // The minimum amount of local contrast required to apply algorithm.\n    //   0.333 - too little (faster)\n    //   0.250 - low quality\n    //   0.166 - default\n    //   0.125 - high quality\n    //   0.063 - overkill (slower)\n    FxaaFloat fxaaQualityEdgeThreshold,\n    //\n    // Only used on FXAA Quality.\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n    // It is here now to allow easier tuning.\n    // Trims the algorithm from processing darks.\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n    //   0.0625 - high quality (faster)\n    //   0.0312 - visible limit (slower)\n    // Special notes when using FXAA_GREEN_AS_LUMA,\n    //   Likely want to set this to zero.\n    //   As colors that are mostly not-green\n    //   will appear very dark in the green channel!\n    //   Tune by looking at mostly non-green content,\n    //   then start at zero and increase until aliasing is a problem.\n    FxaaFloat fxaaQualityEdgeThresholdMin\n) {\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posM;\n    posM.x = pos.x;\n    posM.y = pos.y;\n    FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n    #define lumaM rgbyM.y\n    FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n/*--------------------------------------------------------------------------*/\n    FxaaFloat maxSM = max(lumaS, lumaM);\n    FxaaFloat minSM = min(lumaS, lumaM);\n    FxaaFloat maxESM = max(lumaE, maxSM);\n    FxaaFloat minESM = min(lumaE, minSM);\n    FxaaFloat maxWN = max(lumaN, lumaW);\n    FxaaFloat minWN = min(lumaN, lumaW);\n    FxaaFloat rangeMax = max(maxWN, maxESM);\n    FxaaFloat rangeMin = min(minWN, minESM);\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n    FxaaFloat range = rangeMax - rangeMin;\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    FxaaBool earlyExit = range < rangeMaxClamped;\n/*--------------------------------------------------------------------------*/\n    if(earlyExit)\n        return rgbyM;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n    FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNS = lumaN + lumaS;\n    FxaaFloat lumaWE = lumaW + lumaE;\n    FxaaFloat subpixRcpRange = 1.0/range;\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n/*--------------------------------------------------------------------------*/\n    if(!horzSpan) lumaN = lumaW;\n    if(!horzSpan) lumaS = lumaE;\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat gradientN = lumaN - lumaM;\n    FxaaFloat gradientS = lumaS - lumaM;\n    FxaaFloat lumaNN = lumaN + lumaM;\n    FxaaFloat lumaSS = lumaS + lumaM;\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n    if(pairN) lengthSign = -lengthSign;\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posB;\n    posB.x = posM.x;\n    posB.y = posM.y;\n    FxaaFloat2 offNP;\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n    if(!horzSpan) posB.x += lengthSign * 0.5;\n    if( horzSpan) posB.y += lengthSign * 0.5;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat2 posN;\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat2 posP;\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n    FxaaFloat subpixE = subpixC * subpixC;\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n/*--------------------------------------------------------------------------*/\n    if(!pairN) lumaNN = lumaSS;\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n    FxaaFloat subpixF = subpixD * subpixE;\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\n/*--------------------------------------------------------------------------*/\n    lumaEndN -= lumaNN * 0.5;\n    lumaEndP -= lumaNN * 0.5;\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n    FxaaBool doneNP = (!doneN) || (!doneP);\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n/*--------------------------------------------------------------------------*/\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 3)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 4)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 5)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 6)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n/*--------------------------------------------------------------------------*/\n                        #if (FXAA_QUALITY_PS > 7)\n                        if(doneNP) {\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                            doneN = abs(lumaEndN) >= gradientScaled;\n                            doneP = abs(lumaEndP) >= gradientScaled;\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n                            doneNP = (!doneN) || (!doneP);\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n/*--------------------------------------------------------------------------*/\n    #if (FXAA_QUALITY_PS > 8)\n    if(doneNP) {\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n        doneNP = (!doneN) || (!doneP);\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n/*--------------------------------------------------------------------------*/\n        #if (FXAA_QUALITY_PS > 9)\n        if(doneNP) {\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n            doneN = abs(lumaEndN) >= gradientScaled;\n            doneP = abs(lumaEndP) >= gradientScaled;\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n            doneNP = (!doneN) || (!doneP);\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n/*--------------------------------------------------------------------------*/\n            #if (FXAA_QUALITY_PS > 10)\n            if(doneNP) {\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                doneN = abs(lumaEndN) >= gradientScaled;\n                doneP = abs(lumaEndP) >= gradientScaled;\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n                doneNP = (!doneN) || (!doneP);\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n/*--------------------------------------------------------------------------*/\n                #if (FXAA_QUALITY_PS > 11)\n                if(doneNP) {\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                    doneN = abs(lumaEndN) >= gradientScaled;\n                    doneP = abs(lumaEndP) >= gradientScaled;\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n                    doneNP = (!doneN) || (!doneP);\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n/*--------------------------------------------------------------------------*/\n                    #if (FXAA_QUALITY_PS > 12)\n                    if(doneNP) {\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n                        doneN = abs(lumaEndN) >= gradientScaled;\n                        doneP = abs(lumaEndP) >= gradientScaled;\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n                        doneNP = (!doneN) || (!doneP);\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n    #endif\n/*--------------------------------------------------------------------------*/\n                        }\n                        #endif\n/*--------------------------------------------------------------------------*/\n                    }\n                    #endif\n/*--------------------------------------------------------------------------*/\n                }\n                #endif\n/*--------------------------------------------------------------------------*/\n            }\n            #endif\n/*--------------------------------------------------------------------------*/\n        }\n        #endif\n/*--------------------------------------------------------------------------*/\n    }\n/*--------------------------------------------------------------------------*/\n    FxaaFloat dstN = posM.x - posN.x;\n    FxaaFloat dstP = posP.x - posM.x;\n    if(!horzSpan) dstN = posM.y - posN.y;\n    if(!horzSpan) dstP = posP.y - posM.y;\n/*--------------------------------------------------------------------------*/\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n    FxaaFloat spanLength = (dstP + dstN);\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\n/*--------------------------------------------------------------------------*/\n    FxaaBool directionN = dstN < dstP;\n    FxaaFloat dst = min(dstN, dstP);\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n    FxaaFloat subpixG = subpixF * subpixF;\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n/*--------------------------------------------------------------------------*/\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n    return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n}\n"},239578:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 u_initialColor;\n\n#if TEXTURE_UNITS > 0\nuniform sampler2D u_dayTextures[TEXTURE_UNITS];\nuniform vec4 u_dayTextureTranslationAndScale[TEXTURE_UNITS];\nuniform bool u_dayTextureUseWebMercatorT[TEXTURE_UNITS];\n\n#ifdef APPLY_ALPHA\nuniform float u_dayTextureAlpha[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_DAY_NIGHT_ALPHA\nuniform float u_dayTextureNightAlpha[TEXTURE_UNITS];\nuniform float u_dayTextureDayAlpha[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_SPLIT\nuniform float u_dayTextureSplit[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_BRIGHTNESS\nuniform float u_dayTextureBrightness[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_CONTRAST\nuniform float u_dayTextureContrast[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_HUE\nuniform float u_dayTextureHue[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_SATURATION\nuniform float u_dayTextureSaturation[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_GAMMA\nuniform float u_dayTextureOneOverGamma[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_IMAGERY_CUTOUT\nuniform vec4 u_dayTextureCutoutRectangles[TEXTURE_UNITS];\n#endif\n\n#ifdef APPLY_COLOR_TO_ALPHA\nuniform vec4 u_colorsToAlpha[TEXTURE_UNITS];\n#endif\n\nuniform vec4 u_dayTextureTexCoordsRectangle[TEXTURE_UNITS];\n#endif\n\n#ifdef SHOW_REFLECTIVE_OCEAN\nuniform sampler2D u_waterMask;\nuniform vec4 u_waterMaskTranslationAndScale;\nuniform float u_zoomedOutOceanSpecularIntensity;\n#endif\n\n#ifdef SHOW_OCEAN_WAVES\nuniform sampler2D u_oceanNormalMap;\n#endif\n\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\nuniform vec2 u_lightingFadeDistance;\n#endif\n\n#ifdef TILE_LIMIT_RECTANGLE\nuniform vec4 u_cartographicLimitRectangle;\n#endif\n\n#ifdef GROUND_ATMOSPHERE\nuniform vec2 u_nightFadeDistance;\n#endif\n\n#ifdef ENABLE_CLIPPING_PLANES\nuniform highp sampler2D u_clippingPlanes;\nuniform mat4 u_clippingPlanesMatrix;\nuniform vec4 u_clippingPlanesEdgeStyle;\n#endif\n\n#if defined(FOG) && defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING))\nuniform float u_minimumBrightness;\n#endif\n\n#ifdef COLOR_CORRECT\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\n#endif\n\n#ifdef HIGHLIGHT_FILL_TILE\nuniform vec4 u_fillHighlightColor;\n#endif\n\n#ifdef TRANSLUCENT\nuniform vec4 u_frontFaceAlphaByDistance;\nuniform vec4 u_backFaceAlphaByDistance;\nuniform vec4 u_translucencyRectangle;\n#endif\n\n#ifdef UNDERGROUND_COLOR\nuniform vec4 u_undergroundColor;\nuniform vec4 u_undergroundColorAlphaByDistance;\n#endif\n\n#ifdef ENABLE_VERTEX_LIGHTING\nuniform float u_lambertDiffuseMultiplier;\n#endif\n\nvarying vec3 v_positionMC;\nvarying vec3 v_positionEC;\nvarying vec3 v_textureCoordinates;\nvarying vec3 v_normalMC;\nvarying vec3 v_normalEC;\n\n#ifdef APPLY_MATERIAL\nvarying float v_height;\nvarying float v_slope;\nvarying float v_aspect;\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\nvarying float v_distance;\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\nvarying vec3 v_fogRayleighColor;\nvarying vec3 v_fogMieColor;\n#endif\n\n#ifdef GROUND_ATMOSPHERE\nvarying vec3 v_rayleighColor;\nvarying vec3 v_mieColor;\n#endif\n\n#if defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\nfloat interpolateByDistance(vec4 nearFarScalar, float distance)\n{\n    float startDistance = nearFarScalar.x;\n    float startValue = nearFarScalar.y;\n    float endDistance = nearFarScalar.z;\n    float endValue = nearFarScalar.w;\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0);\n    return mix(startValue, endValue, t);\n}\n#endif\n\n#if defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT) || defined(APPLY_MATERIAL)\nvec4 alphaBlend(vec4 sourceColor, vec4 destinationColor)\n{\n    return sourceColor * vec4(sourceColor.aaa, 1.0) + destinationColor * (1.0 - sourceColor.a);\n}\n#endif\n\n#ifdef TRANSLUCENT\nbool inTranslucencyRectangle()\n{\n    return\n        v_textureCoordinates.x > u_translucencyRectangle.x &&\n        v_textureCoordinates.x < u_translucencyRectangle.z &&\n        v_textureCoordinates.y > u_translucencyRectangle.y &&\n        v_textureCoordinates.y < u_translucencyRectangle.w;\n}\n#endif\n\nvec4 sampleAndBlend(\n    vec4 previousColor,\n    sampler2D textureToSample,\n    vec2 tileTextureCoordinates,\n    vec4 textureCoordinateRectangle,\n    vec4 textureCoordinateTranslationAndScale,\n    float textureAlpha,\n    float textureNightAlpha,\n    float textureDayAlpha,\n    float textureBrightness,\n    float textureContrast,\n    float textureHue,\n    float textureSaturation,\n    float textureOneOverGamma,\n    float split,\n    vec4 colorToAlpha,\n    float nightBlend)\n{\n    // This crazy step stuff sets the alpha to 0.0 if this following condition is true:\n    //    tileTextureCoordinates.s < textureCoordinateRectangle.s ||\n    //    tileTextureCoordinates.s > textureCoordinateRectangle.p ||\n    //    tileTextureCoordinates.t < textureCoordinateRectangle.t ||\n    //    tileTextureCoordinates.t > textureCoordinateRectangle.q\n    // In other words, the alpha is zero if the fragment is outside the rectangle\n    // covered by this texture.  Would an actual 'if' yield better performance?\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.st, tileTextureCoordinates);\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\n\n    alphaMultiplier = step(vec2(0.0), textureCoordinateRectangle.pq - tileTextureCoordinates);\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\n\n#if defined(APPLY_DAY_NIGHT_ALPHA) && defined(ENABLE_DAYNIGHT_SHADING)\n    textureAlpha *= mix(textureDayAlpha, textureNightAlpha, nightBlend);\n#endif\n\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\n    vec4 value = texture2D(textureToSample, textureCoordinates);\n    vec3 color = value.rgb;\n    float alpha = value.a;\n\n#ifdef APPLY_COLOR_TO_ALPHA\n    vec3 colorDiff = abs(color.rgb - colorToAlpha.rgb);\n    colorDiff.r = max(max(colorDiff.r, colorDiff.g), colorDiff.b);\n    alpha = czm_branchFreeTernary(colorDiff.r < colorToAlpha.a, 0.0, alpha);\n#endif\n\n#if !defined(APPLY_GAMMA)\n    vec4 tempColor = czm_gammaCorrect(vec4(color, alpha));\n    color = tempColor.rgb;\n    alpha = tempColor.a;\n#else\n    color = pow(color, vec3(textureOneOverGamma));\n#endif\n\n#ifdef APPLY_SPLIT\n    float splitPosition = czm_imagerySplitPosition;\n    // Split to the left\n    if (split < 0.0 && gl_FragCoord.x > splitPosition) {\n       alpha = 0.0;\n    }\n    // Split to the right\n    else if (split > 0.0 && gl_FragCoord.x < splitPosition) {\n       alpha = 0.0;\n    }\n#endif\n\n#ifdef APPLY_BRIGHTNESS\n    color = mix(vec3(0.0), color, textureBrightness);\n#endif\n\n#ifdef APPLY_CONTRAST\n    color = mix(vec3(0.5), color, textureContrast);\n#endif\n\n#ifdef APPLY_HUE\n    color = czm_hue(color, textureHue);\n#endif\n\n#ifdef APPLY_SATURATION\n    color = czm_saturation(color, textureSaturation);\n#endif\n\n    float sourceAlpha = alpha * textureAlpha;\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\n    outAlpha += sign(outAlpha) - 1.0;\n\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\n\n    // When rendering imagery for a tile in multiple passes,\n    // some GPU/WebGL implementation combinations will not blend fragments in\n    // additional passes correctly if their computation includes an unmasked\n    // divide-by-zero operation,\n    // even if it's not in the output or if the output has alpha zero.\n    //\n    // For example, without sanitization for outAlpha,\n    // this renders without artifacts:\n    //   if (outAlpha == 0.0) { outColor = vec3(0.0); }\n    //\n    // but using czm_branchFreeTernary will cause portions of the tile that are\n    // alpha-zero in the additional pass to render as black instead of blending\n    // with the previous pass:\n    //   outColor = czm_branchFreeTernary(outAlpha == 0.0, vec3(0.0), outColor);\n    //\n    // So instead, sanitize against divide-by-zero,\n    // store this state on the sign of outAlpha, and correct on return.\n\n    return vec4(outColor, max(outAlpha, 0.0));\n}\n\nvec3 colorCorrect(vec3 rgb) {\n#ifdef COLOR_CORRECT\n    // Convert rgb color to hsb\n    vec3 hsb = czm_RGBToHSB(rgb);\n    // Perform hsb shift\n    hsb.x += u_hsbShift.x; // hue\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\n    // Convert shifted hsb back to rgb\n    rgb = czm_HSBToRGB(hsb);\n#endif\n    return rgb;\n}\n\nvec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates, float nightBlend);\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float specularMapValue, float fade);\n\n#ifdef GROUND_ATMOSPHERE\nvec3 computeGroundAtmosphereColor(vec3 fogColor, vec4 finalColor, vec3 atmosphereLightDirection, float cameraDist);\n#endif\n\nconst float fExposure = 2.0;\n\nvoid main()\n{\n#ifdef TILE_LIMIT_RECTANGLE\n    if (v_textureCoordinates.x < u_cartographicLimitRectangle.x || u_cartographicLimitRectangle.z < v_textureCoordinates.x ||\n        v_textureCoordinates.y < u_cartographicLimitRectangle.y || u_cartographicLimitRectangle.w < v_textureCoordinates.y)\n        {\n            discard;\n        }\n#endif\n\n#ifdef ENABLE_CLIPPING_PLANES\n    float clipDistance = clip(gl_FragCoord, u_clippingPlanes, u_clippingPlanesMatrix);\n#endif\n\n#if defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING) || defined(HDR)\n    vec3 normalMC = czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0));   // normalized surface normal in model coordinates\n    vec3 normalEC = czm_normal3D * normalMC;                                         // normalized surface normal in eye coordiantes\n#endif\n\n#if defined(APPLY_DAY_NIGHT_ALPHA) && defined(ENABLE_DAYNIGHT_SHADING)\n    float nightBlend = 1.0 - clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * 5.0, 0.0, 1.0);\n#else\n    float nightBlend = 0.0;\n#endif\n\n    // The clamp below works around an apparent bug in Chrome Canary v23.0.1241.0\n    // where the fragment shader sees textures coordinates < 0.0 and > 1.0 for the\n    // fragments on the edges of tiles even though the vertex shader is outputting\n    // coordinates strictly in the 0-1 range.\n    vec4 color = computeDayColor(u_initialColor, clamp(v_textureCoordinates, 0.0, 1.0), nightBlend);\n\n#ifdef SHOW_TILE_BOUNDARIES\n    if (v_textureCoordinates.x < (1.0/256.0) || v_textureCoordinates.x > (255.0/256.0) ||\n        v_textureCoordinates.y < (1.0/256.0) || v_textureCoordinates.y > (255.0/256.0))\n    {\n        color = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n#endif\n\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\n    float cameraDist;\n    if (czm_sceneMode == czm_sceneMode2D)\n    {\n        cameraDist = max(czm_frustumPlanes.x - czm_frustumPlanes.y, czm_frustumPlanes.w - czm_frustumPlanes.z) * 0.5;\n    }\n    else if (czm_sceneMode == czm_sceneModeColumbusView)\n    {\n        cameraDist = -czm_view[3].z;\n    }\n    else\n    {\n        cameraDist = length(czm_view[3]);\n    }\n    float fadeOutDist = u_lightingFadeDistance.x;\n    float fadeInDist = u_lightingFadeDistance.y;\n    if (czm_sceneMode != czm_sceneMode3D) {\n        vec3 radii = czm_ellipsoidRadii;\n        float maxRadii = max(radii.x, max(radii.y, radii.z));\n        fadeOutDist -= maxRadii;\n        fadeInDist -= maxRadii;\n    }\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\n#else\n    float fade = 0.0;\n#endif\n\n#ifdef SHOW_REFLECTIVE_OCEAN\n    vec2 waterMaskTranslation = u_waterMaskTranslationAndScale.xy;\n    vec2 waterMaskScale = u_waterMaskTranslationAndScale.zw;\n    vec2 waterMaskTextureCoordinates = v_textureCoordinates.xy * waterMaskScale + waterMaskTranslation;\n    waterMaskTextureCoordinates.y = 1.0 - waterMaskTextureCoordinates.y;\n\n    float mask = texture2D(u_waterMask, waterMaskTextureCoordinates).r;\n\n    if (mask > 0.0)\n    {\n        mat3 enuToEye = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalEC);\n\n        vec2 ellipsoidTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC);\n        vec2 ellipsoidFlippedTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC.zyx);\n\n        vec2 textureCoordinates = mix(ellipsoidTextureCoordinates, ellipsoidFlippedTextureCoordinates, czm_morphTime * smoothstep(0.9, 0.95, normalMC.z));\n\n        color = computeWaterColor(v_positionEC, textureCoordinates, enuToEye, color, mask, fade);\n    }\n#endif\n\n#ifdef APPLY_MATERIAL\n    czm_materialInput materialInput;\n    materialInput.st = v_textureCoordinates.st;\n    materialInput.normalEC = normalize(v_normalEC);\n    materialInput.positionToEyeEC = -v_positionEC;\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalize(v_normalEC));     \n    materialInput.slope = v_slope;\n    materialInput.height = v_height;\n    materialInput.aspect = v_aspect;\n    czm_material material = czm_getMaterial(materialInput);\n    vec4 materialColor = vec4(material.diffuse, material.alpha);\n    color = alphaBlend(materialColor, color);\n#endif\n\n#ifdef ENABLE_VERTEX_LIGHTING\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalize(v_normalEC)) * u_lambertDiffuseMultiplier + 0.3, 0.0, 1.0);\n    vec4 finalColor = vec4(color.rgb * czm_lightColor * diffuseIntensity, color.a);\n#elif defined(ENABLE_DAYNIGHT_SHADING)\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\n    diffuseIntensity = mix(1.0, diffuseIntensity, fade);\n    vec4 finalColor = vec4(color.rgb * czm_lightColor * diffuseIntensity, color.a);\n#else\n    vec4 finalColor = color;\n#endif\n\n#ifdef ENABLE_CLIPPING_PLANES\n    vec4 clippingPlanesEdgeColor = vec4(1.0);\n    clippingPlanesEdgeColor.rgb = u_clippingPlanesEdgeStyle.rgb;\n    float clippingPlanesEdgeWidth = u_clippingPlanesEdgeStyle.a;\n\n    if (clipDistance < clippingPlanesEdgeWidth)\n    {\n        finalColor = clippingPlanesEdgeColor;\n    }\n#endif\n\n#ifdef HIGHLIGHT_FILL_TILE\n    finalColor = vec4(mix(finalColor.rgb, u_fillHighlightColor.rgb, u_fillHighlightColor.a), finalColor.a);\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\n    vec3 fogColor = colorCorrect(v_fogMieColor) + finalColor.rgb * colorCorrect(v_fogRayleighColor);\n#ifndef HDR\n    fogColor = vec3(1.0) - exp(-fExposure * fogColor);\n#endif\n#endif\n\n#if defined(DYNAMIC_ATMOSPHERE_LIGHTING_FROM_SUN)\n    vec3 atmosphereLightDirection = czm_sunDirectionWC;\n#else\n    vec3 atmosphereLightDirection = czm_lightDirectionWC;\n#endif\n\n#ifdef FOG\n#if defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING))\n    float darken = clamp(dot(normalize(czm_viewerPositionWC), atmosphereLightDirection), u_minimumBrightness, 1.0);\n    fogColor *= darken;\n#endif\n\n#ifdef HDR\n    const float modifier = 0.15;\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor, modifier), finalColor.a);\n#else\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor), finalColor.a);\n#endif\n#endif\n\n#ifdef GROUND_ATMOSPHERE\n    if (!czm_backFacing())\n    {\n        vec3 groundAtmosphereColor = computeGroundAtmosphereColor(fogColor, finalColor, atmosphereLightDirection, cameraDist);\n        finalColor = vec4(mix(finalColor.rgb, groundAtmosphereColor, fade), finalColor.a);\n    }\n#endif\n\n#ifdef UNDERGROUND_COLOR\n    if (czm_backFacing())\n    {\n        float distanceFromEllipsoid = max(czm_eyeHeight, 0.0);\n        float distance = max(v_distance - distanceFromEllipsoid, 0.0);\n        float blendAmount = interpolateByDistance(u_undergroundColorAlphaByDistance, distance);\n        vec4 undergroundColor = vec4(u_undergroundColor.rgb, u_undergroundColor.a * blendAmount);\n        finalColor = alphaBlend(undergroundColor, finalColor);\n    }\n#endif\n\n#ifdef TRANSLUCENT\n    if (inTranslucencyRectangle())\n    {\n      vec4 alphaByDistance = gl_FrontFacing ? u_frontFaceAlphaByDistance : u_backFaceAlphaByDistance;\n      finalColor.a *= interpolateByDistance(alphaByDistance, v_distance);\n    }\n#endif\n\n    gl_FragColor = finalColor;\n}\n\n#ifdef GROUND_ATMOSPHERE\nvec3 computeGroundAtmosphereColor(vec3 fogColor, vec4 finalColor, vec3 atmosphereLightDirection, float cameraDist)\n{\n#if defined(PER_FRAGMENT_GROUND_ATMOSPHERE) && defined(DYNAMIC_ATMOSPHERE_LIGHTING) && (defined(ENABLE_DAYNIGHT_SHADING) || defined(ENABLE_VERTEX_LIGHTING))\n    float mpp = czm_metersPerPixel(vec4(0.0, 0.0, -czm_currentFrustum.x, 1.0), 1.0);\n    vec2 xy = gl_FragCoord.xy / czm_viewport.zw * 2.0 - vec2(1.0);\n    xy *= czm_viewport.zw * mpp * 0.5;\n\n    vec3 direction = normalize(vec3(xy, -czm_currentFrustum.x));\n    czm_ray ray = czm_ray(vec3(0.0), direction);\n\n    vec3 ellipsoid_center = czm_view[3].xyz;\n\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\n\n    vec3 ellipsoidPosition = czm_pointAlongRay(ray, intersection.start);\n    ellipsoidPosition = (czm_inverseView * vec4(ellipsoidPosition, 1.0)).xyz;\n    AtmosphereColor atmosColor = computeGroundAtmosphereFromSpace(ellipsoidPosition, true, atmosphereLightDirection);\n\n    vec3 groundAtmosphereColor = colorCorrect(atmosColor.mie) + finalColor.rgb * colorCorrect(atmosColor.rayleigh);\n#ifndef HDR\n    groundAtmosphereColor = vec3(1.0) - exp(-fExposure * groundAtmosphereColor);\n#endif\n\n    float fadeInDist = u_nightFadeDistance.x;\n    float fadeOutDist = u_nightFadeDistance.y;\n\n    float sunlitAtmosphereIntensity = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\n\n#ifdef HDR\n    // Some tweaking to make HDR look better\n    sunlitAtmosphereIntensity = max(sunlitAtmosphereIntensity * sunlitAtmosphereIntensity, 0.03);\n#endif\n\n    groundAtmosphereColor = mix(groundAtmosphereColor, fogColor, sunlitAtmosphereIntensity);\n#else\n    vec3 groundAtmosphereColor = fogColor;\n#endif\n\n#ifdef HDR\n    // Some tweaking to make HDR look better\n    groundAtmosphereColor = czm_saturation(groundAtmosphereColor, 1.6);\n#endif\n\n    return groundAtmosphereColor;\n}\n#endif\n\n#ifdef SHOW_REFLECTIVE_OCEAN\n\nfloat waveFade(float edge0, float edge1, float x)\n{\n    float y = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return pow(1.0 - y, 5.0);\n}\n\nfloat linearFade(float edge0, float edge1, float x)\n{\n    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\n// Based on water rendering by Jonas Wagner:\n// http://29a.ch/2012/7/19/webgl-terrain-rendering-water-fog\n\n// low altitude wave settings\nconst float oceanFrequencyLowAltitude = 825000.0;\nconst float oceanAnimationSpeedLowAltitude = 0.004;\nconst float oceanOneOverAmplitudeLowAltitude = 1.0 / 2.0;\nconst float oceanSpecularIntensity = 0.5;\n\n// high altitude wave settings\nconst float oceanFrequencyHighAltitude = 125000.0;\nconst float oceanAnimationSpeedHighAltitude = 0.008;\nconst float oceanOneOverAmplitudeHighAltitude = 1.0 / 2.0;\n\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float maskValue, float fade)\n{\n    vec3 positionToEyeEC = -positionEyeCoordinates;\n    float positionToEyeECLength = length(positionToEyeEC);\n\n    // The double normalize below works around a bug in Firefox on Android devices.\n    vec3 normalizedPositionToEyeEC = normalize(normalize(positionToEyeEC));\n\n    // Fade out the waves as the camera moves far from the surface.\n    float waveIntensity = waveFade(70000.0, 1000000.0, positionToEyeECLength);\n\n#ifdef SHOW_OCEAN_WAVES\n    // high altitude waves\n    float time = czm_frameNumber * oceanAnimationSpeedHighAltitude;\n    vec4 noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyHighAltitude, time, 0.0);\n    vec3 normalTangentSpaceHighAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeHighAltitude);\n\n    // low altitude waves\n    time = czm_frameNumber * oceanAnimationSpeedLowAltitude;\n    noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyLowAltitude, time, 0.0);\n    vec3 normalTangentSpaceLowAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeLowAltitude);\n\n    // blend the 2 wave layers based on distance to surface\n    float highAltitudeFade = linearFade(0.0, 60000.0, positionToEyeECLength);\n    float lowAltitudeFade = 1.0 - linearFade(20000.0, 60000.0, positionToEyeECLength);\n    vec3 normalTangentSpace =\n        (highAltitudeFade * normalTangentSpaceHighAltitude) +\n        (lowAltitudeFade * normalTangentSpaceLowAltitude);\n    normalTangentSpace = normalize(normalTangentSpace);\n\n    // fade out the normal perturbation as we move farther from the water surface\n    normalTangentSpace.xy *= waveIntensity;\n    normalTangentSpace = normalize(normalTangentSpace);\n#else\n    vec3 normalTangentSpace = vec3(0.0, 0.0, 1.0);\n#endif\n\n    vec3 normalEC = enuToEye * normalTangentSpace;\n\n    const vec3 waveHighlightColor = vec3(0.3, 0.45, 0.6);\n\n    // Use diffuse light to highlight the waves\n    float diffuseIntensity = czm_getLambertDiffuse(czm_lightDirectionEC, normalEC) * maskValue;\n    vec3 diffuseHighlight = waveHighlightColor * diffuseIntensity * (1.0 - fade);\n\n#ifdef SHOW_OCEAN_WAVES\n    // Where diffuse light is low or non-existent, use wave highlights based solely on\n    // the wave bumpiness and no particular light direction.\n    float tsPerturbationRatio = normalTangentSpace.z;\n    vec3 nonDiffuseHighlight = mix(waveHighlightColor * 5.0 * (1.0 - tsPerturbationRatio), vec3(0.0), diffuseIntensity);\n#else\n    vec3 nonDiffuseHighlight = vec3(0.0);\n#endif\n\n    // Add specular highlights in 3D, and in all modes when zoomed in.\n    float specularIntensity = czm_getSpecular(czm_lightDirectionEC, normalizedPositionToEyeEC, normalEC, 10.0);\n    float surfaceReflectance = mix(0.0, mix(u_zoomedOutOceanSpecularIntensity, oceanSpecularIntensity, waveIntensity), maskValue);\n    float specular = specularIntensity * surfaceReflectance;\n\n#ifdef HDR\n    specular *= 1.4;\n\n    float e = 0.2;\n    float d = 3.3;\n    float c = 1.7;\n\n    vec3 color = imageryColor.rgb + (c * (vec3(e) + imageryColor.rgb * d) * (diffuseHighlight + nonDiffuseHighlight + specular));\n#else\n    vec3 color = imageryColor.rgb + diffuseHighlight + nonDiffuseHighlight + specular;\n#endif\n\n    return vec4(color, imageryColor.a);\n}\n\n#endif // #ifdef SHOW_REFLECTIVE_OCEAN\n"},850551:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef QUANTIZATION_BITS12\nattribute vec4 compressed0;\nattribute float compressed1;\n#else\nattribute vec4 position3DAndHeight;\nattribute vec4 textureCoordAndEncodedNormals;\n#endif\n\n#ifdef GEODETIC_SURFACE_NORMALS\nattribute vec3 geodeticSurfaceNormal;\n#endif\n\n#ifdef EXAGGERATION\nuniform vec2 u_terrainExaggerationAndRelativeHeight;\n#endif\n\nuniform vec3 u_center3D;\nuniform mat4 u_modifiedModelView;\nuniform mat4 u_modifiedModelViewProjection;\nuniform vec4 u_tileRectangle;\n\n// Uniforms for 2D Mercator projection\nuniform vec2 u_southAndNorthLatitude;\nuniform vec2 u_southMercatorYAndOneOverHeight;\n\nvarying vec3 v_positionMC;\nvarying vec3 v_positionEC;\n\nvarying vec3 v_textureCoordinates;\nvarying vec3 v_normalMC;\nvarying vec3 v_normalEC;\n\n#ifdef APPLY_MATERIAL\nvarying float v_slope;\nvarying float v_aspect;\nvarying float v_height;\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\nvarying float v_distance;\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\nvarying vec3 v_fogMieColor;\nvarying vec3 v_fogRayleighColor;\n#endif\n\n// These functions are generated at runtime.\nvec4 getPosition(vec3 position, float height, vec2 textureCoordinates);\nfloat get2DYPositionFraction(vec2 textureCoordinates);\n\nvec4 getPosition3DMode(vec3 position, float height, vec2 textureCoordinates)\n{\n    return u_modifiedModelViewProjection * vec4(position, 1.0);\n}\n\nfloat get2DMercatorYPositionFraction(vec2 textureCoordinates)\n{\n    // The width of a tile at level 11, in radians and assuming a single root tile, is\n    //   2.0 * czm_pi / pow(2.0, 11.0)\n    // We want to just linearly interpolate the 2D position from the texture coordinates\n    // when we're at this level or higher.  The constant below is the expression\n    // above evaluated and then rounded up at the 4th significant digit.\n    const float maxTileWidth = 0.003068;\n    float positionFraction = textureCoordinates.y;\n    float southLatitude = u_southAndNorthLatitude.x;\n    float northLatitude = u_southAndNorthLatitude.y;\n    if (northLatitude - southLatitude > maxTileWidth)\n    {\n        float southMercatorY = u_southMercatorYAndOneOverHeight.x;\n        float oneOverMercatorHeight = u_southMercatorYAndOneOverHeight.y;\n\n        float currentLatitude = mix(southLatitude, northLatitude, textureCoordinates.y);\n        currentLatitude = clamp(currentLatitude, -czm_webMercatorMaxLatitude, czm_webMercatorMaxLatitude);\n        positionFraction = czm_latitudeToWebMercatorFraction(currentLatitude, southMercatorY, oneOverMercatorHeight);\n    }\n    return positionFraction;\n}\n\nfloat get2DGeographicYPositionFraction(vec2 textureCoordinates)\n{\n    return textureCoordinates.y;\n}\n\nvec4 getPositionPlanarEarth(vec3 position, float height, vec2 textureCoordinates)\n{\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\n    vec4 rtcPosition2D = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\n    return u_modifiedModelViewProjection * rtcPosition2D;\n}\n\nvec4 getPosition2DMode(vec3 position, float height, vec2 textureCoordinates)\n{\n    return getPositionPlanarEarth(position, 0.0, textureCoordinates);\n}\n\nvec4 getPositionColumbusViewMode(vec3 position, float height, vec2 textureCoordinates)\n{\n    return getPositionPlanarEarth(position, height, textureCoordinates);\n}\n\nvec4 getPositionMorphingMode(vec3 position, float height, vec2 textureCoordinates)\n{\n    // We do not do RTC while morphing, so there is potential for jitter.\n    // This is unlikely to be noticeable, though.\n    vec3 position3DWC = position + u_center3D;\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\n    vec4 position2DWC = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\n    vec4 morphPosition = czm_columbusViewMorph(position2DWC, vec4(position3DWC, 1.0), czm_morphTime);\n    return czm_modelViewProjection * morphPosition;\n}\n\n#ifdef QUANTIZATION_BITS12\nuniform vec2 u_minMaxHeight;\nuniform mat4 u_scaleAndBias;\n#endif\n\nvoid main()\n{\n#ifdef QUANTIZATION_BITS12\n    vec2 xy = czm_decompressTextureCoordinates(compressed0.x);\n    vec2 zh = czm_decompressTextureCoordinates(compressed0.y);\n    vec3 position = vec3(xy, zh.x);\n    float height = zh.y;\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressed0.z);\n\n    height = height * (u_minMaxHeight.y - u_minMaxHeight.x) + u_minMaxHeight.x;\n    position = (u_scaleAndBias * vec4(position, 1.0)).xyz;\n\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\n    float encodedNormal = compressed1;\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\n    float encodedNormal = 0.0;\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)\n    float webMercatorT = textureCoordinates.y;\n    float encodedNormal = compressed0.w;\n#else\n    float webMercatorT = textureCoordinates.y;\n    float encodedNormal = 0.0;\n#endif\n\n#else\n    // A single float per element\n    vec3 position = position3DAndHeight.xyz;\n    float height = position3DAndHeight.w;\n    vec2 textureCoordinates = textureCoordAndEncodedNormals.xy;\n\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\n    float webMercatorT = textureCoordAndEncodedNormals.z;\n    float encodedNormal = textureCoordAndEncodedNormals.w;\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\n    float webMercatorT = textureCoordinates.y;\n    float encodedNormal = textureCoordAndEncodedNormals.z;\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\n    float webMercatorT = textureCoordAndEncodedNormals.z;\n    float encodedNormal = 0.0;\n#else\n    float webMercatorT = textureCoordinates.y;\n    float encodedNormal = 0.0;\n#endif\n\n#endif\n\n    vec3 position3DWC = position + u_center3D;\n\n#ifdef GEODETIC_SURFACE_NORMALS\n    vec3 ellipsoidNormal = geodeticSurfaceNormal;\n#else\n    vec3 ellipsoidNormal = normalize(position3DWC);\n#endif\n\n#if defined(EXAGGERATION) && defined(GEODETIC_SURFACE_NORMALS)\n    float exaggeration = u_terrainExaggerationAndRelativeHeight.x;\n    float relativeHeight = u_terrainExaggerationAndRelativeHeight.y;\n    float newHeight = (height - relativeHeight) * exaggeration + relativeHeight;\n\n    // stop from going through center of earth\n    float minRadius = min(min(czm_ellipsoidRadii.x, czm_ellipsoidRadii.y), czm_ellipsoidRadii.z);\n    newHeight = max(newHeight, -minRadius);\n\n    vec3 offset = ellipsoidNormal * (newHeight - height);\n    position += offset;\n    position3DWC += offset;\n    height = newHeight;\n#endif\n\n    gl_Position = getPosition(position, height, textureCoordinates);\n\n    v_textureCoordinates = vec3(textureCoordinates, webMercatorT);\n\n#if defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\n    v_positionEC = (u_modifiedModelView * vec4(position, 1.0)).xyz;\n    v_positionMC = position3DWC;  // position in model coordinates\n    vec3 normalMC = czm_octDecode(encodedNormal);\n\n#if defined(EXAGGERATION) && defined(GEODETIC_SURFACE_NORMALS)\n    vec3 projection = dot(normalMC, ellipsoidNormal) * ellipsoidNormal;\n    vec3 rejection = normalMC - projection;\n    normalMC = normalize(projection + rejection * exaggeration);\n#endif\n\n    v_normalMC = normalMC;\n    v_normalEC = czm_normal3D * v_normalMC;\n#elif defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING) || defined(GENERATE_POSITION) || defined(HDR)\n    v_positionEC = (u_modifiedModelView * vec4(position, 1.0)).xyz;\n    v_positionMC = position3DWC;  // position in model coordinates\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\n    AtmosphereColor atmosFogColor = computeGroundAtmosphereFromSpace(position3DWC, false, vec3(0.0));\n    v_fogMieColor = atmosFogColor.mie;\n    v_fogRayleighColor = atmosFogColor.rayleigh;\n#endif\n\n#if defined(FOG) || defined(GROUND_ATMOSPHERE) || defined(UNDERGROUND_COLOR) || defined(TRANSLUCENT)\n    v_distance = length((czm_modelView3D * vec4(position3DWC, 1.0)).xyz);\n#endif\n\n#ifdef APPLY_MATERIAL\n    float northPoleZ = czm_ellipsoidRadii.z;\n    vec3 northPolePositionMC = vec3(0.0, 0.0, northPoleZ);\n    vec3 vectorEastMC = normalize(cross(northPolePositionMC - v_positionMC, ellipsoidNormal));\n    float dotProd = abs(dot(ellipsoidNormal, v_normalMC));\n    v_slope = acos(dotProd);\n    vec3 normalRejected = ellipsoidNormal * dotProd;\n    vec3 normalProjected = v_normalMC - normalRejected;\n    vec3 aspectVector = normalize(normalProjected);\n    v_aspect = acos(dot(aspectVector, vectorEastMC));\n    float determ = dot(cross(vectorEastMC, aspectVector), ellipsoidNormal);\n    v_aspect = czm_branchFreeTernary(determ < 0.0, 2.0 * czm_pi - v_aspect, v_aspect);\n    v_height = height;\n#endif\n}\n"},886394:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/*!\n * Atmosphere code:\n *\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Analytical Graphics, Inc.\n */\n\n // Atmosphere:\n //   Code:  http://sponeil.net/\n //   GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\n\nconst float Kr = 0.0025;\nconst float Km = 0.0015;\nconst float ESun = 15.0;\n\nconst float fKrESun = Kr * ESun;\nconst float fKmESun = Km * ESun;\nconst float fKr4PI = Kr * 4.0 * czm_pi;\nconst float fKm4PI = Km * 4.0 * czm_pi;\n\n// Original: vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\nconst vec3 v3InvWavelength = vec3(5.60204474633241, 9.473284437923038, 19.64380261047721);\n\nconst float fScaleDepth = 0.25;\n\nstruct AtmosphereColor\n{\n    vec3 mie;\n    vec3 rayleigh;\n};\n\nconst int nSamples = 2;\nconst float fSamples = 2.0;\n\nfloat scale(float fCos)\n{\n    float x = 1.0 - fCos;\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool dynamicLighting, vec3 lightDirectionWC)\n{\n    float fInnerRadius = czm_ellipsoidRadii.x;\n    float fOuterRadius = czm_ellipsoidRadii.x * 1.025;\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\n\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\n\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n    vec3 v3Ray = v3Pos - czm_viewerPositionWC;\n    float fFar = length(v3Ray);\n    v3Ray /= fFar;\n\n    float fCameraHeight = length(czm_viewerPositionWC);\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\n\n    // This next line is an ANGLE workaround. It is equivalent to B = 2.0 * dot(czm_viewerPositionWC, v3Ray),\n    // which is what it should be, but there are problems at the poles.\n    float B = 2.0 * length(czm_viewerPositionWC) * dot(normalize(czm_viewerPositionWC), v3Ray);\n    float C = fCameraHeight2 - fOuterRadius2;\n    float fDet = max(0.0, B*B - 4.0 * C);\n    float fNear = 0.5 * (-B - sqrt(fDet));\n\n    // Calculate the ray's starting position, then calculate its scattering offset\n    vec3 v3Start = czm_viewerPositionWC + v3Ray * fNear;\n    fFar -= fNear;\n    float fDepth = exp((fInnerRadius - fOuterRadius) / fScaleDepth);\n\n    // The light angle based on the scene's light source would be:\n    //    dot(lightDirectionWC, v3Pos) / length(v3Pos);\n    // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\n\n    float fLightAngle = czm_branchFreeTernary(dynamicLighting, dot(lightDirectionWC, v3Pos) / length(v3Pos), 1.0);\n    float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\n    float fCameraScale = scale(fCameraAngle);\n    float fLightScale = scale(fLightAngle);\n    float fCameraOffset = fDepth*fCameraScale;\n    float fTemp = (fLightScale + fCameraScale);\n\n    // Initialize the scattering loop variables\n    float fSampleLength = fFar / fSamples;\n    float fScaledLength = fSampleLength * fScale;\n    vec3 v3SampleRay = v3Ray * fSampleLength;\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n    // Now loop through the sample rays\n    vec3 v3FrontColor = vec3(0.0);\n    vec3 v3Attenuate = vec3(0.0);\n    for(int i=0; i<nSamples; i++)\n    {\n        float fHeight = length(v3SamplePoint);\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\n        float fScatter = fDepth*fTemp - fCameraOffset;\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\n        v3SamplePoint += v3SampleRay;\n    }\n\n    AtmosphereColor color;\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\n    color.rayleigh = v3Attenuate; // Calculate the attenuation factor for the ground\n\n    return color;\n}\n\n"},291762:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D image;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    vec4 rampColor = texture2D(image, vec2(materialInput.aspect / (2.0 * czm_pi), 0.5));\n    rampColor = czm_gammaCorrect(rampColor);\n    material.diffuse = rampColor.rgb;\n    material.alpha = rampColor.a;\n    return material;\n}\n"},508515:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D image;\nuniform float strength;\nuniform vec2 repeat;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n\n    vec2 centerPixel = fract(repeat * st);\n    float centerBump = texture2D(image, centerPixel).channel;\n\n    float imageWidth = float(imageDimensions.x);\n    vec2 rightPixel = fract(repeat * (st + vec2(1.0 / imageWidth, 0.0)));\n    float rightBump = texture2D(image, rightPixel).channel;\n\n    float imageHeight = float(imageDimensions.y);\n    vec2 leftPixel = fract(repeat * (st + vec2(0.0, 1.0 / imageHeight)));\n    float topBump = texture2D(image, leftPixel).channel;\n\n    vec3 normalTangentSpace = normalize(vec3(centerBump - rightBump, centerBump - topBump, clamp(1.0 - strength, 0.1, 1.0)));\n    vec3 normalEC = materialInput.tangentToEyeMatrix * normalTangentSpace;\n\n    material.normal = normalEC;\n    material.diffuse = vec3(0.01);\n\n    return material;\n}\n"},619998:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 lightColor;\nuniform vec4 darkColor;\nuniform vec2 repeat;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n\n    // From Stefan Gustavson's Procedural Textures in GLSL in OpenGL Insights\n    float b = mod(floor(repeat.s * st.s) + floor(repeat.t * st.t), 2.0);  // 0.0 or 1.0\n\n    // Find the distance from the closest separator (region between two colors)\n    float scaledWidth = fract(repeat.s * st.s);\n    scaledWidth = abs(scaledWidth - floor(scaledWidth + 0.5));\n    float scaledHeight = fract(repeat.t * st.t);\n    scaledHeight = abs(scaledHeight - floor(scaledHeight + 0.5));\n    float value = min(scaledWidth, scaledHeight);\n\n    vec4 currentColor = mix(lightColor, darkColor, b);\n    vec4 color = czm_antialias(lightColor, darkColor, currentColor, value, 0.03);\n\n    color = czm_gammaCorrect(color);\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n\n    return material;\n}\n"},891083:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 lightColor;\nuniform vec4 darkColor;\nuniform vec2 repeat;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    // From Stefan Gustavson's Procedural Textures in GLSL in OpenGL Insights\n    float b = smoothstep(0.3, 0.32, length(fract(repeat * materialInput.st) - 0.5));  // 0.0 or 1.0\n\n    vec4 color = mix(lightColor, darkColor, b);\n    color = czm_gammaCorrect(color);\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n\n    return material;\n}\n"},806217:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D heights;\nuniform sampler2D colors;\n\n// This material expects heights to be sorted from lowest to highest.\n\nfloat getHeight(int idx, float invTexSize)\n{\n    vec2 uv = vec2((float(idx) + 0.5) * invTexSize, 0.5);\n#ifdef OES_texture_float\n    return texture2D(heights, uv).x;\n#else\n    return czm_unpackFloat(texture2D(heights, uv));\n#endif\n}\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    float height = materialInput.height;\n    float invTexSize = 1.0 / float(heightsDimensions.x);\n\n    float minHeight = getHeight(0, invTexSize);\n    float maxHeight = getHeight(heightsDimensions.x - 1, invTexSize);\n\n    // early-out when outside the height range\n    if (height < minHeight || height > maxHeight) {\n        material.diffuse = vec3(0.0);\n        material.alpha = 0.0;\n        return material;\n    }\n\n    // Binary search to find heights above and below.\n    int idxBelow = 0;\n    int idxAbove = heightsDimensions.x;\n    float heightBelow = minHeight;\n    float heightAbove = maxHeight;\n\n    // while loop not allowed, so use for loop with max iterations.\n    // maxIterations of 16 supports a texture size up to 65536 (2^16).\n    const int maxIterations = 16;\n    for (int i = 0; i < maxIterations; i++) {\n        if (idxBelow >= idxAbove - 1) {\n            break;\n        }\n\n        int idxMid = (idxBelow + idxAbove) / 2;\n        float heightTex = getHeight(idxMid, invTexSize);\n\n        if (height > heightTex) {\n            idxBelow = idxMid;\n            heightBelow = heightTex;\n        } else {\n            idxAbove = idxMid;\n            heightAbove = heightTex;\n        }\n    }\n\n    float lerper = heightBelow == heightAbove ? 1.0 : (height - heightBelow) / (heightAbove - heightBelow);\n    vec2 colorUv = vec2(invTexSize * (float(idxBelow) + 0.5 + lerper), 0.5);\n    vec4 color = texture2D(colors, colorUv);\n\n    // undo preumultiplied alpha\n    if (color.a > 0.0) \n    {\n        color.rgb /= color.a;\n    }\n    \n    color.rgb = czm_gammaCorrect(color.rgb);\n\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n    return material;\n}\n"},260389:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef GL_OES_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n#endif\n\nuniform vec4 color;\nuniform float spacing;\nuniform float width;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    float distanceToContour = mod(materialInput.height, spacing);\n\n#ifdef GL_OES_standard_derivatives\n    float dxc = abs(dFdx(materialInput.height));\n    float dyc = abs(dFdy(materialInput.height));\n    float dF = max(dxc, dyc) * czm_pixelRatio * width;\n    float alpha = (distanceToContour < dF) ? 1.0 : 0.0;\n#else\n    float alpha = (distanceToContour < (czm_pixelRatio * width)) ? 1.0 : 0.0;\n#endif\n\n    vec4 outColor = czm_gammaCorrect(vec4(color.rgb, alpha * color.a));\n    material.diffuse = outColor.rgb;\n    material.alpha = outColor.a;\n\n    return material;\n}\n"},294658:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D image;\nuniform float minimumHeight;\nuniform float maximumHeight;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    float scaledHeight = clamp((materialInput.height - minimumHeight) / (maximumHeight - minimumHeight), 0.0, 1.0);\n    vec4 rampColor = texture2D(image, vec2(scaledHeight, 0.5));\n    rampColor = czm_gammaCorrect(rampColor);\n    material.diffuse = rampColor.rgb;\n    material.alpha = rampColor.a;\n    return material;\n}\n"},634869:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 fadeInColor;\nuniform vec4 fadeOutColor;\nuniform float maximumDistance;\nuniform bool repeat;\nuniform vec2 fadeDirection;\nuniform vec2 time;\n\nfloat getTime(float t, float coord)\n{\n    float scalar = 1.0 / maximumDistance;\n    float q  = distance(t, coord) * scalar;\n    if (repeat)\n    {\n        float r = distance(t, coord + 1.0) * scalar;\n        float s = distance(t, coord - 1.0) * scalar;\n        q = min(min(r, s), q);\n    }\n    return clamp(q, 0.0, 1.0);\n}\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n    float s = getTime(time.x, st.s) * fadeDirection.s;\n    float t = getTime(time.y, st.t) * fadeDirection.t;\n\n    float u = length(vec2(s, t));\n    vec4 color = mix(fadeInColor, fadeOutColor, u);\n\n    color = czm_gammaCorrect(color);\n    material.emission = color.rgb;\n    material.alpha = color.a;\n\n    return material;\n}\n"},142871:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='#ifdef GL_OES_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n#endif\n\nuniform vec4 color;\nuniform float cellAlpha;\nuniform vec2 lineCount;\nuniform vec2 lineThickness;\nuniform vec2 lineOffset;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n\n    float scaledWidth = fract(lineCount.s * st.s - lineOffset.s);\n    scaledWidth = abs(scaledWidth - floor(scaledWidth + 0.5));\n    float scaledHeight = fract(lineCount.t * st.t - lineOffset.t);\n    scaledHeight = abs(scaledHeight - floor(scaledHeight + 0.5));\n\n    float value;\n#ifdef GL_OES_standard_derivatives\n    // Fuzz Factor - Controls blurriness of lines\n    const float fuzz = 1.2;\n    vec2 thickness = (lineThickness * czm_pixelRatio) - 1.0;\n\n    // From "3D Engine Design for Virtual Globes" by Cozzi and Ring, Listing 4.13.\n    vec2 dx = abs(dFdx(st));\n    vec2 dy = abs(dFdy(st));\n    vec2 dF = vec2(max(dx.s, dy.s), max(dx.t, dy.t)) * lineCount;\n    value = min(\n        smoothstep(dF.s * thickness.s, dF.s * (fuzz + thickness.s), scaledWidth),\n        smoothstep(dF.t * thickness.t, dF.t * (fuzz + thickness.t), scaledHeight));\n#else\n    // Fuzz Factor - Controls blurriness of lines\n    const float fuzz = 0.05;\n\n    vec2 range = 0.5 - (lineThickness * 0.05);\n    value = min(\n        1.0 - smoothstep(range.s, range.s + fuzz, scaledWidth),\n        1.0 - smoothstep(range.t, range.t + fuzz, scaledHeight));\n#endif\n\n    // Edges taken from RimLightingMaterial.glsl\n    // See http://www.fundza.com/rman_shaders/surface/fake_rim/fake_rim1.html\n    float dRim = 1.0 - abs(dot(materialInput.normalEC, normalize(materialInput.positionToEyeEC)));\n    float sRim = smoothstep(0.8, 1.0, dRim);\n    value *= (1.0 - sRim);\n\n    vec4 halfColor;\n    halfColor.rgb = color.rgb * 0.5;\n    halfColor.a = color.a * (1.0 - ((1.0 - cellAlpha) * value));\n    halfColor = czm_gammaCorrect(halfColor);\n    material.diffuse = halfColor.rgb;\n    material.emission = halfColor.rgb;\n    material.alpha = halfColor.a;\n\n    return material;\n}\n'},595918:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D image;\nuniform float strength;\nuniform vec2 repeat;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    \n    vec4 textureValue = texture2D(image, fract(repeat * materialInput.st));\n    vec3 normalTangentSpace = textureValue.channels;\n    normalTangentSpace.xy = normalTangentSpace.xy * 2.0 - 1.0;\n    normalTangentSpace.z = clamp(1.0 - strength, 0.1, 1.0);\n    normalTangentSpace = normalize(normalTangentSpace);\n    vec3 normalEC = materialInput.tangentToEyeMatrix * normalTangentSpace;\n    \n    material.normal = normalEC;\n    \n    return material;\n}\n"},306567:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\nuniform vec4 color;\n\nfloat getPointOnLine(vec2 p0, vec2 p1, float x)\n{\n    float slope = (p0.y - p1.y) / (p0.x - p1.x);\n    return slope * (x - p0.x) + p0.y;\n}\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n\n#ifdef GL_OES_standard_derivatives\n    float base = 1.0 - abs(fwidth(st.s)) * 10.0 * czm_pixelRatio;\n#else\n    float base = 0.975; // 2.5% of the line will be the arrow head\n#endif\n\n    vec2 center = vec2(1.0, 0.5);\n    float ptOnUpperLine = getPointOnLine(vec2(base, 1.0), center, st.s);\n    float ptOnLowerLine = getPointOnLine(vec2(base, 0.0), center, st.s);\n\n    float halfWidth = 0.15;\n    float s = step(0.5 - halfWidth, st.t);\n    s *= 1.0 - step(0.5 + halfWidth, st.t);\n    s *= 1.0 - step(base, st.s);\n\n    float t = step(base, materialInput.st.s);\n    t *= 1.0 - step(ptOnUpperLine, st.t);\n    t *= step(ptOnLowerLine, st.t);\n\n    // Find the distance from the closest separator (region between two colors)\n    float dist;\n    if (st.s < base)\n    {\n        float d1 = abs(st.t - (0.5 - halfWidth));\n        float d2 = abs(st.t - (0.5 + halfWidth));\n        dist = min(d1, d2);\n    }\n    else\n    {\n        float d1 = czm_infinity;\n        if (st.t < 0.5 - halfWidth && st.t > 0.5 + halfWidth)\n        {\n            d1 = abs(st.s - base);\n        }\n        float d2 = abs(st.t - ptOnUpperLine);\n        float d3 = abs(st.t - ptOnLowerLine);\n        dist = min(min(d1, d2), d3);\n    }\n\n    vec4 outsideColor = vec4(0.0);\n    vec4 currentColor = mix(outsideColor, color, clamp(s + t, 0.0, 1.0));\n    vec4 outColor = czm_antialias(outsideColor, color, currentColor, dist);\n\n    outColor = czm_gammaCorrect(outColor);\n    material.diffuse = outColor.rgb;\n    material.alpha = outColor.a;\n    return material;\n}\n"},314532:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 color;\nuniform vec4 gapColor;\nuniform float dashLength;\nuniform float dashPattern;\nvarying float v_polylineAngle;\n\nconst float maskLength = 16.0;\n\nmat2 rotate(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 pos = rotate(v_polylineAngle) * gl_FragCoord.xy;\n\n    // Get the relative position within the dash from 0 to 1\n    float dashPosition = fract(pos.x / (dashLength * czm_pixelRatio));\n    // Figure out the mask index.\n    float maskIndex = floor(dashPosition * maskLength);\n    // Test the bit mask.\n    float maskTest = floor(dashPattern / pow(2.0, maskIndex));\n    vec4 fragColor = (mod(maskTest, 2.0) < 1.0) ? gapColor : color;\n    if (fragColor.a < 0.005) {   // matches 0/255 and 1/255\n        discard;\n    }\n\n    fragColor = czm_gammaCorrect(fragColor);\n    material.emission = fragColor.rgb;\n    material.alpha = fragColor.a;\n    return material;\n}\n"},443118:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 color;\nuniform float glowPower;\nuniform float taperPower;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n    float glow = glowPower / abs(st.t - 0.5) - (glowPower / 0.5);\n\n    if (taperPower <= 0.99999) {\n        glow *= min(1.0, taperPower / (0.5 - st.s * 0.5) - (taperPower / 0.5));\n    }\n\n    vec4 fragColor;\n    fragColor.rgb = max(vec3(glow - 1.0 + color.rgb), color.rgb);\n    fragColor.a = clamp(0.0, 1.0, glow) * color.a;\n    fragColor = czm_gammaCorrect(fragColor);\n\n    material.emission = fragColor.rgb;\n    material.alpha = fragColor.a;\n\n    return material;\n}\n"},870506:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 color;\nuniform vec4 outlineColor;\nuniform float outlineWidth;\n\nvarying float v_width;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    vec2 st = materialInput.st;\n    float halfInteriorWidth =  0.5 * (v_width - outlineWidth) / v_width;\n    float b = step(0.5 - halfInteriorWidth, st.t);\n    b *= 1.0 - step(0.5 + halfInteriorWidth, st.t);\n\n    // Find the distance from the closest separator (region between two colors)\n    float d1 = abs(st.t - (0.5 - halfInteriorWidth));\n    float d2 = abs(st.t - (0.5 + halfInteriorWidth));\n    float dist = min(d1, d2);\n\n    vec4 currentColor = mix(outlineColor, color, b);\n    vec4 outColor = czm_antialias(outlineColor, color, currentColor, dist);\n    outColor = czm_gammaCorrect(outColor);\n\n    material.diffuse = outColor.rgb;\n    material.alpha = outColor.a;\n\n    return material;\n}\n"},879307:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 color;\nuniform vec4 rimColor;\nuniform float width;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    // See http://www.fundza.com/rman_shaders/surface/fake_rim/fake_rim1.html\n    float d = 1.0 - dot(materialInput.normalEC, normalize(materialInput.positionToEyeEC));\n    float s = smoothstep(1.0 - width, 1.0, d);\n\n    vec4 outColor = czm_gammaCorrect(color);\n    vec4 outRimColor = czm_gammaCorrect(rimColor);\n\n    material.diffuse = outColor.rgb;\n    material.emission = outRimColor.rgb * s;\n    material.alpha = mix(outColor.a, outRimColor.a, s);\n\n    return material;\n}\n"},533706:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D image;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    vec4 rampColor = texture2D(image, vec2(materialInput.slope / (czm_pi / 2.0), 0.5));\n    rampColor = czm_gammaCorrect(rampColor);\n    material.diffuse = rampColor.rgb;\n    material.alpha = rampColor.a;\n    return material;\n}\n"},911512:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform vec4 evenColor;\nuniform vec4 oddColor;\nuniform float offset;\nuniform float repeat;\nuniform bool horizontal;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    // Based on the Stripes Fragment Shader in the Orange Book (11.1.2)\n    float coord = mix(materialInput.st.s, materialInput.st.t, float(horizontal));\n    float value = fract((coord - offset) * (repeat * 0.5));\n    float dist = min(value, min(abs(value - 0.5), 1.0 - value));\n\n    vec4 currentColor = mix(evenColor, oddColor, step(0.5, value));\n    vec4 color = czm_antialias(evenColor, oddColor, currentColor, dist);\n    color = czm_gammaCorrect(color);\n\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n\n    return material;\n}\n"},982657:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="// Thanks for the contribution Jonas\n// http://29a.ch/2012/7/19/webgl-terrain-rendering-water-fog\n\nuniform sampler2D specularMap;\nuniform sampler2D normalMap;\nuniform vec4 baseWaterColor;\nuniform vec4 blendColor;\nuniform float frequency;\nuniform float animationSpeed;\nuniform float amplitude;\nuniform float specularIntensity;\nuniform float fadeFactor;\n\nczm_material czm_getMaterial(czm_materialInput materialInput)\n{\n    czm_material material = czm_getDefaultMaterial(materialInput);\n\n    float time = czm_frameNumber * animationSpeed;\n\n    // fade is a function of the distance from the fragment and the frequency of the waves\n    float fade = max(1.0, (length(materialInput.positionToEyeEC) / 10000000000.0) * frequency * fadeFactor);\n\n    float specularMapValue = texture2D(specularMap, materialInput.st).r;\n\n    // note: not using directional motion at this time, just set the angle to 0.0;\n    vec4 noise = czm_getWaterNoise(normalMap, materialInput.st * frequency, time, 0.0);\n    vec3 normalTangentSpace = noise.xyz * vec3(1.0, 1.0, (1.0 / amplitude));\n\n    // fade out the normal perturbation as we move further from the water surface\n    normalTangentSpace.xy /= fade;\n\n    // attempt to fade out the normal perturbation as we approach non water areas (low specular map value)\n    normalTangentSpace = mix(vec3(0.0, 0.0, 50.0), normalTangentSpace, specularMapValue);\n\n    normalTangentSpace = normalize(normalTangentSpace);\n\n    // get ratios for alignment of the new normal vector with a vector perpendicular to the tangent plane\n    float tsPerturbationRatio = clamp(dot(normalTangentSpace, vec3(0.0, 0.0, 1.0)), 0.0, 1.0);\n\n    // fade out water effect as specular map value decreases\n    material.alpha = mix(blendColor.a, baseWaterColor.a, specularMapValue) * specularMapValue;\n\n    // base color is a blend of the water and non-water color based on the value from the specular map\n    // may need a uniform blend factor to better control this\n    material.diffuse = mix(blendColor.rgb, baseWaterColor.rgb, specularMapValue);\n\n    // diffuse highlights are based on how perturbed the normal is\n    material.diffuse += (0.1 * tsPerturbationRatio);\n\n    material.diffuse = material.diffuse;\n\n    material.normal = normalize(materialInput.tangentToEyeMatrix * normalTangentSpace);\n\n    material.specular = specularIntensity;\n    material.shininess = 10.0;\n\n    return material;\n}\n"},184991:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void filterByPassType(vec4 featureColor)\n{\n    bool styleTranslucent = (featureColor.a != 1.0);\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\n    {\n        discard;\n    }\n    // If the current pass is not the translucent pass and the style is not translucent, don't render the feature.\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\n    {\n        discard;\n    }\n}\n\nvoid cpuStylingStage(inout czm_modelMaterial material, SelectedFeature feature)\n{\n    vec4 featureColor = feature.color;\n\n    if (featureColor.a == 0.0)\n    {\n        discard;\n    }\n\n    // If a feature ID vertex attribute is used, the pass type filter is applied in the vertex shader.\n    // So, we only apply in in the fragment shader if the feature ID texture is used.\n    #ifdef HAS_SELECTED_FEAATURE_ID_TEXTURE\n    filterByPassType(featureColor);\n    #endif\n\n    featureColor = czm_gammaCorrect(featureColor);\n\n    float highlight = ceil(model_colorBlend);\n    material.diffuse *= mix(featureColor.rgb, vec3(1.0), highlight);\n    material.alpha *= featureColor.a;\n}\n"},730110:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void filterByPassType(inout vec3 positionMC, vec4 featureColor)\n{\n    bool styleTranslucent = (featureColor.a != 1.0);\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\n    {\n        positionMC *= 0.0;\n    }\n    // If the current pass is not the transluceny pass and the style is not translucent, don't rendeer the feature.\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\n    {\n        positionMC *= 0.0;\n    }\n}\n\nvoid cpuStylingStage(inout vec3 positionMC, inout SelectedFeature feature)\n{\n    float show = ceil(feature.color.a);\n    positionMC *= show;\n\n    #ifdef HAS_SELECTED_FEATURE_ID_ATTRIBUTE\n    filterByPassType(positionMC, feature.color);\n    #endif\n}\n"},751943:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void customShaderStage(\n    inout czm_modelMaterial material,\n    ProcessedAttributes attributes,\n    FeatureIds featureIds\n) {\n    // FragmentInput and initializeInputStruct() are dynamically generated in JS, \n    // see CustomShaderPipelineStage.js\n    FragmentInput fsInput;\n    initializeInputStruct(fsInput, attributes);\n    fsInput.featureIds = featureIds;\n    fragmentMain(fsInput, material);\n}\n"},84913:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void customShaderStage(\n    inout czm_modelVertexOutput vsOutput, \n    inout ProcessedAttributes attributes, \n    FeatureIds featureIds\n) {\n    // VertexInput and initializeInputStruct() are dynamically generated in JS, \n    // see CustomShaderPipelineStage.js\n    VertexInput vsInput;\n    initializeInputStruct(vsInput, attributes);\n    vsInput.featureIds = featureIds;\n    vertexMain(vsInput, vsOutput);\n    attributes.positionMC = vsOutput.positionMC;\n}\n"},240372:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void featureIdStage(out FeatureIds featureIds, ProcessedAttributes attributes) {\n  initializeFeatureIds(featureIds, attributes);\n}\n"},403250:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void featureIdStage(out FeatureIds featureIds, ProcessedAttributes attributes) \n{\n  initializeFeatureIds(featureIds, attributes);\n  setFeatureIdVaryings();\n}\n"},237954:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void geometryStage(out ProcessedAttributes attributes)\n{\n  attributes.positionMC = v_positionMC;\n  attributes.positionEC = v_positionEC;\n\n  #ifdef COMPUTE_POSITION_WC\n  attributes.positionWC = v_positionWC;\n  #endif\n\n  #ifdef HAS_NORMALS\n  // renormalize after interpolation\n  attributes.normalEC = normalize(v_normalEC);\n  #endif\n\n  #ifdef HAS_TANGENTS\n  attributes.tangentEC = normalize(v_tangentEC);\n  #endif\n\n  #ifdef HAS_BITANGENTS\n  attributes.bitangentEC = normalize(v_bitangentEC);\n  #endif\n\n  // Everything else is dynamically generated in GeometryPipelineStage\n  setDynamicVaryings(attributes);\n}\n"},289856:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void geometryStage(inout ProcessedAttributes attributes, mat4 modelView, mat3 normal) \n{\n    // Compute positions in different coordinate systems\n    vec3 positionMC = attributes.positionMC;\n    v_positionMC = positionMC;\n    v_positionEC = (modelView * vec4(positionMC, 1.0)).xyz;\n    gl_Position = czm_projection * vec4(v_positionEC, 1.0);\n\n    // Sometimes the fragment shader needs this (e.g. custom shaders)\n    #ifdef COMPUTE_POSITION_WC\n    // Note that this is a 32-bit position which may result in jitter on small\n    // scales.\n    v_positionWC = (czm_model * vec4(positionMC, 1.0)).xyz;\n    #endif\n\n    #ifdef HAS_NORMALS\n    v_normalEC = normal * attributes.normalMC;\n    #endif\n\n    #ifdef HAS_TANGENTS\n    v_tangentEC = normalize(normal * attributes.tangentMC);    \n    #endif\n\n    #ifdef HAS_BITANGENTS\n    v_bitangentEC = normalize(normal * attributes.bitangentMC);\n    #endif\n\n    // All other varyings need to be dynamically generated in\n    // GeometryPipelineStage\n    setDynamicVaryings(attributes);\n}\n"},591775:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="mat4 getInstancingTransform()\n{\n    mat4 instancingTransform;\n\n    #ifdef HAS_INSTANCE_MATRICES\n    instancingTransform = mat4(\n        a_instancingTransformRow0.x, a_instancingTransformRow1.x, a_instancingTransformRow2.x, 0.0, // Column 1\n        a_instancingTransformRow0.y, a_instancingTransformRow1.y, a_instancingTransformRow2.y, 0.0, // Column 2\n        a_instancingTransformRow0.z, a_instancingTransformRow1.z, a_instancingTransformRow2.z, 0.0, // Column 3\n        a_instancingTransformRow0.w, a_instancingTransformRow1.w, a_instancingTransformRow2.w, 1.0  // Column 4\n    );\n    #else\n    vec3 translation = vec3(0.0, 0.0, 0.0);\n    vec3 scale = vec3(1.0, 1.0, 1.0);\n    \n        #ifdef HAS_INSTANCE_TRANSLATION\n        translation = a_instanceTranslation;\n        #endif\n        #ifdef HAS_INSTANCE_SCALE\n        scale = a_instanceScale;\n        #endif\n\n    instancingTransform = mat4(\n        scale.x, 0.0, 0.0, 0.0,\n        0.0, scale.y, 0.0, 0.0,\n        0.0, 0.0, scale.z, 0.0,\n        translation.x, translation.y, translation.z, 1.0\n    ); \n    #endif\n\n    return instancingTransform;\n}\n"},685779:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void instancingStage(inout vec3 positionMC) \n{\n    mat4 instancingTransform = getInstancingTransform();\n\n    positionMC = (instancingTransform * vec4(positionMC, 1.0)).xyz;\n}\n"},406731:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void legacyInstancingStage(inout vec3 positionMC, out mat4 instanceModelView, out mat3 instanceModelViewInverseTranspose)\n{\n    mat4 instancingTransform = getInstancingTransform();\n\n    mat4 instanceModel = instancingTransform * u_instance_nodeTransform;\n    instanceModelView = u_instance_modifiedModelView;\n    instanceModelViewInverseTranspose = mat3(u_instance_modifiedModelView * instanceModel);\n\n    positionMC = (instanceModel * vec4(positionMC, 1.0)).xyz;\n}\n"},161168:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef LIGHTING_PBR\nvec3 computePbrLighting(czm_modelMaterial inputMaterial)\n{\n    czm_pbrParameters pbrParameters;\n    pbrParameters.diffuseColor = inputMaterial.diffuse;\n    pbrParameters.f0 = inputMaterial.specular;\n    pbrParameters.roughness = inputMaterial.roughness;\n    \n    vec3 lightColorHdr = czm_lightColorHdr;\n\n    vec3 color = inputMaterial.diffuse;\n    #ifdef HAS_NORMALS\n    color = czm_pbrLighting(\n        v_positionEC,\n        inputMaterial.normalEC,\n        czm_lightDirectionEC,\n        lightColorHdr,\n        pbrParameters\n    );\n    #endif\n\n    color *= inputMaterial.occlusion;\n    color += inputMaterial.emissive;\n\n    // In HDR mode, the frame buffer is in linear color space. The\n    // post-processing stages (see PostProcessStageCollection) will handle\n    // tonemapping. However, if HDR is not enabled, we must tonemap else large\n    // values may be clamped to 1.0\n    #ifndef HDR \n    color = czm_acesTonemapping(color);\n    #endif \n\n    return color;\n}\n#endif\n\nvoid lightingStage(inout czm_modelMaterial material)\n{\n    // Even though the lighting will only set the diffuse color,\n    // pass all other properties so further stages have access to them.\n    vec3 color = vec3(0.0);\n\n    #ifdef LIGHTING_PBR\n    color = computePbrLighting(material);\n    #else // unlit\n    color = material.diffuse;\n    #endif\n\n    // If HDR is not enabled, the frame buffer stores sRGB colors rather than\n    // linear colors so the linear value must be converted.\n    #ifndef HDR\n    color = czm_linearToSrgb(color);\n    #endif\n\n    material.diffuse = color;\n}\n"},354155:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="// If the style color is white, it implies the feature has not been styled.\nbool isDefaultStyleColor(vec3 color)\n{\n    return all(greaterThan(color, vec3(1.0 - czm_epsilon3)));\n}\n\nvec3 blend(vec3 sourceColor, vec3 styleColor, float styleColorBlend)\n{\n    vec3 blendColor = mix(sourceColor, styleColor, styleColorBlend);\n    vec3 color = isDefaultStyleColor(styleColor.rgb) ? sourceColor : blendColor;\n    return color;\n}\n\nvec2 computeTextureTransform(vec2 texCoord, mat3 textureTransform)\n{\n    return vec2(textureTransform * vec3(texCoord, 1.0));\n}\n\n#ifdef HAS_NORMALS\nvec3 computeNormal(ProcessedAttributes attributes)\n{\n    // Geometry normal. This is already normalized \n    vec3 ng = attributes.normalEC;\n\n    vec3 normal = ng;\n    #ifdef HAS_NORMAL_TEXTURE\n    vec2 normalTexCoords = TEXCOORD_NORMAL;\n        #ifdef HAS_NORMAL_TEXTURE_TRANSFORM\n        normalTexCoords = computeTextureTransform(normalTexCoords, u_normalTextureTransform);\n        #endif\n\n        // If HAS_BITANGENTS is set, then HAS_TANGENTS is also set\n        #ifdef HAS_BITANGENTS\n        vec3 t = attributes.tangentEC;\n        vec3 b = attributes.bitangentEC;\n        mat3 tbn = mat3(t, b, ng);\n        vec3 n = texture2D(u_normalTexture, normalTexCoords).rgb;\n        normal = normalize(tbn * (2.0 * n - 1.0));\n        #elif defined(GL_OES_standard_derivatives)\n        // Compute tangents\n        vec3 positionEC = attributes.positionEC;\n        vec3 pos_dx = dFdx(positionEC);\n        vec3 pos_dy = dFdy(positionEC);\n        vec3 tex_dx = dFdx(vec3(normalTexCoords,0.0));\n        vec3 tex_dy = dFdy(vec3(normalTexCoords,0.0));\n        vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n        t = normalize(t - ng * dot(ng, t));\n        vec3 b = normalize(cross(ng, t));\n        mat3 tbn = mat3(t, b, ng);\n        vec3 n = texture2D(u_normalTexture, normalTexCoords).rgb;\n        normal = normalize(tbn * (2.0 * n - 1.0));\n        #endif\n    #endif\n\n    return normal;\n}\n#endif\n\nvoid materialStage(inout czm_modelMaterial material, ProcessedAttributes attributes, SelectedFeature feature)\n{\n\n    #ifdef HAS_NORMALS\n    material.normalEC = computeNormal(attributes);\n    #endif\n\n    vec4 baseColorWithAlpha = vec4(1.0);\n    // Regardless of whether we use PBR, set a base color\n    #ifdef HAS_BASE_COLOR_TEXTURE\n    vec2 baseColorTexCoords = TEXCOORD_BASE_COLOR;\n\n        #ifdef HAS_BASE_COLOR_TEXTURE_TRANSFORM\n        baseColorTexCoords = computeTextureTransform(baseColorTexCoords, u_baseColorTextureTransform);\n        #endif\n\n    baseColorWithAlpha = czm_srgbToLinear(texture2D(u_baseColorTexture, baseColorTexCoords));\n\n        #ifdef HAS_BASE_COLOR_FACTOR\n        baseColorWithAlpha *= u_baseColorFactor;\n        #endif\n    #elif defined(HAS_BASE_COLOR_FACTOR)\n    baseColorWithAlpha = u_baseColorFactor;\n    #endif\n\n    #ifdef HAS_COLOR_0\n    vec4 color = attributes.color_0;\n        // .pnts files store colors in the sRGB color space\n        #ifdef HAS_SRGB_COLOR\n        color = czm_srgbToLinear(color);\n        #endif\n    baseColorWithAlpha *= color;\n    #endif\n\n    material.diffuse = baseColorWithAlpha.rgb;\n    material.alpha = baseColorWithAlpha.a;\n\n    #ifdef USE_CPU_STYLING\n    material.diffuse = blend(material.diffuse, feature.color.rgb, model_colorBlend);\n    #endif\n\n    #ifdef HAS_OCCLUSION_TEXTURE\n    vec2 occlusionTexCoords = TEXCOORD_OCCLUSION;\n        #ifdef HAS_OCCLUSION_TEXTURE_TRANSFORM\n        occlusionTexCoords = computeTextureTransform(occlusionTexCoords, u_occlusionTextureTransform);\n        #endif\n    material.occlusion = texture2D(u_occlusionTexture, occlusionTexCoords).r;\n    #endif\n\n    #ifdef HAS_EMISSIVE_TEXTURE\n    vec2 emissiveTexCoords = TEXCOORD_EMISSIVE;\n        #ifdef HAS_EMISSIVE_TEXTURE_TRANSFORM\n        emissiveTexCoords = computeTextureTransform(emissiveTexCoords, u_emissiveTextureTransform);\n        #endif\n\n    vec3 emissive = czm_srgbToLinear(texture2D(u_emissiveTexture, emissiveTexCoords).rgb);\n        #ifdef HAS_EMISSIVE_FACTOR\n        emissive *= u_emissiveFactor;\n        #endif\n    material.emissive = emissive;\n    #elif defined(HAS_EMISSIVE_FACTOR)\n    material.emissive = u_emissiveFactor;\n    #endif\n\n    #if defined(LIGHTING_PBR) && defined(USE_SPECULAR_GLOSSINESS)\n        #ifdef HAS_SPECULAR_GLOSSINESS_TEXTURE\n        vec2 specularGlossinessTexCoords = TEXCOORD_SPECULAR_GLOSSINESS;\n          #ifdef HAS_SPECULAR_GLOSSINESS_TEXTURE_TRANSFORM\n          specularGlossinessTexCoords = computeTextureTransform(specularGlossinessTexCoords, u_specularGlossinessTextureTransform);\n          #endif\n\n        vec4 specularGlossiness = czm_srgbToLinear(texture2D(u_specularGlossinessTexture, specularGlossinessTexCoords));\n        vec3 specular = specularGlossiness.rgb;\n        float glossiness = specularGlossiness.a;\n            #ifdef HAS_SPECULAR_FACTOR\n            specular *= u_specularFactor;\n            #endif\n\n            #ifdef HAS_GLOSSINESS_FACTOR\n            glossiness *= u_glossinessFactor;\n            #endif\n        #else\n            #ifdef HAS_SPECULAR_FACTOR\n            vec3 specular = clamp(u_specularFactor, vec3(0.0), vec3(1.0));\n            #else\n            vec3 specular = vec3(1.0);\n            #endif\n\n            #ifdef HAS_GLOSSINESS_FACTOR\n            float glossiness = clamp(u_glossinessFactor, 0.0, 1.0);\n            #else\n            float glossiness = 1.0;\n            #endif\n        #endif\n\n        #ifdef HAS_DIFFUSE_TEXTURE\n        vec2 diffuseTexCoords = TEXCOORD_DIFFUSE;\n            #ifdef HAS_DIFFUSE_TEXTURE_TRANSFORM\n            diffuseTexCoords = computeTextureTransform(diffuseTexCoords, u_diffuseTextureTransform);\n            #endif\n\n        vec4 diffuse = czm_srgbToLinear(texture2D(u_diffuseTexture, diffuseTexCoords));\n            #ifdef HAS_DIFFUSE_FACTOR\n            diffuse *= u_diffuseFactor;\n            #endif\n        #elif defined(HAS_DIFFUSE_FACTOR)\n        vec4 diffuse = clamp(u_diffuseFactor, vec4(0.0), vec4(1.0));\n        #else\n        vec4 diffuse = vec4(1.0);\n        #endif\n    czm_pbrParameters parameters = czm_pbrSpecularGlossinessMaterial(\n      diffuse.rgb,\n      specular,\n      glossiness\n    );\n    material.diffuse = parameters.diffuseColor;\n    // the specular glossiness extension's alpha overrides anything set\n    // by the base material.\n    material.alpha = diffuse.a;\n    material.specular = parameters.f0;\n    material.roughness = parameters.roughness;\n    #elif defined(LIGHTING_PBR)\n        #ifdef HAS_METALLIC_ROUGHNESS_TEXTURE\n        vec2 metallicRoughnessTexCoords = TEXCOORD_METALLIC_ROUGHNESS;\n            #ifdef HAS_METALLIC_ROUGHNESS_TEXTURE_TRANSFORM\n            metallicRoughnessTexCoords = computeTextureTransform(metallicRoughnessTexCoords, u_metallicRoughnessTextureTransform);\n            #endif\n\n        vec3 metallicRoughness = texture2D(u_metallicRoughnessTexture, metallicRoughnessTexCoords).rgb;\n        float metalness = clamp(metallicRoughness.b, 0.0, 1.0);\n        float roughness = clamp(metallicRoughness.g, 0.04, 1.0);\n            #ifdef HAS_METALLIC_FACTOR\n            metalness *= u_metallicFactor;\n            #endif\n\n            #ifdef HAS_ROUGHNESS_FACTOR\n            roughness *= u_roughnessFactor;\n            #endif\n        #else\n            #ifdef HAS_METALLIC_FACTOR\n            float metalness = clamp(u_metallicFactor, 0.0, 1.0);\n            #else\n            float metalness = 1.0;\n            #endif\n\n            #ifdef HAS_ROUGHNESS_FACTOR\n            float roughness = clamp(u_roughnessFactor, 0.04, 1.0);\n            #else\n            float roughness = 1.0;\n            #endif\n        #endif\n    czm_pbrParameters parameters = czm_pbrMetallicRoughnessMaterial(\n      material.diffuse,\n      metalness,\n      roughness\n    );\n    material.diffuse = parameters.diffuseColor;\n    material.specular = parameters.f0;\n    material.roughness = parameters.roughness;\n    #endif\n}\n"},819722:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void modelColorStage(inout czm_modelMaterial material)\n{\n    material.diffuse = mix(material.diffuse, model_color.rgb, model_colorBlend);\n    float highlight = ceil(model_colorBlend);\n    material.diffuse *= mix(model_color.rgb, vec3(1.0), highlight);\n    material.alpha *= model_color.a;\n}"},941925:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#if defined(HAS_NORMALS) && !defined(HAS_TANGENTS) && !defined(LIGHTING_UNLIT)\n    #ifdef GL_OES_standard_derivatives\n    #extension GL_OES_standard_derivatives : enable\n    #endif\n#endif\n\nczm_modelMaterial defaultModelMaterial()\n{\n    czm_modelMaterial material;\n    material.diffuse = vec3(1.0);\n    material.specular = vec3(0.04); // dielectric (non-metal)\n    material.roughness = 0.0;\n    material.occlusion = 1.0;\n    material.normalEC = vec3(0.0, 0.0, 1.0);\n    material.emissive = vec3(0.0);\n    material.alpha = 1.0;\n    return material;\n}\n\nvec4 handleAlpha(vec3 color, float alpha)\n{\n    #ifdef ALPHA_MODE_MASK\n    if (alpha < u_alphaCutoff) {\n        discard;\n    }\n    return vec4(color, 1.0);\n    #elif defined(ALPHA_MODE_BLEND)\n    return vec4(color, alpha);\n    #else // OPAQUE\n    return vec4(color, 1.0);\n    #endif\n}\n\nSelectedFeature selectedFeature;\n\nvoid main() \n{\n    czm_modelMaterial material = defaultModelMaterial();\n\n    ProcessedAttributes attributes;\n    geometryStage(attributes);\n\n    FeatureIds featureIds;\n    featureIdStage(featureIds, attributes);\n\n    #ifdef HAS_SELECTED_FEATURE_ID\n    selectedFeatureIdStage(selectedFeature, featureIds);\n    #endif\n\n    #ifndef CUSTOM_SHADER_REPLACE_MATERIAL\n    materialStage(material, attributes, selectedFeature);\n    #endif\n\n    #ifdef HAS_CUSTOM_FRAGMENT_SHADER\n    customShaderStage(material, attributes, featureIds);\n    #endif\n\n    lightingStage(material);\n\n    #ifdef HAS_SELECTED_FEATURE_ID\n    cpuStylingStage(material, selectedFeature);\n    #endif\n    \n    #ifdef HAS_MODEL_COLOR\n    modelColorStage(material);\n    #endif \n\n    vec4 color = handleAlpha(material.diffuse, material.alpha);\n\n    gl_FragColor = color;\n}\n"},830905:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="precision highp float;\n\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\n    czm_modelVertexOutput vsOutput;\n    vsOutput.positionMC = positionMC;\n    vsOutput.pointSize = 1.0;\n    return vsOutput;\n}\n\nvoid main() \n{\n    // Initialize the attributes struct with all\n    // attributes except quantized ones.\n    ProcessedAttributes attributes;\n    initializeAttributes(attributes);\n\n    // Dequantize the quantized ones and add them to the\n    // attributes struct.\n    #ifdef USE_DEQUANTIZATION\n    dequantizationStage(attributes);\n    #endif\n\n\n    FeatureIds featureIds;\n    featureIdStage(featureIds, attributes);\n\n    #ifdef HAS_SELECTED_FEATURE_ID\n    SelectedFeature feature;\n    selectedFeatureIdStage(feature, featureIds);\n    cpuStylingStage(attributes.positionMC, feature);\n    #endif\n\n    mat4 modelView = czm_modelView;\n    mat3 normal = czm_normal;\n\n    // Update the position for this instance in place\n    #ifdef HAS_INSTANCING\n\n        // The legacy instance stage  is used when rendering I3DM models that \n        // encode instances transforms in world space, as opposed to glTF models\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\n        // in object space.\n        #ifdef USE_LEGACY_INSTANCING\n        mat4 instanceModelView;\n        mat3 instanceModelViewInverseTranspose;\n        \n        legacyInstancingStage(attributes.positionMC, instanceModelView, instanceModelViewInverseTranspose);\n\n        modelView = instanceModelView;\n        normal = instanceModelViewInverseTranspose;\n        #else\n        instancingStage(attributes.positionMC);\n        #endif\n\n        #ifdef USE_PICKING\n        v_pickColor = a_pickColor;\n        #endif\n\n    #endif\n\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\n    customShaderStage(vsOutput, attributes, featureIds);\n    #endif\n\n    // Compute the final position in each coordinate system needed.\n    // This also sets gl_Position.\n    geometryStage(attributes, modelView, normal);    \n\n    #ifdef PRIMITIVE_TYPE_POINTS\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\n        gl_PointSize = vsOutput.pointSize;\n        #elif defined(USE_POINT_CLOUD_ATTENUATION)\n        gl_PointSize = pointCloudAttenuationStage(v_positionEC);\n        #else\n        gl_PointSize = 1.0;\n        #endif\n    #endif\n}\n"},153460:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="float pointCloudAttenuationStage(vec3 positionEC) {\n  // Variables are packed into a single vector to minimize gl.uniformXXX() calls\n  float pointSize = model_pointCloudAttenuation.x;\n  float geometricError = model_pointCloudAttenuation.y;\n  float depthMultiplier = model_pointCloudAttenuation.z;\n  float depth = -positionEC.z;\n  return min((geometricError / depth) * depthMultiplier, pointSize);\n}\n"},496313:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="vec2 computeSt(float featureId)\n{\n    float stepX = model_textureStep.x;\n    float centerX = model_textureStep.y;\n\n    #ifdef MULTILINE_BATCH_TEXTURE\n    float stepY = model_textureStep.z;\n    float centerY = model_textureStep.w;\n\n    float xId = mod(featureId, model_textureDimensions.x); \n    float yId = floor(featureId / model_textureDimensions.x);\n    \n    return vec2(centerX + (xId * stepX), centerY + (yId * stepY));\n    #else\n    return vec2(centerX + (featureId * stepX), 0.5);\n    #endif\n}\n\nvoid selectedFeatureIdStage(out SelectedFeature feature, FeatureIds featureIds)\n{   \n    float featureId = featureIds.SELECTED_FEATURE_ID;\n\n    if (featureId < model_featuresLength)\n    {\n        vec2 featureSt = computeSt(featureId);\n\n        feature.id = int(featureId);\n        feature.st = featureSt;\n        feature.color = texture2D(model_batchTexture, featureSt);\n    }\n    // Floating point comparisons can be unreliable in GLSL, so we\n    // increment the feature ID to make sure it's always greater\n    // then the model_featuresLength - a condition we check for in the\n    // pick ID, to avoid sampling the pick texture if the feature ID is\n    // greater than the number of features.\n    else\n    {\n        feature.id = int(model_featuresLength) + 1;\n        feature.st = vec2(0.0);\n        feature.color = vec4(1.0);\n    }\n}\n"},179212:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec2 v_textureCoordinates;\n\nuniform float originalSize;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\n\nconst float yMipLevel1 = 1.0 - (1.0 / pow(2.0, 1.0));\nconst float yMipLevel2 = 1.0 - (1.0 / pow(2.0, 2.0));\nconst float yMipLevel3 = 1.0 - (1.0 / pow(2.0, 3.0));\nconst float yMipLevel4 = 1.0 - (1.0 / pow(2.0, 4.0));\n\nvoid main()\n{\n    vec2 uv = v_textureCoordinates;\n    vec2 textureSize = vec2(originalSize * 1.5 + 2.0, originalSize);\n    vec2 pixel = 1.0 / textureSize;\n\n    float mipLevel = 0.0;\n\n    if (uv.x - pixel.x > (textureSize.y / textureSize.x))\n    {\n        mipLevel = 1.0;\n        if (uv.y - pixel.y > yMipLevel1)\n        {\n            mipLevel = 2.0;\n            if (uv.y - pixel.y * 3.0 > yMipLevel2)\n            {\n                mipLevel = 3.0;\n                if (uv.y - pixel.y * 5.0 > yMipLevel3)\n                {\n                    mipLevel = 4.0;\n                    if (uv.y - pixel.y * 7.0 > yMipLevel4)\n                    {\n                        mipLevel = 5.0;\n                    }\n                }\n            }\n        }\n    }\n\n    if (mipLevel > 0.0)\n    {\n        float scale = pow(2.0, mipLevel);\n\n        uv.y -= (pixel.y * (mipLevel - 1.0) * 2.0);\n        uv.x *= ((textureSize.x - 2.0) / textureSize.y);\n\n        uv.x -= 1.0 + pixel.x;\n        uv.y -= (1.0 - (1.0 / pow(2.0, mipLevel - 1.0)));\n        uv *= scale;\n    }\n    else\n    {\n        uv.x *= (textureSize.x / textureSize.y);\n    }\n\n    if(mipLevel == 0.0)\n    {\n        gl_FragColor = texture2D(texture0, uv);\n    }\n    else if(mipLevel == 1.0)\n    {\n        gl_FragColor = texture2D(texture1, uv);\n    }\n    else if(mipLevel == 2.0)\n    {\n        gl_FragColor = texture2D(texture2, uv);\n    }\n    else if(mipLevel == 3.0)\n    {\n        gl_FragColor = texture2D(texture3, uv);\n    }\n    else if(mipLevel == 4.0)\n    {\n        gl_FragColor = texture2D(texture4, uv);\n    }\n    else if(mipLevel == 5.0)\n    {\n        gl_FragColor = texture2D(texture5, uv);\n    }\n    else\n    {\n        gl_FragColor = vec4(0.0);\n    }\n}\n"},29689:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_cubeMapCoordinates;\nuniform samplerCube cubeMap;\n\nvoid main()\n{\n    vec4 rgba = textureCube(cubeMap, v_cubeMapCoordinates);\n    #ifdef RGBA_NORMALIZED\n        gl_FragColor = vec4(rgba.rgb, 1.0);\n    #else\n        float m = rgba.a * 16.0;\n        vec3 r = rgba.rgb * m;\n        gl_FragColor = vec4(r * r, 1.0);\n    #endif\n}\n"},154019:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 position;\nattribute vec3 cubeMapCoordinates;\n\nvarying vec3 v_cubeMapCoordinates;\n\nvoid main()\n{\n    gl_Position = position;\n    v_cubeMapCoordinates = cubeMapCoordinates;\n}\n"},455702:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec4 v_color;\nvarying vec4 v_outlineColor;\nvarying float v_innerPercent;\nvarying float v_pixelDistance;\nvarying vec4 v_pickColor;\n\nvoid main()\n{\n    // The distance in UV space from this fragment to the center of the point, at most 0.5.\n    float distanceToCenter = length(gl_PointCoord - vec2(0.5));\n    // The max distance stops one pixel shy of the edge to leave space for anti-aliasing.\n    float maxDistance = max(0.0, 0.5 - v_pixelDistance);\n    float wholeAlpha = 1.0 - smoothstep(maxDistance, 0.5, distanceToCenter);\n    float innerAlpha = 1.0 - smoothstep(maxDistance * v_innerPercent, 0.5 * v_innerPercent, distanceToCenter);\n\n    vec4 color = mix(v_outlineColor, v_color, innerAlpha);\n    color.a *= wholeAlpha;\n\n// Fully transparent parts of the billboard are not pickable.\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\n    if (color.a < 0.005)   // matches 0/255 and 1/255\n    {\n        discard;\n    }\n#else\n// The billboard is rendered twice. The opaque pass discards translucent fragments\n// and the translucent pass discards opaque fragments.\n#ifdef OPAQUE\n    if (color.a < 0.995)   // matches < 254/255\n    {\n        discard;\n    }\n#else\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\n    {\n        discard;\n    }\n#endif\n#endif\n\n    gl_FragColor = czm_gammaCorrect(color);\n    czm_writeLogDepth();\n}\n"},841439:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='uniform float u_maxTotalPointSize;\n\nattribute vec4 positionHighAndSize;\nattribute vec4 positionLowAndOutline;\nattribute vec4 compressedAttribute0;                       // color, outlineColor, pick color\nattribute vec4 compressedAttribute1;                       // show, translucency by distance, some free space\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\nattribute vec3 distanceDisplayConditionAndDisableDepth;    // near, far, disableDepthTestDistance\n\nvarying vec4 v_color;\nvarying vec4 v_outlineColor;\nvarying float v_innerPercent;\nvarying float v_pixelDistance;\nvarying vec4 v_pickColor;\n\nconst float SHIFT_LEFT8 = 256.0;\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\n\nvoid main()\n{\n    // Modifying this shader may also require modifications to PointPrimitive._computeScreenSpacePosition\n\n    // unpack attributes\n    vec3 positionHigh = positionHighAndSize.xyz;\n    vec3 positionLow = positionLowAndOutline.xyz;\n    float outlineWidthBothSides = 2.0 * positionLowAndOutline.w;\n    float totalSize = positionHighAndSize.w + outlineWidthBothSides;\n    float outlinePercent = outlineWidthBothSides / totalSize;\n    // Scale in response to browser-zoom.\n    totalSize *= czm_pixelRatio;\n    // Add padding for anti-aliasing on both sides.\n    totalSize += 3.0;\n\n    float temp = compressedAttribute1.x * SHIFT_RIGHT8;\n    float show = floor(temp);\n\n#ifdef EYE_DISTANCE_TRANSLUCENCY\n    vec4 translucencyByDistance;\n    translucencyByDistance.x = compressedAttribute1.z;\n    translucencyByDistance.z = compressedAttribute1.w;\n\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\n\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\n#endif\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    vec4 color;\n    vec4 outlineColor;\n    vec4 pickColor;\n\n    // compressedAttribute0.z => pickColor.rgb\n\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    pickColor.r = floor(temp);\n\n    // compressedAttribute0.x => color.rgb\n\n    temp = compressedAttribute0.x * SHIFT_RIGHT8;\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    color.r = floor(temp);\n\n    // compressedAttribute0.y => outlineColor.rgb\n\n    temp = compressedAttribute0.y * SHIFT_RIGHT8;\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\n    temp = floor(temp) * SHIFT_RIGHT8;\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\n    outlineColor.r = floor(temp);\n\n    // compressedAttribute0.w => color.a, outlineColor.a, pickColor.a\n\n    temp = compressedAttribute0.w * SHIFT_RIGHT8;\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\n    pickColor = pickColor / 255.0;\n\n    temp = floor(temp) * SHIFT_RIGHT8;\n    outlineColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\n    outlineColor /= 255.0;\n    color.a = floor(temp);\n    color /= 255.0;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\n    float lengthSq;\n    if (czm_sceneMode == czm_sceneMode2D)\n    {\n        // 2D camera distance is a special case\n        // treat all billboards as flattened to the z=0.0 plane\n        lengthSq = czm_eyeHeight2D.y;\n    }\n    else\n    {\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\n    }\n#endif\n\n#ifdef EYE_DISTANCE_SCALING\n    totalSize *= czm_nearFarScalar(scaleByDistance, lengthSq);\n#endif\n    // Clamp to max point size.\n    totalSize = min(totalSize, u_maxTotalPointSize);\n    // If size is too small, push vertex behind near plane for clipping.\n    // Note that context.minimumAliasedPointSize "will be at most 1.0".\n    if (totalSize < 1.0)\n    {\n        positionEC.xyz = vec3(0.0);\n        totalSize = 1.0;\n    }\n\n    float translucency = 1.0;\n#ifdef EYE_DISTANCE_TRANSLUCENCY\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\n    // push vertex behind near plane for clipping\n    if (translucency < 0.004)\n    {\n        positionEC.xyz = vec3(0.0);\n    }\n#endif\n\n#ifdef DISTANCE_DISPLAY_CONDITION\n    float nearSq = distanceDisplayConditionAndDisableDepth.x;\n    float farSq = distanceDisplayConditionAndDisableDepth.y;\n    if (lengthSq < nearSq || lengthSq > farSq) {\n        // push vertex behind camera to force it to be clipped\n        positionEC.xyz = vec3(0.0, 0.0, 1.0);\n    }\n#endif\n\n    gl_Position = czm_projection * positionEC;\n    czm_vertexLogDepth();\n\n#ifdef DISABLE_DEPTH_DISTANCE\n    float disableDepthTestDistance = distanceDisplayConditionAndDisableDepth.z;\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\n    {\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\n    }\n\n    if (disableDepthTestDistance != 0.0)\n    {\n        // Don\'t try to "multiply both sides" by w.  Greater/less-than comparisons won\'t work for negative values of w.\n        float zclip = gl_Position.z / gl_Position.w;\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\n        {\n            // Position z on the near plane.\n            gl_Position.z = -gl_Position.w;\n#ifdef LOG_DEPTH\n            czm_vertexLogDepth(vec4(czm_currentFrustum.x));\n#endif\n        }\n    }\n#endif\n\n    v_color = color;\n    v_color.a *= translucency * show;\n    v_outlineColor = outlineColor;\n    v_outlineColor.a *= translucency * show;\n\n    v_innerPercent = 1.0 - outlinePercent;\n    v_pixelDistance = 2.0 / totalSize;\n    gl_PointSize = totalSize * show;\n    gl_Position *= show;\n\n    v_pickColor = pickColor;\n}\n'},409721:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="void clipLineSegmentToNearPlane(\n    vec3 p0,\n    vec3 p1,\n    out vec4 positionWC,\n    out bool clipped,\n    out bool culledByNearPlane,\n    out vec4 clippedPositionEC)\n{\n    culledByNearPlane = false;\n    clipped = false;\n\n    vec3 p0ToP1 = p1 - p0;\n    float magnitude = length(p0ToP1);\n    vec3 direction = normalize(p0ToP1);\n\n    // Distance that p0 is behind the near plane. Negative means p0 is\n    // in front of the near plane.\n    float endPoint0Distance =  czm_currentFrustum.x + p0.z;\n\n    // Camera looks down -Z.\n    // When moving a point along +Z: LESS VISIBLE\n    //   * Points in front of the camera move closer to the camera.\n    //   * Points behind the camrea move farther away from the camera.\n    // When moving a point along -Z: MORE VISIBLE\n    //   * Points in front of the camera move farther away from the camera.\n    //   * Points behind the camera move closer to the camera.\n\n    // Positive denominator: -Z, becoming more visible\n    // Negative denominator: +Z, becoming less visible\n    // Nearly zero: parallel to near plane\n    float denominator = -direction.z;\n\n    if (endPoint0Distance > 0.0 && abs(denominator) < czm_epsilon7)\n    {\n        // p0 is behind the near plane and the line to p1 is nearly parallel to\n        // the near plane, so cull the segment completely.\n        culledByNearPlane = true;\n    }\n    else if (endPoint0Distance > 0.0)\n    {\n        // p0 is behind the near plane, and the line to p1 is moving distinctly\n        // toward or away from it.\n\n        // t = (-plane distance - dot(plane normal, ray origin)) / dot(plane normal, ray direction)\n        float t = endPoint0Distance / denominator;\n        if (t < 0.0 || t > magnitude)\n        {\n            // Near plane intersection is not between the two points.\n            // We already confirmed p0 is behind the naer plane, so now\n            // we know the entire segment is behind it.\n            culledByNearPlane = true;\n        }\n        else\n        {\n            // Segment crosses the near plane, update p0 to lie exactly on it.\n            p0 = p0 + t * direction;\n\n            // Numerical noise might put us a bit on the wrong side of the near plane.\n            // Don't let that happen.\n            p0.z = min(p0.z, -czm_currentFrustum.x);\n\n            clipped = true;\n        }\n    }\n\n    clippedPositionEC = vec4(p0, 1.0);\n    positionWC = czm_eyeToWindowCoordinates(clippedPositionEC);\n}\n\nvec4 getPolylineWindowCoordinatesEC(vec4 positionEC, vec4 prevEC, vec4 nextEC, float expandDirection, float width, bool usePrevious, out float angle)\n{\n    // expandDirection +1 is to the _left_ when looking from positionEC toward nextEC.\n\n#ifdef POLYLINE_DASH\n    // Compute the window coordinates of the points.\n    vec4 positionWindow = czm_eyeToWindowCoordinates(positionEC);\n    vec4 previousWindow = czm_eyeToWindowCoordinates(prevEC);\n    vec4 nextWindow = czm_eyeToWindowCoordinates(nextEC);\n\n    // Determine the relative screen space direction of the line.\n    vec2 lineDir;\n    if (usePrevious) {\n        lineDir = normalize(positionWindow.xy - previousWindow.xy);\n    }\n    else {\n        lineDir = normalize(nextWindow.xy - positionWindow.xy);\n    }\n    angle = atan(lineDir.x, lineDir.y) - 1.570796327; // precomputed atan(1,0)\n\n    // Quantize the angle so it doesn't change rapidly between segments.\n    angle = floor(angle / czm_piOverFour + 0.5) * czm_piOverFour;\n#endif\n\n    vec4 clippedPrevWC, clippedPrevEC;\n    bool prevSegmentClipped, prevSegmentCulled;\n    clipLineSegmentToNearPlane(prevEC.xyz, positionEC.xyz, clippedPrevWC, prevSegmentClipped, prevSegmentCulled, clippedPrevEC);\n\n    vec4 clippedNextWC, clippedNextEC;\n    bool nextSegmentClipped, nextSegmentCulled;\n    clipLineSegmentToNearPlane(nextEC.xyz, positionEC.xyz, clippedNextWC, nextSegmentClipped, nextSegmentCulled, clippedNextEC);\n\n    bool segmentClipped, segmentCulled;\n    vec4 clippedPositionWC, clippedPositionEC;\n    clipLineSegmentToNearPlane(positionEC.xyz, usePrevious ? prevEC.xyz : nextEC.xyz, clippedPositionWC, segmentClipped, segmentCulled, clippedPositionEC);\n\n    if (segmentCulled)\n    {\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n\n    vec2 directionToPrevWC = normalize(clippedPrevWC.xy - clippedPositionWC.xy);\n    vec2 directionToNextWC = normalize(clippedNextWC.xy - clippedPositionWC.xy);\n\n    // If a segment was culled, we can't use the corresponding direction\n    // computed above. We should never see both of these be true without\n    // `segmentCulled` above also being true.\n    if (prevSegmentCulled)\n    {\n        directionToPrevWC = -directionToNextWC;\n    }\n    else if (nextSegmentCulled)\n    {\n        directionToNextWC = -directionToPrevWC;\n    }\n\n    vec2 thisSegmentForwardWC, otherSegmentForwardWC;\n    if (usePrevious)\n    {\n        thisSegmentForwardWC = -directionToPrevWC;\n        otherSegmentForwardWC = directionToNextWC;\n    }\n    else\n    {\n        thisSegmentForwardWC = directionToNextWC;\n        otherSegmentForwardWC =  -directionToPrevWC;\n    }\n\n    vec2 thisSegmentLeftWC = vec2(-thisSegmentForwardWC.y, thisSegmentForwardWC.x);\n\n    vec2 leftWC = thisSegmentLeftWC;\n    float expandWidth = width * 0.5;\n\n    // When lines are split at the anti-meridian, the position may be at the\n    // same location as the next or previous position, and we need to handle\n    // that to avoid producing NaNs.\n    if (!czm_equalsEpsilon(prevEC.xyz - positionEC.xyz, vec3(0.0), czm_epsilon1) && !czm_equalsEpsilon(nextEC.xyz - positionEC.xyz, vec3(0.0), czm_epsilon1))\n    {\n        vec2 otherSegmentLeftWC = vec2(-otherSegmentForwardWC.y, otherSegmentForwardWC.x);\n\n        vec2 leftSumWC = thisSegmentLeftWC + otherSegmentLeftWC;\n        float leftSumLength = length(leftSumWC);\n        leftWC = leftSumLength < czm_epsilon6 ? thisSegmentLeftWC : (leftSumWC / leftSumLength);\n\n        // The sine of the angle between the two vectors is given by the formula\n        //         |a x b| = |a||b|sin(theta)\n        // which is\n        //     float sinAngle = length(cross(vec3(leftWC, 0.0), vec3(-thisSegmentForwardWC, 0.0)));\n        // Because the z components of both vectors are zero, the x and y coordinate will be zero.\n        // Therefore, the sine of the angle is just the z component of the cross product.\n        vec2 u = -thisSegmentForwardWC;\n        vec2 v = leftWC;\n        float sinAngle = abs(u.x * v.y - u.y * v.x);\n        expandWidth = clamp(expandWidth / sinAngle, 0.0, width * 2.0);\n    }\n\n    vec2 offset = leftWC * expandDirection * expandWidth * czm_pixelRatio;\n    return vec4(clippedPositionWC.xy + offset, -clippedPositionWC.z, 1.0) * (czm_projection * clippedPositionEC).w;\n}\n\nvec4 getPolylineWindowCoordinates(vec4 position, vec4 previous, vec4 next, float expandDirection, float width, bool usePrevious, out float angle)\n{\n    vec4 positionEC = czm_modelViewRelativeToEye * position;\n    vec4 prevEC = czm_modelViewRelativeToEye * previous;\n    vec4 nextEC = czm_modelViewRelativeToEye * next;\n    return getPolylineWindowCoordinatesEC(positionEC, prevEC, nextEC, expandDirection, width, usePrevious, angle);\n}\n"},935691:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef VECTOR_TILE\nuniform vec4 u_highlightColor;\n#endif\n\nvarying vec2 v_st;\n\nvoid main()\n{\n    czm_materialInput materialInput;\n\n    vec2 st = v_st;\n    st.t = czm_readNonPerspective(st.t, gl_FragCoord.w);\n\n    materialInput.s = st.s;\n    materialInput.st = st;\n    materialInput.str = vec3(st, 0.0);\n\n    czm_material material = czm_getMaterial(materialInput);\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#ifdef VECTOR_TILE\n    gl_FragColor *= u_highlightColor;\n#endif\n\n    czm_writeLogDepth();\n}\n"},743295:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n#endif\n\nvarying vec4 v_startPlaneNormalEcAndHalfWidth;\nvarying vec4 v_endPlaneNormalEcAndBatchId;\nvarying vec4 v_rightPlaneEC; // Technically can compute distance for this here\nvarying vec4 v_endEcAndStartEcX;\nvarying vec4 v_texcoordNormalizationAndStartEcYZ;\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#endif\n\nvoid main(void)\n{\n    float logDepthOrDepth = czm_branchFreeTernary(czm_sceneMode == czm_sceneMode2D, gl_FragCoord.z, czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw)));\n    vec3 ecStart = vec3(v_endEcAndStartEcX.w, v_texcoordNormalizationAndStartEcYZ.zw);\n\n    // Discard for sky\n    if (logDepthOrDepth == 0.0) {\n#ifdef DEBUG_SHOW_VOLUME\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);\n        return;\n#else // DEBUG_SHOW_VOLUME\n        discard;\n#endif // DEBUG_SHOW_VOLUME\n    }\n\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\n    eyeCoordinate /= eyeCoordinate.w;\n\n    float halfMaxWidth = v_startPlaneNormalEcAndHalfWidth.w * czm_metersPerPixel(eyeCoordinate);\n    // Check distance of the eye coordinate against the right-facing plane\n    float widthwiseDistance = czm_planeDistance(v_rightPlaneEC, eyeCoordinate.xyz);\n\n    // Check eye coordinate against the mitering planes\n    float distanceFromStart = czm_planeDistance(v_startPlaneNormalEcAndHalfWidth.xyz, -dot(ecStart, v_startPlaneNormalEcAndHalfWidth.xyz), eyeCoordinate.xyz);\n    float distanceFromEnd = czm_planeDistance(v_endPlaneNormalEcAndBatchId.xyz, -dot(v_endEcAndStartEcX.xyz, v_endPlaneNormalEcAndBatchId.xyz), eyeCoordinate.xyz);\n\n    if (abs(widthwiseDistance) > halfMaxWidth || distanceFromStart < 0.0 || distanceFromEnd < 0.0) {\n#ifdef DEBUG_SHOW_VOLUME\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 0.5);\n        return;\n#else // DEBUG_SHOW_VOLUME\n        discard;\n#endif // DEBUG_SHOW_VOLUME\n    }\n\n    // Check distance of the eye coordinate against start and end planes with normals in the right plane.\n    // For computing unskewed lengthwise texture coordinate.\n    // Can also be used for clipping extremely pointy miters, but in practice unnecessary because of miter breaking.\n\n    // aligned plane: cross the right plane normal with miter plane normal, then cross the result with right again to point it more "forward"\n    vec3 alignedPlaneNormal;\n\n    // start aligned plane\n    alignedPlaneNormal = cross(v_rightPlaneEC.xyz, v_startPlaneNormalEcAndHalfWidth.xyz);\n    alignedPlaneNormal = normalize(cross(alignedPlaneNormal, v_rightPlaneEC.xyz));\n    distanceFromStart = czm_planeDistance(alignedPlaneNormal, -dot(alignedPlaneNormal, ecStart), eyeCoordinate.xyz);\n\n    // end aligned plane\n    alignedPlaneNormal = cross(v_rightPlaneEC.xyz, v_endPlaneNormalEcAndBatchId.xyz);\n    alignedPlaneNormal = normalize(cross(alignedPlaneNormal, v_rightPlaneEC.xyz));\n    distanceFromEnd = czm_planeDistance(alignedPlaneNormal, -dot(alignedPlaneNormal, v_endEcAndStartEcX.xyz), eyeCoordinate.xyz);\n\n#ifdef PER_INSTANCE_COLOR\n    gl_FragColor = czm_gammaCorrect(v_color);\n#else // PER_INSTANCE_COLOR\n    // Clamp - distance to aligned planes may be negative due to mitering,\n    // so fragment texture coordinate might be out-of-bounds.\n    float s = clamp(distanceFromStart / (distanceFromStart + distanceFromEnd), 0.0, 1.0);\n    s = (s * v_texcoordNormalizationAndStartEcYZ.x) + v_texcoordNormalizationAndStartEcYZ.y;\n    float t = (widthwiseDistance + halfMaxWidth) / (2.0 * halfMaxWidth);\n\n    czm_materialInput materialInput;\n\n    materialInput.s = s;\n    materialInput.st = vec2(s, t);\n    materialInput.str = vec3(s, t, 0.0);\n\n    czm_material material = czm_getMaterial(materialInput);\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#endif // PER_INSTANCE_COLOR\n\n    // Premultiply alpha. Required for classification primitives on translucent globe.\n    gl_FragColor.rgb *= gl_FragColor.a;\n\n    czm_writeDepthClamp();\n}\n'},552556:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_forwardDirectionEC;\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\nvarying float v_batchId;\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#else\nvarying vec2 v_alignedPlaneDistances;\nvarying float v_texcoordT;\n#endif\n\nfloat rayPlaneDistanceUnsafe(vec3 origin, vec3 direction, vec3 planeNormal, float planeDistance) {\n    // We don't expect the ray to ever be parallel to the plane\n    return (-planeDistance - dot(planeNormal, origin)) / dot(planeNormal, direction);\n}\n\nvoid main(void)\n{\n    vec4 eyeCoordinate = gl_FragCoord;\n    eyeCoordinate /= eyeCoordinate.w;\n\n#ifdef PER_INSTANCE_COLOR\n    gl_FragColor = czm_gammaCorrect(v_color);\n#else // PER_INSTANCE_COLOR\n    // Use distances for planes aligned with segment to prevent skew in dashing\n    float distanceFromStart = rayPlaneDistanceUnsafe(eyeCoordinate.xyz, -v_forwardDirectionEC, v_forwardDirectionEC.xyz, v_alignedPlaneDistances.x);\n    float distanceFromEnd = rayPlaneDistanceUnsafe(eyeCoordinate.xyz, v_forwardDirectionEC, -v_forwardDirectionEC.xyz, v_alignedPlaneDistances.y);\n\n    // Clamp - distance to aligned planes may be negative due to mitering\n    distanceFromStart = max(0.0, distanceFromStart);\n    distanceFromEnd = max(0.0, distanceFromEnd);\n\n    float s = distanceFromStart / (distanceFromStart + distanceFromEnd);\n    s = (s * v_texcoordNormalizationAndHalfWidth.x) + v_texcoordNormalizationAndHalfWidth.y;\n\n    czm_materialInput materialInput;\n\n    materialInput.s = s;\n    materialInput.st = vec2(s, v_texcoordT);\n    materialInput.str = vec3(s, v_texcoordT, 0.0);\n\n    czm_material material = czm_getMaterial(materialInput);\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#endif // PER_INSTANCE_COLOR\n}\n"},972504:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\n\nattribute vec4 startHiAndForwardOffsetX;\nattribute vec4 startLoAndForwardOffsetY;\nattribute vec4 startNormalAndForwardOffsetZ;\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\nattribute vec4 startHiLo2D;\nattribute vec4 offsetAndRight2D;\nattribute vec4 startEndNormals2D;\nattribute vec2 texcoordNormalization2D;\n\nattribute float batchId;\n\nvarying vec3 v_forwardDirectionEC;\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\nvarying float v_batchId;\n\n// For materials\n#ifdef WIDTH_VARYING\nvarying float v_width;\n#endif\n#ifdef ANGLE_VARYING\nvarying float v_polylineAngle;\n#endif\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#else\nvarying vec2 v_alignedPlaneDistances;\nvarying float v_texcoordT;\n#endif\n\n// Morphing planes using SLERP or NLERP doesn\'t seem to work, so instead draw the material directly on the shadow volume.\n// Morph views are from very far away and aren\'t meant to be used precisely, so this should be sufficient.\nvoid main()\n{\n    v_batchId = batchId;\n\n    // Start position\n    vec4 posRelativeToEye2D = czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw));\n    vec4 posRelativeToEye3D = czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz);\n    vec4 posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\n    vec3 posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\n    vec3 posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\n    vec3 startEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\n\n    // Start plane\n    vec4 startPlane2D;\n    vec4 startPlane3D;\n    startPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.xy);\n    startPlane3D.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\n    startPlane2D.w = -dot(startPlane2D.xyz, posEc2D);\n    startPlane3D.w = -dot(startPlane3D.xyz, posEc3D);\n\n    // Right plane\n    vec4 rightPlane2D;\n    vec4 rightPlane3D;\n    rightPlane2D.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\n    rightPlane3D.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\n    rightPlane2D.w = -dot(rightPlane2D.xyz, posEc2D);\n    rightPlane3D.w = -dot(rightPlane3D.xyz, posEc3D);\n\n    // End position\n    posRelativeToEye2D = posRelativeToEye2D + vec4(0.0, offsetAndRight2D.xy, 0.0);\n    posRelativeToEye3D = posRelativeToEye3D + vec4(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w, 0.0);\n    posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\n    posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\n    posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\n    vec3 endEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\n    vec3 forwardEc3D = czm_normal * normalize(vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w));\n    vec3 forwardEc2D = czm_normal * normalize(vec3(0.0, offsetAndRight2D.xy));\n\n    // End plane\n    vec4 endPlane2D;\n    vec4 endPlane3D;\n    endPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.zw);\n    endPlane3D.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\n    endPlane2D.w = -dot(endPlane2D.xyz, posEc2D);\n    endPlane3D.w = -dot(endPlane3D.xyz, posEc3D);\n\n    // Forward direction\n    v_forwardDirectionEC = normalize(endEC - startEC);\n\n    vec2 cleanTexcoordNormalization2D;\n    cleanTexcoordNormalization2D.x = abs(texcoordNormalization2D.x);\n    cleanTexcoordNormalization2D.y = czm_branchFreeTernary(texcoordNormalization2D.y > 1.0, 0.0, abs(texcoordNormalization2D.y));\n    vec2 cleanTexcoordNormalization3D;\n    cleanTexcoordNormalization3D.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\n    cleanTexcoordNormalization3D.y = rightNormalAndTextureCoordinateNormalizationY.w;\n    cleanTexcoordNormalization3D.y = czm_branchFreeTernary(cleanTexcoordNormalization3D.y > 1.0, 0.0, abs(cleanTexcoordNormalization3D.y));\n\n    v_texcoordNormalizationAndHalfWidth.xy = mix(cleanTexcoordNormalization2D, cleanTexcoordNormalization3D, czm_morphTime);\n\n#ifdef PER_INSTANCE_COLOR\n    v_color = czm_batchTable_color(batchId);\n#else // PER_INSTANCE_COLOR\n    // For computing texture coordinates\n\n    v_alignedPlaneDistances.x = -dot(v_forwardDirectionEC, startEC);\n    v_alignedPlaneDistances.y = -dot(-v_forwardDirectionEC, endEC);\n#endif // PER_INSTANCE_COLOR\n\n#ifdef WIDTH_VARYING\n    float width = czm_batchTable_width(batchId);\n    float halfWidth = width * 0.5;\n    v_width = width;\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\n#else\n    float halfWidth = 0.5 * czm_batchTable_width(batchId);\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\n#endif\n\n    // Compute a normal along which to "push" the position out, extending the miter depending on view distance.\n    // Position has already been "pushed" by unit length along miter normal, and miter normals are encoded in the planes.\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\n    // Since this is morphing, compute both 3D and 2D positions and then blend.\n\n    // ****** 3D ******\n    // Check distance to the end plane and start plane, pick the plane that is closer\n    vec4 positionEc3D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position3DHigh, position3DLow); // w = 1.0, see czm_computePosition\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlane3D, positionEc3D.xyz));\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlane3D, positionEc3D.xyz));\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane3D.xyz, endPlane3D.xyz);\n    vec3 upOrDown = normalize(cross(rightPlane3D.xyz, planeDirection)); // Points "up" for start plane, "down" at end plane.\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\n\n    // Nudge the top vertex upwards to prevent flickering\n    vec3 geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc3D));\n    geodeticSurfaceNormal *= float(0.0 <= rightNormalAndTextureCoordinateNormalizationY.w && rightNormalAndTextureCoordinateNormalizationY.w <= 1.0);\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\n    positionEc3D.xyz += geodeticSurfaceNormal;\n\n    // Determine if this vertex is on the "left" or "right"\n    normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\n\n    // A "perfect" implementation would push along normals according to the angle against forward.\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\n    positionEc3D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc3D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\n\n    // ****** 2D ******\n    // Check distance to the end plane and start plane, pick the plane that is closer\n    vec4 positionEc2D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy); // w = 1.0, see czm_computePosition\n    absStartPlaneDistance = abs(czm_planeDistance(startPlane2D, positionEc2D.xyz));\n    absEndPlaneDistance = abs(czm_planeDistance(endPlane2D, positionEc2D.xyz));\n    planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane2D.xyz, endPlane2D.xyz);\n    upOrDown = normalize(cross(rightPlane2D.xyz, planeDirection)); // Points "up" for start plane, "down" at end plane.\n    normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\n\n    // Nudge the top vertex upwards to prevent flickering\n    geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc2D));\n    geodeticSurfaceNormal *= float(0.0 <= texcoordNormalization2D.y && texcoordNormalization2D.y <= 1.0);\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\n    positionEc2D.xyz += geodeticSurfaceNormal;\n\n    // Determine if this vertex is on the "left" or "right"\n    normalEC *= sign(texcoordNormalization2D.x);\n#ifndef PER_INSTANCE_COLOR\n    // Use vertex\'s sidedness to compute its texture coordinate.\n    v_texcoordT = clamp(sign(texcoordNormalization2D.x), 0.0, 1.0);\n#endif\n\n    // A "perfect" implementation would push along normals according to the angle against forward.\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\n    positionEc2D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc2D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\n\n    // Blend for actual position\n    gl_Position = czm_projection * mix(positionEc2D, positionEc3D, czm_morphTime);\n\n#ifdef ANGLE_VARYING\n    // Approximate relative screen space direction of the line.\n    vec2 approxLineDirection = normalize(vec2(v_forwardDirectionEC.x, -v_forwardDirectionEC.y));\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\n#endif\n}\n'},57862:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\n\n// In 2D and in 3D, texture coordinate normalization component signs encodes:\n// * X sign - sidedness relative to right plane\n// * Y sign - is negative OR magnitude is greater than 1.0 if vertex is on bottom of volume\n#ifndef COLUMBUS_VIEW_2D\nattribute vec4 startHiAndForwardOffsetX;\nattribute vec4 startLoAndForwardOffsetY;\nattribute vec4 startNormalAndForwardOffsetZ;\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\n#else\nattribute vec4 startHiLo2D;\nattribute vec4 offsetAndRight2D;\nattribute vec4 startEndNormals2D;\nattribute vec2 texcoordNormalization2D;\n#endif\n\nattribute float batchId;\n\nvarying vec4 v_startPlaneNormalEcAndHalfWidth;\nvarying vec4 v_endPlaneNormalEcAndBatchId;\nvarying vec4 v_rightPlaneEC;\nvarying vec4 v_endEcAndStartEcX;\nvarying vec4 v_texcoordNormalizationAndStartEcYZ;\n\n// For materials\n#ifdef WIDTH_VARYING\nvarying float v_width;\n#endif\n#ifdef ANGLE_VARYING\nvarying float v_polylineAngle;\n#endif\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#endif\n\nvoid main()\n{\n#ifdef COLUMBUS_VIEW_2D\n    vec3 ecStart = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw))).xyz;\n\n    vec3 forwardDirectionEC = czm_normal * vec3(0.0, offsetAndRight2D.xy);\n    vec3 ecEnd = forwardDirectionEC + ecStart;\n    forwardDirectionEC = normalize(forwardDirectionEC);\n\n    // Right plane\n    v_rightPlaneEC.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\n    v_rightPlaneEC.w = -dot(v_rightPlaneEC.xyz, ecStart);\n\n    // start plane\n    vec4 startPlaneEC;\n    startPlaneEC.xyz =  czm_normal * vec3(0.0, startEndNormals2D.xy);\n    startPlaneEC.w = -dot(startPlaneEC.xyz, ecStart);\n\n    // end plane\n    vec4 endPlaneEC;\n    endPlaneEC.xyz =  czm_normal * vec3(0.0, startEndNormals2D.zw);\n    endPlaneEC.w = -dot(endPlaneEC.xyz, ecEnd);\n\n    v_texcoordNormalizationAndStartEcYZ.x = abs(texcoordNormalization2D.x);\n    v_texcoordNormalizationAndStartEcYZ.y = texcoordNormalization2D.y;\n\n#else // COLUMBUS_VIEW_2D\n    vec3 ecStart = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz)).xyz;\n    vec3 offset = czm_normal * vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w);\n    vec3 ecEnd = ecStart + offset;\n\n    vec3 forwardDirectionEC = normalize(offset);\n\n    // start plane\n    vec4 startPlaneEC;\n    startPlaneEC.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\n    startPlaneEC.w = -dot(startPlaneEC.xyz, ecStart);\n\n    // end plane\n    vec4 endPlaneEC;\n    endPlaneEC.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\n    endPlaneEC.w = -dot(endPlaneEC.xyz, ecEnd);\n\n    // Right plane\n    v_rightPlaneEC.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\n    v_rightPlaneEC.w = -dot(v_rightPlaneEC.xyz, ecStart);\n\n    v_texcoordNormalizationAndStartEcYZ.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\n    v_texcoordNormalizationAndStartEcYZ.y = rightNormalAndTextureCoordinateNormalizationY.w;\n\n#endif // COLUMBUS_VIEW_2D\n\n    v_endEcAndStartEcX.xyz = ecEnd;\n    v_endEcAndStartEcX.w = ecStart.x;\n    v_texcoordNormalizationAndStartEcYZ.zw = ecStart.yz;\n\n#ifdef PER_INSTANCE_COLOR\n    v_color = czm_batchTable_color(batchId);\n#endif // PER_INSTANCE_COLOR\n\n    // Compute a normal along which to "push" the position out, extending the miter depending on view distance.\n    // Position has already been "pushed" by unit length along miter normal, and miter normals are encoded in the planes.\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\n    vec4 positionRelativeToEye = czm_computePosition();\n\n    // Check distance to the end plane and start plane, pick the plane that is closer\n    vec4 positionEC = czm_modelViewRelativeToEye * positionRelativeToEye; // w = 1.0, see czm_computePosition\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlaneEC, positionEC.xyz));\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlaneEC, positionEC.xyz));\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlaneEC.xyz, endPlaneEC.xyz);\n    vec3 upOrDown = normalize(cross(v_rightPlaneEC.xyz, planeDirection)); // Points "up" for start plane, "down" at end plane.\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));           // In practice, the opposite seems to work too.\n\n    // Extrude bottom vertices downward for far view distances, like for GroundPrimitives\n    upOrDown = cross(forwardDirectionEC, normalEC);\n    upOrDown = float(czm_sceneMode == czm_sceneMode3D) * upOrDown;\n    upOrDown = float(v_texcoordNormalizationAndStartEcYZ.y > 1.0 || v_texcoordNormalizationAndStartEcYZ.y < 0.0) * upOrDown;\n    upOrDown = min(GLOBE_MINIMUM_ALTITUDE, czm_geometricToleranceOverMeter * length(positionRelativeToEye.xyz)) * upOrDown;\n    positionEC.xyz += upOrDown;\n\n    v_texcoordNormalizationAndStartEcYZ.y = czm_branchFreeTernary(v_texcoordNormalizationAndStartEcYZ.y > 1.0, 0.0, abs(v_texcoordNormalizationAndStartEcYZ.y));\n\n    // Determine distance along normalEC to push for a volume of appropriate width.\n    // Make volumes about double pixel width for a conservative fit - in practice the\n    // extra cost here is minimal compared to the loose volume heights.\n    //\n    // N = normalEC (guaranteed "right-facing")\n    // R = rightEC\n    // p = angle between N and R\n    // w = distance to push along R if R == N\n    // d = distance to push along N\n    //\n    //   N   R\n    //  {  p| }      * cos(p) = dot(N, R) = w / d\n    //  d  |  |w    * d = w / dot(N, R)\n    //    { | }\n    //       o---------- polyline segment ----\x3e\n    //\n    float width = czm_batchTable_width(batchId);\n#ifdef WIDTH_VARYING\n    v_width = width;\n#endif\n\n    v_startPlaneNormalEcAndHalfWidth.xyz = startPlaneEC.xyz;\n    v_startPlaneNormalEcAndHalfWidth.w = width * 0.5;\n\n    v_endPlaneNormalEcAndBatchId.xyz = endPlaneEC.xyz;\n    v_endPlaneNormalEcAndBatchId.w = batchId;\n\n    width = width * max(0.0, czm_metersPerPixel(positionEC)); // width = distance to push along R\n    width = width / dot(normalEC, v_rightPlaneEC.xyz); // width = distance to push along N\n\n    // Determine if this vertex is on the "left" or "right"\n#ifdef COLUMBUS_VIEW_2D\n        normalEC *= sign(texcoordNormalization2D.x);\n#else\n        normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\n#endif\n\n    positionEC.xyz += width * normalEC;\n    gl_Position = czm_depthClamp(czm_projection * positionEC);\n\n#ifdef ANGLE_VARYING\n    // Approximate relative screen space direction of the line.\n    vec2 approxLineDirection = normalize(vec2(forwardDirectionEC.x, -forwardDirectionEC.y));\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\n#endif\n}\n'},464819:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute vec3 position2DHigh;\nattribute vec3 position2DLow;\nattribute vec3 prevPosition3DHigh;\nattribute vec3 prevPosition3DLow;\nattribute vec3 prevPosition2DHigh;\nattribute vec3 prevPosition2DLow;\nattribute vec3 nextPosition3DHigh;\nattribute vec3 nextPosition3DLow;\nattribute vec3 nextPosition2DHigh;\nattribute vec3 nextPosition2DLow;\nattribute vec4 texCoordExpandAndBatchIndex;\n\nvarying vec2  v_st;\nvarying float v_width;\nvarying vec4 v_pickColor;\nvarying float v_polylineAngle;\n\nvoid main()\n{\n    float texCoord = texCoordExpandAndBatchIndex.x;\n    float expandDir = texCoordExpandAndBatchIndex.y;\n    bool usePrev = texCoordExpandAndBatchIndex.z < 0.0;\n    float batchTableIndex = texCoordExpandAndBatchIndex.w;\n\n    vec2 widthAndShow = batchTable_getWidthAndShow(batchTableIndex);\n    float width = widthAndShow.x + 0.5;\n    float show = widthAndShow.y;\n\n    if (width < 1.0)\n    {\n        show = 0.0;\n    }\n\n    vec4 pickColor = batchTable_getPickColor(batchTableIndex);\n\n    vec4 p, prev, next;\n    if (czm_morphTime == 1.0)\n    {\n        p = czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz);\n        prev = czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz);\n        next = czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz);\n    }\n    else if (czm_morphTime == 0.0)\n    {\n        p = czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy);\n        prev = czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy);\n        next = czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy);\n    }\n    else\n    {\n        p = czm_columbusViewMorph(\n                czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy),\n                czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz),\n                czm_morphTime);\n        prev = czm_columbusViewMorph(\n                czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy),\n                czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz),\n                czm_morphTime);\n        next = czm_columbusViewMorph(\n                czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy),\n                czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz),\n                czm_morphTime);\n    }\n\n    #ifdef DISTANCE_DISPLAY_CONDITION\n        vec3 centerHigh = batchTable_getCenterHigh(batchTableIndex);\n        vec4 centerLowAndRadius = batchTable_getCenterLowAndRadius(batchTableIndex);\n        vec3 centerLow = centerLowAndRadius.xyz;\n        float radius = centerLowAndRadius.w;\n        vec2 distanceDisplayCondition = batchTable_getDistanceDisplayCondition(batchTableIndex);\n\n        float lengthSq;\n        if (czm_sceneMode == czm_sceneMode2D)\n        {\n            lengthSq = czm_eyeHeight2D.y;\n        }\n        else\n        {\n            vec4 center = czm_translateRelativeToEye(centerHigh.xyz, centerLow.xyz);\n            lengthSq = max(0.0, dot(center.xyz, center.xyz) - radius * radius);\n        }\n\n        float nearSq = distanceDisplayCondition.x * distanceDisplayCondition.x;\n        float farSq = distanceDisplayCondition.y * distanceDisplayCondition.y;\n        if (lengthSq < nearSq || lengthSq > farSq)\n        {\n            show = 0.0;\n        }\n    #endif\n\n    float polylineAngle;\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, polylineAngle);\n    gl_Position = czm_viewportOrthographic * positionWC * show;\n\n    v_st.s = texCoord;\n    v_st.t = czm_writeNonPerspective(clamp(expandDir, 0.0, 1.0), gl_Position.w);\n\n    v_width = width;\n    v_pickColor = pickColor;\n    v_polylineAngle = polylineAngle;\n}\n"},602355:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\nvarying vec2 v_textureCoordinates;\n\n#ifdef AUTO_EXPOSURE\nuniform sampler2D autoExposure;\n#endif\n\nvoid main()\n{\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\n    vec3 color = fragmentColor.rgb;\n\n#ifdef AUTO_EXPOSURE\n    color /= texture2D(autoExposure, vec2(0.5)).r;\n#endif\n    color = czm_acesTonemapping(color);\n    color = czm_inverseGamma(color);\n\n    gl_FragColor = vec4(color, fragmentColor.a);\n}\n"},287616:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D colorTexture2;\n\nuniform vec2 center;\nuniform float radius;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    vec4 color0 = texture2D(colorTexture, v_textureCoordinates);\n    vec4 color1 = texture2D(colorTexture2, v_textureCoordinates);\n\n    float x = length(gl_FragCoord.xy - center) / radius;\n    float t = smoothstep(0.5, 0.8, x);\n    gl_FragColor = mix(color0 + color1, color1, t);\n}\n"},516135:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D randomTexture;\nuniform sampler2D depthTexture;\nuniform float intensity;\nuniform float bias;\nuniform float lengthCap;\nuniform float stepSize;\nuniform float frustumLength;\n\nvarying vec2 v_textureCoordinates;\n\nvec4 clipToEye(vec2 uv, float depth)\n{\n    vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\n    vec4 posEC = czm_inverseProjection * vec4(xy, depth, 1.0);\n    posEC = posEC / posEC.w;\n    return posEC;\n}\n\n//Reconstruct Normal Without Edge Removation\nvec3 getNormalXEdge(vec3 posInCamera, float depthU, float depthD, float depthL, float depthR, vec2 pixelSize)\n{\n    vec4 posInCameraUp = clipToEye(v_textureCoordinates - vec2(0.0, pixelSize.y), depthU);\n    vec4 posInCameraDown = clipToEye(v_textureCoordinates + vec2(0.0, pixelSize.y), depthD);\n    vec4 posInCameraLeft = clipToEye(v_textureCoordinates - vec2(pixelSize.x, 0.0), depthL);\n    vec4 posInCameraRight = clipToEye(v_textureCoordinates + vec2(pixelSize.x, 0.0), depthR);\n\n    vec3 up = posInCamera.xyz - posInCameraUp.xyz;\n    vec3 down = posInCameraDown.xyz - posInCamera.xyz;\n    vec3 left = posInCamera.xyz - posInCameraLeft.xyz;\n    vec3 right = posInCameraRight.xyz - posInCamera.xyz;\n\n    vec3 DX = length(left) < length(right) ? left : right;\n    vec3 DY = length(up) < length(down) ? up : down;\n\n    return normalize(cross(DY, DX));\n}\n\nvoid main(void)\n{\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\n    vec4 posInCamera = clipToEye(v_textureCoordinates, depth);\n\n    if (posInCamera.z > frustumLength)\n    {\n        gl_FragColor = vec4(1.0);\n        return;\n    }\n\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\n    float depthU = czm_readDepth(depthTexture, v_textureCoordinates - vec2(0.0, pixelSize.y));\n    float depthD = czm_readDepth(depthTexture, v_textureCoordinates + vec2(0.0, pixelSize.y));\n    float depthL = czm_readDepth(depthTexture, v_textureCoordinates - vec2(pixelSize.x, 0.0));\n    float depthR = czm_readDepth(depthTexture, v_textureCoordinates + vec2(pixelSize.x, 0.0));\n    vec3 normalInCamera = getNormalXEdge(posInCamera.xyz, depthU, depthD, depthL, depthR, pixelSize);\n\n    float ao = 0.0;\n    vec2 sampleDirection = vec2(1.0, 0.0);\n    float gapAngle = 90.0 * czm_radiansPerDegree;\n\n    // RandomNoise\n    float randomVal = texture2D(randomTexture, v_textureCoordinates).x;\n\n    //Loop for each direction\n    for (int i = 0; i < 4; i++)\n    {\n        float newGapAngle = gapAngle * (float(i) + randomVal);\n        float cosVal = cos(newGapAngle);\n        float sinVal = sin(newGapAngle);\n\n        //Rotate Sampling Direction\n        vec2 rotatedSampleDirection = vec2(cosVal * sampleDirection.x - sinVal * sampleDirection.y, sinVal * sampleDirection.x + cosVal * sampleDirection.y);\n        float localAO = 0.0;\n        float localStepSize = stepSize;\n\n        //Loop for each step\n        for (int j = 0; j < 6; j++)\n        {\n            vec2 newCoords = v_textureCoordinates + rotatedSampleDirection * localStepSize * pixelSize;\n\n            //Exception Handling\n            if(newCoords.x > 1.0 || newCoords.y > 1.0 || newCoords.x < 0.0 || newCoords.y < 0.0)\n            {\n                break;\n            }\n\n            float stepDepthInfo = czm_readDepth(depthTexture, newCoords);\n            vec4 stepPosInCamera = clipToEye(newCoords, stepDepthInfo);\n            vec3 diffVec = stepPosInCamera.xyz - posInCamera.xyz;\n            float len = length(diffVec);\n\n            if (len > lengthCap)\n            {\n                break;\n            }\n\n            float dotVal = clamp(dot(normalInCamera, normalize(diffVec)), 0.0, 1.0 );\n            float weight = len / lengthCap;\n            weight = 1.0 - weight * weight;\n\n            if (dotVal < bias)\n            {\n                dotVal = 0.0;\n            }\n\n            localAO = max(localAO, dotVal * weight);\n            localStepSize += stepSize;\n        }\n        ao += localAO;\n    }\n\n    ao /= 4.0;\n    ao = 1.0 - clamp(ao, 0.0, 1.0);\n    ao = pow(ao, intensity);\n    gl_FragColor = vec4(vec3(ao), 1.0);\n}\n"},875787:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D ambientOcclusionTexture;\nuniform bool ambientOcclusionOnly;\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec3 color = texture2D(colorTexture, v_textureCoordinates).rgb;\n    vec3 ao = texture2D(ambientOcclusionTexture, v_textureCoordinates).rgb;\n    gl_FragColor.rgb = ambientOcclusionOnly ? ao : ao * color;\n}\n"},296781:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform float gradations;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\n#ifdef CZM_SELECTED_FEATURE\n    if (czm_selected()) {\n        gl_FragColor = vec4(rgb, 1.0);\n        return;\n    }\n#endif\n    float luminance = czm_luminance(rgb);\n    float darkness = luminance * gradations;\n    darkness = (darkness - fract(darkness)) / gradations;\n    gl_FragColor = vec4(vec3(darkness), 1.0);\n}\n"},713461:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D bloomTexture;\nuniform bool glowOnly;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\n\n#ifdef CZM_SELECTED_FEATURE\n    if (czm_selected()) {\n        gl_FragColor = color;\n        return;\n    }\n#endif\n\n    vec4 bloom = texture2D(bloomTexture, v_textureCoordinates);\n    gl_FragColor = glowOnly ? bloom : bloom + color;\n}\n"},531494:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='uniform sampler2D colorTexture;\n\nuniform float avgLuminance;\nuniform float threshold;\nuniform float offset;\n\nvarying vec2 v_textureCoordinates;\n\nfloat key(float avg)\n{\n    float guess = 1.5 - (1.5 / (avg * 0.1 + 1.0));\n    return max(0.0, guess) + 0.1;\n}\n\n// See section 9. "The bright-pass filter" of Realtime HDR Rendering\n// http://www.cg.tuwien.ac.at/research/publications/2007/Luksch_2007_RHR/Luksch_2007_RHR-RealtimeHDR%20.pdf\n\nvoid main()\n{\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\n    vec3 xyz = czm_RGBToXYZ(color.rgb);\n    float luminance = xyz.r;\n\n    float scaledLum = key(avgLuminance) * luminance / avgLuminance;\n    float brightLum = max(scaledLum - threshold, 0.0);\n    float brightness = brightLum / (offset + brightLum);\n\n    xyz.r = brightness;\n    gl_FragColor = vec4(czm_XYZToRGB(xyz), 1.0);\n}\n'},204509:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform float brightness;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\n    vec3 target = vec3(0.0);\n    gl_FragColor = vec4(mix(target, rgb, brightness), 1.0);\n}\n"},770707:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\n#ifdef DEBUG_SHOW_DEPTH\nuniform sampler2D u_packedTranslucentDepth;\n#endif\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n#ifdef DEBUG_SHOW_DEPTH\n    if (v_textureCoordinates.x < 0.5)\n    {\n        gl_FragColor.rgb = vec3(czm_unpackDepth(texture2D(u_packedTranslucentDepth, v_textureCoordinates)));\n        gl_FragColor.a = 1.0;\n    }\n#else\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\n\n#ifdef PICK\n    if (color == vec4(0.0))\n    {\n        discard;\n    }\n#else\n    // Reverse premultiplication process to get the correct composited result of the classification primitives\n    color.rgb /= color.a;\n#endif\n    gl_FragColor = color;\n#endif\n}\n"},614593:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform float contrast;\nuniform float brightness;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec3 sceneColor = texture2D(colorTexture, v_textureCoordinates).xyz;\n    sceneColor = czm_RGBToHSB(sceneColor);\n    sceneColor.z += brightness;\n    sceneColor = czm_HSBToRGB(sceneColor);\n\n    float factor = (259.0 * (contrast + 255.0)) / (255.0 * (259.0 - contrast));\n    sceneColor = factor * (sceneColor - vec3(0.5)) + vec3(0.5);\n    gl_FragColor = vec4(sceneColor, 1.0);\n}\n"},65156:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D blurTexture;\nuniform sampler2D depthTexture;\nuniform float focalDistance;\n\nvarying vec2 v_textureCoordinates;\n\nvec4 toEye(vec2 uv, float depth)\n{\n   vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\n   vec4 posInCamera = czm_inverseProjection * vec4(xy, depth, 1.0);\n   posInCamera = posInCamera / posInCamera.w;\n   return posInCamera;\n}\n\nfloat computeDepthBlur(float depth)\n{\n    float f;\n    if (depth < focalDistance)\n    {\n        f = (focalDistance - depth) / (focalDistance - czm_currentFrustum.x);\n    }\n    else\n    {\n        f = (depth - focalDistance) / (czm_currentFrustum.y - focalDistance);\n        f = pow(f, 0.1);\n    }\n    f *= f;\n    f = clamp(f, 0.0, 1.0);\n    return pow(f, 0.5);\n}\n\nvoid main(void)\n{\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\n    vec4 posInCamera = toEye(v_textureCoordinates, depth);\n    float d = computeDepthBlur(-posInCamera.z);\n    gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), texture2D(blurTexture, v_textureCoordinates), d);\n}\n"},792625:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D depthTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\n    gl_FragColor = vec4(vec3(depth), 1.0);\n}\n"},751077:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D depthTexture;\nuniform float length;\nuniform vec4 color;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    float directions[3];\n    directions[0] = -1.0;\n    directions[1] = 0.0;\n    directions[2] = 1.0;\n\n    float scalars[3];\n    scalars[0] = 3.0;\n    scalars[1] = 10.0;\n    scalars[2] = 3.0;\n\n    float padx = czm_pixelRatio / czm_viewport.z;\n    float pady = czm_pixelRatio / czm_viewport.w;\n\n#ifdef CZM_SELECTED_FEATURE\n    bool selected = false;\n    for (int i = 0; i < 3; ++i)\n    {\n        float dir = directions[i];\n        selected = selected || czm_selected(vec2(-padx, dir * pady));\n        selected = selected || czm_selected(vec2(padx, dir * pady));\n        selected = selected || czm_selected(vec2(dir * padx, -pady));\n        selected = selected || czm_selected(vec2(dir * padx, pady));\n        if (selected)\n        {\n            break;\n        }\n    }\n    if (!selected)\n    {\n        gl_FragColor = vec4(color.rgb, 0.0);\n        return;\n    }\n#endif\n\n    float horizEdge = 0.0;\n    float vertEdge = 0.0;\n\n    for (int i = 0; i < 3; ++i)\n    {\n        float dir = directions[i];\n        float scale = scalars[i];\n\n        horizEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(-padx, dir * pady)).x * scale;\n        horizEdge += texture2D(depthTexture, v_textureCoordinates + vec2(padx, dir * pady)).x * scale;\n\n        vertEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, -pady)).x * scale;\n        vertEdge += texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, pady)).x * scale;\n    }\n\n    float len = sqrt(horizEdge * horizEdge + vertEdge * vertEdge);\n    gl_FragColor = vec4(color.rgb, len > length ? color.a : 0.0);\n}\n"},689134:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec2 v_textureCoordinates;\n\nuniform sampler2D colorTexture;\n\nconst float fxaaQualitySubpix = 0.5;\nconst float fxaaQualityEdgeThreshold = 0.125;\nconst float fxaaQualityEdgeThresholdMin = 0.0833;\n\nvoid main()\n{\n    vec2 fxaaQualityRcpFrame = vec2(1.0) / czm_viewport.zw;\n    vec4 color = FxaaPixelShader(\n        v_textureCoordinates,\n        colorTexture,\n        fxaaQualityRcpFrame,\n        fxaaQualitySubpix,\n        fxaaQualityEdgeThreshold,\n        fxaaQualityEdgeThresholdMin);\n    float alpha = texture2D(colorTexture, v_textureCoordinates).a;\n    gl_FragColor = vec4(color.rgb, alpha);\n}\n"},938541:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\nvarying vec2 v_textureCoordinates;\n\n#ifdef AUTO_EXPOSURE\nuniform sampler2D autoExposure;\n#endif\n\n// See slides 142 and 143:\n//     http://www.gdcvault.com/play/1012459/Uncharted_2__HDR_Lighting\n\nvoid main()\n{\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\n    vec3 color = fragmentColor.rgb;\n\n#ifdef AUTO_EXPOSURE\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\n    color /= exposure;\n#endif\n\n\tconst float A = 0.22; // shoulder strength\n\tconst float B = 0.30; // linear strength\n\tconst float C = 0.10; // linear angle\n\tconst float D = 0.20; // toe strength\n\tconst float E = 0.01; // toe numerator\n\tconst float F = 0.30; // toe denominator\n\n\tconst float white = 11.2; // linear white point value\n\n\tvec3 c = ((color * (A * color + C * B) + D * E) / (color * ( A * color + B) + D * F)) - E / F;\n\tfloat w = ((white * (A * white + C * B) + D * E) / (white * ( A * white + B) + D * F)) - E / F;\n\n\tc = czm_inverseGamma(c / w);\n\tgl_FragColor = vec4(c, fragmentColor.a);\n}\n"},47020:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#define SAMPLES 8\n\nuniform float delta;\nuniform float sigma;\nuniform float direction; // 0.0 for x direction, 1.0 for y direction\n\nuniform sampler2D colorTexture;\n\n#ifdef USE_STEP_SIZE\nuniform float stepSize;\n#else\nuniform vec2 step;\n#endif\n\nvarying vec2 v_textureCoordinates;\n\n//  Incremental Computation of the Gaussian:\n//  https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch40.html\n\nvoid main()\n{\n    vec2 st = v_textureCoordinates;\n    vec2 dir = vec2(1.0 - direction, direction);\n\n#ifdef USE_STEP_SIZE\n    vec2 step = vec2(stepSize * (czm_pixelRatio / czm_viewport.zw));\n#else\n    vec2 step = step;\n#endif\n\n    vec3 g;\n    g.x = 1.0 / (sqrt(czm_twoPi) * sigma);\n    g.y = exp((-0.5 * delta * delta) / (sigma * sigma));\n    g.z = g.y * g.y;\n\n    vec4 result = texture2D(colorTexture, st) * g.x;\n    for (int i = 1; i < SAMPLES; ++i)\n    {\n        g.xy *= g.yz;\n\n        vec2 offset = float(i) * dir * step;\n        result += texture2D(colorTexture, st - offset) * g.x;\n        result += texture2D(colorTexture, st + offset) * g.x;\n    }\n\n    gl_FragColor = result;\n}\n"},110404:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D dirtTexture;\nuniform sampler2D starTexture;\nuniform vec2 dirtTextureDimensions;\nuniform float distortion;\nuniform float ghostDispersal;\nuniform float haloWidth;\nuniform float dirtAmount;\nuniform float earthRadius;\nuniform float intensity;\n\nvarying vec2 v_textureCoordinates;\n\n// whether it is in space or not\n// 6500000.0 is empirical value\n#define DISTANCE_TO_SPACE 6500000.0\n\n// return ndc from world coordinate biased earthRadius\nvec4 getNDCFromWC(vec3 WC, float earthRadius)\n{\n    vec4 positionEC = czm_view * vec4(WC, 1.0);\n    positionEC = vec4(positionEC.x + earthRadius, positionEC.y, positionEC.z, 1.0);\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\n    return czm_viewportOrthographic * vec4(positionWC.xy, -positionWC.z, 1.0);\n}\n\n// Check if current pixel is included Earth\n// if then mask it gradually\nfloat isInEarth(vec2 texcoord, vec2 sceneSize)\n{\n    vec2 NDC = texcoord * 2.0 - 1.0;\n    vec4 earthPosSC = getNDCFromWC(vec3(0.0), 0.0);\n    vec4 earthPosSCEdge = getNDCFromWC(vec3(0.0), earthRadius * 1.5);\n    NDC.xy -= earthPosSC.xy;\n\n    float X = abs(NDC.x) * sceneSize.x;\n    float Y = abs(NDC.y) * sceneSize.y;\n\n    return clamp(0.0, 1.0, max(sqrt(X * X + Y * Y) / max(abs(earthPosSCEdge.x * sceneSize.x), 1.0) - 0.8 , 0.0));\n}\n\n// For Chromatic effect\nvec4 textureDistorted(sampler2D tex, vec2 texcoord, vec2 direction, vec3 distortion, bool isSpace)\n{\n    vec2 sceneSize = czm_viewport.zw;\n    vec3 color;\n    if(isSpace)\n    {\n        color.r = isInEarth(texcoord + direction * distortion.r, sceneSize) * texture2D(tex, texcoord + direction * distortion.r).r;\n        color.g = isInEarth(texcoord + direction * distortion.g, sceneSize) * texture2D(tex, texcoord + direction * distortion.g).g;\n        color.b = isInEarth(texcoord + direction * distortion.b, sceneSize) * texture2D(tex, texcoord + direction * distortion.b).b;\n    }\n    else\n    {\n        color.r = texture2D(tex, texcoord + direction * distortion.r).r;\n        color.g = texture2D(tex, texcoord + direction * distortion.g).g;\n        color.b = texture2D(tex, texcoord + direction * distortion.b).b;\n    }\n    return vec4(clamp(color, 0.0, 1.0), 0.0);\n}\n\nvoid main(void)\n{\n    vec4 originalColor = texture2D(colorTexture, v_textureCoordinates);\n    vec3 rgb = originalColor.rgb;\n    bool isSpace = length(czm_viewerPositionWC.xyz) > DISTANCE_TO_SPACE;\n\n    // Sun position\n    vec4 sunPos = czm_morphTime == 1.0 ? vec4(czm_sunPositionWC, 1.0) : vec4(czm_sunPositionColumbusView.zxy, 1.0);\n    vec4 sunPositionEC = czm_view * sunPos;\n    vec4 sunPositionWC = czm_eyeToWindowCoordinates(sunPositionEC);\n    sunPos = czm_viewportOrthographic * vec4(sunPositionWC.xy, -sunPositionWC.z, 1.0);\n\n    // If sun is not in the screen space, use original color.\n    if(!isSpace || !((sunPos.x >= -1.1 && sunPos.x <= 1.1) && (sunPos.y >= -1.1 && sunPos.y <= 1.1)))\n    {\n        // Lens flare is disabled when not in space until #5932 is fixed.\n        //    https://github.com/CesiumGS/cesium/issues/5932\n        gl_FragColor = originalColor;\n        return;\n    }\n\n    vec2 texcoord = vec2(1.0) - v_textureCoordinates;\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\n    vec2 invPixelSize = 1.0 / pixelSize;\n    vec3 distortionVec = pixelSize.x * vec3(-distortion, 0.0, distortion);\n\n    // ghost vector to image centre:\n    vec2 ghostVec = (vec2(0.5) - texcoord) * ghostDispersal;\n    vec3 direction = normalize(vec3(ghostVec, 0.0));\n\n    // sample ghosts:\n    vec4 result = vec4(0.0);\n    vec4 ghost = vec4(0.0);\n    for (int i = 0; i < 4; ++i)\n    {\n        vec2 offset = fract(texcoord + ghostVec * float(i));\n        // Only bright spots from the centre of the source image\n        ghost += textureDistorted(colorTexture, offset, direction.xy, distortionVec, isSpace);\n    }\n    result += ghost;\n\n    // sample halo\n    vec2 haloVec = normalize(ghostVec) * haloWidth;\n    float weightForHalo = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\n    weightForHalo = pow(1.0 - weightForHalo, 5.0);\n\n    result += textureDistorted(colorTexture, texcoord + haloVec, direction.xy, distortionVec, isSpace) * weightForHalo * 1.5;\n\n    // dirt on lens\n    vec2 dirtTexCoords = (v_textureCoordinates * invPixelSize) / dirtTextureDimensions;\n    if (dirtTexCoords.x > 1.0)\n    {\n        dirtTexCoords.x = mod(floor(dirtTexCoords.x), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.x) :  fract(dirtTexCoords.x);\n    }\n    if (dirtTexCoords.y > 1.0)\n    {\n        dirtTexCoords.y = mod(floor(dirtTexCoords.y), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.y) :  fract(dirtTexCoords.y);\n    }\n    result += dirtAmount * texture2D(dirtTexture, dirtTexCoords);\n\n    // Rotating starburst texture's coordinate\n    // dot(czm_view[0].xyz, vec3(0.0, 0.0, 1.0)) + dot(czm_view[1].xyz, vec3(0.0, 1.0, 0.0))\n    float camrot = czm_view[0].z + czm_view[1].y;\n    float cosValue = cos(camrot);\n    float sinValue = sin(camrot);\n    mat3 rotation = mat3(\n        cosValue, -sinValue, 0.0,\n        sinValue, cosValue, 0.0,\n        0.0, 0.0, 1.0\n    );\n\n    vec3 st1 = vec3(v_textureCoordinates * 2.0 - vec2(1.0), 1.0);\n    vec3 st2 = vec3((rotation * st1).xy, 1.0);\n    vec3 st3 = st2 * 0.5 + vec3(0.5);\n    vec2 lensStarTexcoord = st3.xy;\n    float weightForLensFlare = length(vec3(sunPos.xy, 0.0));\n    float oneMinusWeightForLensFlare = max(1.0 - weightForLensFlare, 0.0);\n\n    if (!isSpace)\n    {\n        result *= oneMinusWeightForLensFlare * intensity * 0.2;\n    }\n    else\n    {\n        result *= oneMinusWeightForLensFlare * intensity;\n        result *= texture2D(starTexture, lensStarTexcoord) * pow(weightForLensFlare, 1.0) * max((1.0 - length(vec3(st1.xy, 0.0))), 0.0) * 2.0;\n    }\n\n    result += texture2D(colorTexture, v_textureCoordinates);\n\n    gl_FragColor = result;\n}\n"},348331:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform vec3 white;\n\nvarying vec2 v_textureCoordinates;\n\n#ifdef AUTO_EXPOSURE\nuniform sampler2D autoExposure;\n#endif\n\n// See equation 4:\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\n\nvoid main()\n{\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\n    vec3 color = fragmentColor.rgb;\n#ifdef AUTO_EXPOSURE\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\n    color /= exposure;\n#endif\n    color = (color * (1.0 + color / white)) / (1.0 + color);\n    color = czm_inverseGamma(color);\n    gl_FragColor = vec4(color, fragmentColor.a);\n}\n"},102777:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\nvarying vec2 v_textureCoordinates;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main(void)\n{\n    float noiseValue = rand(v_textureCoordinates + sin(czm_frameNumber)) * 0.1;\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    gl_FragColor = vec4((noiseValue + rgb) * green, 1.0);\n}\n"},84525:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    gl_FragColor = texture2D(colorTexture, v_textureCoordinates);\n}\n"},723865:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform highp sampler2D u_depthTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    gl_FragColor = czm_packDepth(texture2D(u_depthTexture, v_textureCoordinates).r);\n}\n"},78538:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#extension GL_EXT_frag_depth : enable\n\nuniform sampler2D u_pointCloud_colorGBuffer;\nuniform sampler2D u_pointCloud_depthGBuffer;\nuniform vec2 u_distanceAndEdlStrength;\nvarying vec2 v_textureCoordinates;\n\nvec2 neighborContribution(float log2Depth, vec2 offset)\n{\n    float dist = u_distanceAndEdlStrength.x;\n    vec2 texCoordOrig = v_textureCoordinates + offset * dist;\n    vec2 texCoord0 = v_textureCoordinates + offset * floor(dist);\n    vec2 texCoord1 = v_textureCoordinates + offset * ceil(dist);\n\n    float depthOrLogDepth0 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord0));\n    float depthOrLogDepth1 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord1));\n\n    // ignore depth values that are the clear depth\n    if (depthOrLogDepth0 == 0.0 || depthOrLogDepth1 == 0.0) {\n        return vec2(0.0);\n    }\n\n    // interpolate the two adjacent depth values\n    float depthMix = mix(depthOrLogDepth0, depthOrLogDepth1, fract(dist));\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(texCoordOrig, depthMix);\n    return vec2(max(0.0, log2Depth - log2(-eyeCoordinate.z / eyeCoordinate.w)), 1.0);\n}\n\nvoid main()\n{\n    float depthOrLogDepth = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, v_textureCoordinates));\n\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, depthOrLogDepth);\n    eyeCoordinate /= eyeCoordinate.w;\n\n    float log2Depth = log2(-eyeCoordinate.z);\n\n    if (depthOrLogDepth == 0.0) // 0.0 is the clear value for the gbuffer\n    {\n        discard;\n    }\n\n    vec4 color = texture2D(u_pointCloud_colorGBuffer, v_textureCoordinates);\n\n    // sample from neighbors left, right, down, up\n    vec2 texelSize = 1.0 / czm_viewport.zw;\n\n    vec2 responseAndCount = vec2(0.0);\n\n    responseAndCount += neighborContribution(log2Depth, vec2(-texelSize.x, 0.0));\n    responseAndCount += neighborContribution(log2Depth, vec2(+texelSize.x, 0.0));\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, -texelSize.y));\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, +texelSize.y));\n\n    float response = responseAndCount.x / responseAndCount.y;\n    float strength = u_distanceAndEdlStrength.y;\n    float shade = exp(-response * 300.0 * strength);\n    color.rgb *= shade;\n    gl_FragColor = vec4(color);\n\n    // Input and output depth are the same.\n    gl_FragDepthEXT = depthOrLogDepth;\n}\n"},342432:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\n\nvarying vec2 v_textureCoordinates;\n\n#ifdef AUTO_EXPOSURE\nuniform sampler2D autoExposure;\n#endif\n\n// See equation 3:\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\n\nvoid main()\n{\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\n    vec3 color = fragmentColor.rgb;\n#ifdef AUTO_EXPOSURE\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\n    color /= exposure;\n#endif\n    color = color / (1.0 + color);\n    color = czm_inverseGamma(color);\n    gl_FragColor = vec4(color, fragmentColor.a);\n}\n"},419256:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D colorTexture;\nuniform sampler2D silhouetteTexture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main(void)\n{\n    vec4 silhouetteColor = texture2D(silhouetteTexture, v_textureCoordinates);\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\n    gl_FragColor = mix(color, silhouetteColor, silhouetteColor.a);\n}\n"},154605:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D u_texture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    gl_FragColor = texture2D(u_texture, v_textureCoordinates);\n}\n"},511762:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 position;\nattribute float webMercatorT;\n\nuniform vec2 u_textureDimensions;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    v_textureCoordinates = vec2(position.x, webMercatorT);\n    gl_Position = czm_viewportOrthographic * (position * vec4(u_textureDimensions, 1.0, 1.0));\n}\n"},878136:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n#endif\n\n#ifdef TEXTURE_COORDINATES\n#ifdef SPHERICAL\nvarying vec4 v_sphericalExtents;\n#else // SPHERICAL\nvarying vec2 v_inversePlaneExtents;\nvarying vec4 v_westPlane;\nvarying vec4 v_southPlane;\n#endif // SPHERICAL\nvarying vec3 v_uvMinAndSphericalLongitudeRotation;\nvarying vec3 v_uMaxAndInverseDistance;\nvarying vec3 v_vMaxAndInverseDistance;\n#endif // TEXTURE_COORDINATES\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#endif\n\n#ifdef NORMAL_EC\nvec3 getEyeCoordinate3FromWindowCoordinate(vec2 fragCoord, float logDepthOrDepth) {\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(fragCoord, logDepthOrDepth);\n    return eyeCoordinate.xyz / eyeCoordinate.w;\n}\n\nvec3 vectorFromOffset(vec4 eyeCoordinate, vec2 positiveOffset) {\n    vec2 glFragCoordXY = gl_FragCoord.xy;\n    // Sample depths at both offset and negative offset\n    float upOrRightLogDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, (glFragCoordXY + positiveOffset) / czm_viewport.zw));\n    float downOrLeftLogDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, (glFragCoordXY - positiveOffset) / czm_viewport.zw));\n    // Explicitly evaluate both paths\n    // Necessary for multifrustum and for edges of the screen\n    bvec2 upOrRightInBounds = lessThan(glFragCoordXY + positiveOffset, czm_viewport.zw);\n    float useUpOrRight = float(upOrRightLogDepth > 0.0 && upOrRightInBounds.x && upOrRightInBounds.y);\n    float useDownOrLeft = float(useUpOrRight == 0.0);\n    vec3 upOrRightEC = getEyeCoordinate3FromWindowCoordinate(glFragCoordXY + positiveOffset, upOrRightLogDepth);\n    vec3 downOrLeftEC = getEyeCoordinate3FromWindowCoordinate(glFragCoordXY - positiveOffset, downOrLeftLogDepth);\n    return (upOrRightEC - (eyeCoordinate.xyz / eyeCoordinate.w)) * useUpOrRight + ((eyeCoordinate.xyz / eyeCoordinate.w) - downOrLeftEC) * useDownOrLeft;\n}\n#endif // NORMAL_EC\n\nvoid main(void)\n{\n#ifdef REQUIRES_EC\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw));\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\n#endif\n\n#ifdef REQUIRES_WC\n    vec4 worldCoordinate4 = czm_inverseView * eyeCoordinate;\n    vec3 worldCoordinate = worldCoordinate4.xyz / worldCoordinate4.w;\n#endif\n\n#ifdef TEXTURE_COORDINATES\n    vec2 uv;\n#ifdef SPHERICAL\n    // Treat world coords as a sphere normal for spherical coordinates\n    vec2 sphericalLatLong = czm_approximateSphericalCoordinates(worldCoordinate);\n    sphericalLatLong.y += v_uvMinAndSphericalLongitudeRotation.z;\n    sphericalLatLong.y = czm_branchFreeTernary(sphericalLatLong.y < czm_pi, sphericalLatLong.y, sphericalLatLong.y - czm_twoPi);\n    uv.x = (sphericalLatLong.y - v_sphericalExtents.y) * v_sphericalExtents.w;\n    uv.y = (sphericalLatLong.x - v_sphericalExtents.x) * v_sphericalExtents.z;\n#else // SPHERICAL\n    // Unpack planes and transform to eye space\n    uv.x = czm_planeDistance(v_westPlane, eyeCoordinate.xyz / eyeCoordinate.w) * v_inversePlaneExtents.x;\n    uv.y = czm_planeDistance(v_southPlane, eyeCoordinate.xyz / eyeCoordinate.w) * v_inversePlaneExtents.y;\n#endif // SPHERICAL\n#endif // TEXTURE_COORDINATES\n\n#ifdef PICK\n#ifdef CULL_FRAGMENTS\n    // When classifying translucent geometry, logDepthOrDepth == 0.0\n    // indicates a region that should not be classified, possibly due to there\n    // being opaque pixels there in another buffer.\n    // Check for logDepthOrDepth != 0.0 to make sure this should be classified.\n    if (0.0 <= uv.x && uv.x <= 1.0 && 0.0 <= uv.y && uv.y <= 1.0 || logDepthOrDepth != 0.0) {\n        gl_FragColor.a = 1.0; // 0.0 alpha leads to discard from ShaderSource.createPickFragmentShaderSource\n        czm_writeDepthClamp();\n    }\n#else // CULL_FRAGMENTS\n        gl_FragColor.a = 1.0;\n#endif // CULL_FRAGMENTS\n#else // PICK\n\n#ifdef CULL_FRAGMENTS\n    // When classifying translucent geometry, logDepthOrDepth == 0.0\n    // indicates a region that should not be classified, possibly due to there\n    // being opaque pixels there in another buffer.\n    if (uv.x <= 0.0 || 1.0 <= uv.x || uv.y <= 0.0 || 1.0 <= uv.y || logDepthOrDepth == 0.0) {\n        discard;\n    }\n#endif\n\n#ifdef NORMAL_EC\n    // Compute normal by sampling adjacent pixels in 2x2 block in screen space\n    vec3 downUp = vectorFromOffset(eyeCoordinate, vec2(0.0, 1.0));\n    vec3 leftRight = vectorFromOffset(eyeCoordinate, vec2(1.0, 0.0));\n    vec3 normalEC = normalize(cross(leftRight, downUp));\n#endif\n\n\n#ifdef PER_INSTANCE_COLOR\n\n    vec4 color = czm_gammaCorrect(v_color);\n#ifdef FLAT\n    gl_FragColor = color;\n#else // FLAT\n    czm_materialInput materialInput;\n    materialInput.normalEC = normalEC;\n    materialInput.positionToEyeEC = -eyeCoordinate.xyz;\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    material.diffuse = color.rgb;\n    material.alpha = color.a;\n\n    gl_FragColor = czm_phong(normalize(-eyeCoordinate.xyz), material, czm_lightDirectionEC);\n#endif // FLAT\n\n    // Premultiply alpha. Required for classification primitives on translucent globe.\n    gl_FragColor.rgb *= gl_FragColor.a;\n\n#else // PER_INSTANCE_COLOR\n\n    // Material support.\n    // USES_ is distinct from REQUIRES_, because some things are dependencies of each other or\n    // dependencies for culling but might not actually be used by the material.\n\n    czm_materialInput materialInput;\n\n#ifdef USES_NORMAL_EC\n    materialInput.normalEC = normalEC;\n#endif\n\n#ifdef USES_POSITION_TO_EYE_EC\n    materialInput.positionToEyeEC = -eyeCoordinate.xyz;\n#endif\n\n#ifdef USES_TANGENT_TO_EYE\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(worldCoordinate, normalEC);\n#endif\n\n#ifdef USES_ST\n    // Remap texture coordinates from computed (approximately aligned with cartographic space) to the desired\n    // texture coordinate system, which typically forms a tight oriented bounding box around the geometry.\n    // Shader is provided a set of reference points for remapping.\n    materialInput.st.x = czm_lineDistance(v_uvMinAndSphericalLongitudeRotation.xy, v_uMaxAndInverseDistance.xy, uv) * v_uMaxAndInverseDistance.z;\n    materialInput.st.y = czm_lineDistance(v_uvMinAndSphericalLongitudeRotation.xy, v_vMaxAndInverseDistance.xy, uv) * v_vMaxAndInverseDistance.z;\n#endif\n\n    czm_material material = czm_getMaterial(materialInput);\n\n#ifdef FLAT\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n#else // FLAT\n    gl_FragColor = czm_phong(normalize(-eyeCoordinate.xyz), material, czm_lightDirectionEC);\n#endif // FLAT\n\n    // Premultiply alpha. Required for classification primitives on translucent globe.\n    gl_FragColor.rgb *= gl_FragColor.a;\n\n#endif // PER_INSTANCE_COLOR\n    czm_writeDepthClamp();\n#endif // PICK\n}\n"},642625:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='attribute vec3 position3DHigh;\nattribute vec3 position3DLow;\nattribute float batchId;\n\n#ifdef EXTRUDED_GEOMETRY\nattribute vec3 extrudeDirection;\n\nuniform float u_globeMinimumAltitude;\n#endif // EXTRUDED_GEOMETRY\n\n#ifdef PER_INSTANCE_COLOR\nvarying vec4 v_color;\n#endif // PER_INSTANCE_COLOR\n\n#ifdef TEXTURE_COORDINATES\n#ifdef SPHERICAL\nvarying vec4 v_sphericalExtents;\n#else // SPHERICAL\nvarying vec2 v_inversePlaneExtents;\nvarying vec4 v_westPlane;\nvarying vec4 v_southPlane;\n#endif // SPHERICAL\nvarying vec3 v_uvMinAndSphericalLongitudeRotation;\nvarying vec3 v_uMaxAndInverseDistance;\nvarying vec3 v_vMaxAndInverseDistance;\n#endif // TEXTURE_COORDINATES\n\nvoid main()\n{\n    vec4 position = czm_computePosition();\n\n#ifdef EXTRUDED_GEOMETRY\n    float delta = min(u_globeMinimumAltitude, czm_geometricToleranceOverMeter * length(position.xyz));\n    delta *= czm_sceneMode == czm_sceneMode3D ? 1.0 : 0.0;\n\n    //extrudeDirection is zero for the top layer\n    position = position + vec4(extrudeDirection * delta, 0.0);\n#endif\n\n#ifdef TEXTURE_COORDINATES\n#ifdef SPHERICAL\n    v_sphericalExtents = czm_batchTable_sphericalExtents(batchId);\n    v_uvMinAndSphericalLongitudeRotation.z = czm_batchTable_longitudeRotation(batchId);\n#else // SPHERICAL\n#ifdef COLUMBUS_VIEW_2D\n    vec4 planes2D_high = czm_batchTable_planes2D_HIGH(batchId);\n    vec4 planes2D_low = czm_batchTable_planes2D_LOW(batchId);\n\n    // If the primitive is split across the IDL (planes2D_high.x > planes2D_high.w):\n    // - If this vertex is on the east side of the IDL (position3DLow.y > 0.0, comparison with position3DHigh may produce artifacts)\n    // - existing "east" is on the wrong side of the world, far away (planes2D_high/low.w)\n    // - so set "east" as beyond the eastmost extent of the projection (idlSplitNewPlaneHiLow)\n    vec2 idlSplitNewPlaneHiLow = vec2(EAST_MOST_X_HIGH - (WEST_MOST_X_HIGH - planes2D_high.w), EAST_MOST_X_LOW - (WEST_MOST_X_LOW - planes2D_low.w));\n    bool idlSplit = planes2D_high.x > planes2D_high.w && position3DLow.y > 0.0;\n    planes2D_high.w = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.x, planes2D_high.w);\n    planes2D_low.w = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.y, planes2D_low.w);\n\n    // - else, if this vertex is on the west side of the IDL (position3DLow.y < 0.0)\n    // - existing "west" is on the wrong side of the world, far away (planes2D_high/low.x)\n    // - so set "west" as beyond the westmost extent of the projection (idlSplitNewPlaneHiLow)\n    idlSplit = planes2D_high.x > planes2D_high.w && position3DLow.y < 0.0;\n    idlSplitNewPlaneHiLow = vec2(WEST_MOST_X_HIGH - (EAST_MOST_X_HIGH - planes2D_high.x), WEST_MOST_X_LOW - (EAST_MOST_X_LOW - planes2D_low.x));\n    planes2D_high.x = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.x, planes2D_high.x);\n    planes2D_low.x = czm_branchFreeTernary(idlSplit, idlSplitNewPlaneHiLow.y, planes2D_low.x);\n\n    vec3 southWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.xy), vec3(0.0, planes2D_low.xy))).xyz;\n    vec3 northWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.x, planes2D_high.z), vec3(0.0, planes2D_low.x, planes2D_low.z))).xyz;\n    vec3 southEastCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(vec3(0.0, planes2D_high.w, planes2D_high.y), vec3(0.0, planes2D_low.w, planes2D_low.y))).xyz;\n#else // COLUMBUS_VIEW_2D\n    // 3D case has smaller "plane extents," so planes encoded as a 64 bit position and 2 vec3s for distances/direction\n    vec3 southWestCorner = (czm_modelViewRelativeToEye * czm_translateRelativeToEye(czm_batchTable_southWest_HIGH(batchId), czm_batchTable_southWest_LOW(batchId))).xyz;\n    vec3 northWestCorner = czm_normal * czm_batchTable_northward(batchId) + southWestCorner;\n    vec3 southEastCorner = czm_normal * czm_batchTable_eastward(batchId) + southWestCorner;\n#endif // COLUMBUS_VIEW_2D\n\n    vec3 eastWard = southEastCorner - southWestCorner;\n    float eastExtent = length(eastWard);\n    eastWard /= eastExtent;\n\n    vec3 northWard = northWestCorner - southWestCorner;\n    float northExtent = length(northWard);\n    northWard /= northExtent;\n\n    v_westPlane = vec4(eastWard, -dot(eastWard, southWestCorner));\n    v_southPlane = vec4(northWard, -dot(northWard, southWestCorner));\n    v_inversePlaneExtents = vec2(1.0 / eastExtent, 1.0 / northExtent);\n#endif // SPHERICAL\n    vec4 uvMinAndExtents = czm_batchTable_uvMinAndExtents(batchId);\n    vec4 uMaxVmax = czm_batchTable_uMaxVmax(batchId);\n\n    v_uMaxAndInverseDistance = vec3(uMaxVmax.xy, uvMinAndExtents.z);\n    v_vMaxAndInverseDistance = vec3(uMaxVmax.zw, uvMinAndExtents.w);\n    v_uvMinAndSphericalLongitudeRotation.xy = uvMinAndExtents.xy;\n#endif // TEXTURE_COORDINATES\n\n#ifdef PER_INSTANCE_COLOR\n    v_color = czm_batchTable_color(batchId);\n#endif\n\n    gl_Position = czm_depthClamp(czm_modelViewProjectionRelativeToEye * position);\n}\n'},335006:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n#endif\n\n#ifdef VECTOR_TILE\nuniform vec4 u_highlightColor;\n#endif\n\nvoid main(void)\n{\n#ifdef VECTOR_TILE\n    gl_FragColor = czm_gammaCorrect(u_highlightColor);\n#else\n    gl_FragColor = vec4(1.0);\n#endif\n    czm_writeDepthClamp();\n}\n"},262628:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="/**\n * @license\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Cesium GS, Inc.\n */\n\n // Code:  http://sponeil.net/\n // GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\n\nconst float Kr = 0.0025;\nconst float Kr4PI = Kr * 4.0 * czm_pi;\nconst float Km = 0.0015;\nconst float Km4PI = Km * 4.0 * czm_pi;\nconst float ESun = 15.0;\nconst float KmESun = Km * ESun;\nconst float KrESun = Kr * ESun;\nconst vec3 InvWavelength = vec3(\n    5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\n    9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\n    19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\nconst float rayleighScaleDepth = 0.25;\n\nconst int nSamples = 2;\nconst float fSamples = 2.0;\n\nconst float g = -0.95;\nconst float g2 = g * g;\n\n#ifdef COLOR_CORRECT\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\n#endif\n\nuniform vec3 u_radiiAndDynamicAtmosphereColor; // outer radius, inner radius, dynamic atmosphere color flag\n\nfloat scale(float cosAngle)\n{\n    float x = 1.0 - cosAngle;\n    return rayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\nvec3 getLightDirection(vec3 positionWC)\n{\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\n    vec3 lightDirection =\n        positionWC * float(lightEnum == 0.0) +\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\n        czm_sunDirectionWC * float(lightEnum == 2.0);\n    return normalize(lightDirection);\n}\n\nvoid calculateRayScatteringFromSpace(in vec3 positionWC, in vec3 ray, in float innerRadius, in float outerRadius, inout float far, out vec3 start, out float startOffset)\n{\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\n    float cameraHeight = length(positionWC);\n    float B = 2.0 * dot(positionWC, ray);\n    float C = cameraHeight * cameraHeight - outerRadius * outerRadius;\n    float det = max(0.0, B * B - 4.0 * C);\n    float near = 0.5 * (-B - sqrt(det));\n\n    // Calculate the ray's starting position, then calculate its scattering offset\n    start = positionWC + ray * near;\n    far -= near;\n    float startAngle = dot(ray, start) / outerRadius;\n    float startDepth = exp(-1.0 / rayleighScaleDepth);\n    startOffset = startDepth * scale(startAngle);\n}\n\nvoid calculateRayScatteringFromGround(in vec3 positionWC, in vec3 ray, in float atmosphereScale, in float innerRadius, out vec3 start, out float startOffset)\n{\n    // Calculate the ray's starting position, then calculate its scattering offset\n    float cameraHeight = length(positionWC);\n    start = positionWC;\n    float height = length(start);\n    float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - cameraHeight));\n    float startAngle = dot(ray, start) / height;\n    startOffset = depth*scale(startAngle);\n}\n\nczm_raySegment rayEllipsoidIntersection(czm_ray ray, vec3 inverseRadii)\n{\n    vec3 o = inverseRadii * (czm_inverseView * vec4(ray.origin, 1.0)).xyz;\n    vec3 d = inverseRadii * (czm_inverseView * vec4(ray.direction, 0.0)).xyz;\n\n    float a = dot(d, d);\n    float b = dot(d, o);\n    float c = dot(o, o) - 1.0;\n    float discriminant = b * b - a * c;\n    if (discriminant < 0.0)\n    {\n        return czm_emptyRaySegment;\n    }\n    discriminant = sqrt(discriminant);\n    float t1 = (-b - discriminant) / a;\n    float t2 = (-b + discriminant) / a;\n\n    if (t1 < 0.0 && t2 < 0.0)\n    {\n        return czm_emptyRaySegment;\n    }\n\n    if (t1 < 0.0 && t2 >= 0.0)\n    {\n        t1 = 0.0;\n    }\n\n    return czm_raySegment(t1, t2);\n}\n\nvec3 getAdjustedPosition(vec3 positionWC, float innerRadius)\n{\n  // Adjust the camera position so that atmosphere color looks the same wherever the eye height is the same\n  float cameraHeight = czm_eyeHeight + innerRadius;\n  return normalize(positionWC) * cameraHeight;\n}\n\nvec3 getTranslucentPosition(vec3 positionWC, vec3 outerPositionWC, float innerRadius, out bool intersectsEllipsoid)\n{\n    vec3 directionWC = normalize(outerPositionWC - positionWC);\n    vec3 directionEC = czm_viewRotation * directionWC;\n    czm_ray viewRay = czm_ray(vec3(0.0), directionEC);\n    czm_raySegment raySegment = rayEllipsoidIntersection(viewRay, czm_ellipsoidInverseRadii);\n    intersectsEllipsoid = raySegment.start >= 0.0;\n\n    if (intersectsEllipsoid)\n    {\n        return positionWC + raySegment.stop * directionWC;\n    }\n\n    return getAdjustedPosition(positionWC, innerRadius);\n}\n\nvoid calculateMieColorAndRayleighColor(vec3 outerPositionWC, out vec3 mieColor, out vec3 rayleighColor)\n{\n    // Unpack attributes\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\n\n#ifdef GLOBE_TRANSLUCENT\n    bool intersectsEllipsoid = false;\n    vec3 startPositionWC = getTranslucentPosition(czm_viewerPositionWC, outerPositionWC, innerRadius, intersectsEllipsoid);\n#else\n    vec3 startPositionWC = getAdjustedPosition(czm_viewerPositionWC, innerRadius);\n#endif\n\n    vec3 lightDirection = getLightDirection(startPositionWC);\n\n    // Get the ray from the start position to the outer position and its length (which is the far point of the ray passing through the atmosphere)\n    vec3 ray = outerPositionWC - startPositionWC;\n    float far = length(ray);\n    ray /= far;\n\n    float atmosphereScale = 1.0 / (outerRadius - innerRadius);\n\n    vec3 start;\n    float startOffset;\n\n#ifdef SKY_FROM_SPACE\n#ifdef GLOBE_TRANSLUCENT\n    if (intersectsEllipsoid)\n    {\n        calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\n    }\n    else\n    {\n        calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\n    }\n#else\n    calculateRayScatteringFromSpace(startPositionWC, ray, innerRadius, outerRadius, far, start, startOffset);\n#endif\n#else\n    calculateRayScatteringFromGround(startPositionWC, ray, atmosphereScale, innerRadius, start, startOffset);\n#endif\n\n    // Initialize the scattering loop variables\n    float sampleLength = far / fSamples;\n    float scaledLength = sampleLength * atmosphereScale;\n    vec3 sampleRay = ray * sampleLength;\n    vec3 samplePoint = start + sampleRay * 0.5;\n\n    // Now loop through the sample rays\n    vec3 frontColor = vec3(0.0, 0.0, 0.0);\n\n    for (int i = 0; i<nSamples; i++)\n    {\n        float height = length(samplePoint);\n        float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - height));\n        float fLightAngle = dot(lightDirection, samplePoint) / height;\n        float fCameraAngle = dot(ray, samplePoint) / height;\n        float fScatter = (startOffset + depth*(scale(fLightAngle) - scale(fCameraAngle)));\n        vec3 attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\n        frontColor += attenuate * (depth * scaledLength);\n        samplePoint += sampleRay;\n    }\n\n    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n    mieColor = frontColor * KmESun;\n    rayleighColor = frontColor * (InvWavelength * KrESun);\n\n    // Cap mie and rayleigh colors to prevent NaNs when vertex interpolation happens\n    mieColor = min(mieColor, vec3(10000000.0));\n    rayleighColor = min(rayleighColor, vec3(10000000.0));\n}\n\nvec4 calculateFinalColor(vec3 positionWC, vec3 toCamera, vec3 lightDirection, vec3 mieColor, vec3 rayleighColor)\n{\n    // Extra normalize added for Android\n    float cosAngle = dot(lightDirection, normalize(toCamera)) / length(toCamera);\n    float rayleighPhase = 0.75 * (1.0 + cosAngle * cosAngle);\n    float miePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + cosAngle * cosAngle) / pow(1.0 + g2 - 2.0 * g * cosAngle, 1.5);\n\n    vec3 rgb = rayleighPhase * rayleighColor + miePhase * mieColor;\n\n    const float exposure = 2.0;\n    vec3 rgbExposure = vec3(1.0) - exp(-exposure * rgb);\n\n#ifndef HDR\n    rgb = rgbExposure;\n#endif\n\n#ifdef COLOR_CORRECT\n    // Convert rgb color to hsb\n    vec3 hsb = czm_RGBToHSB(rgb);\n    // Perform hsb shift\n    hsb.x += u_hsbShift.x; // hue\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\n    // Convert shifted hsb back to rgb\n    rgb = czm_HSBToRGB(hsb);\n#endif\n\n    float outerRadius = u_radiiAndDynamicAtmosphereColor.x;\n    float innerRadius = u_radiiAndDynamicAtmosphereColor.y;\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\n\n    float cameraHeight = czm_eyeHeight + innerRadius;\n\n    // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\n    float atmosphereAlpha = clamp((outerRadius - cameraHeight) / (outerRadius - innerRadius), 0.0, 1.0);\n\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\n    float nightAlpha = (lightEnum != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\n    atmosphereAlpha *= pow(nightAlpha, 0.5);\n\n    vec4 finalColor = vec4(rgb, mix(clamp(rgbExposure.b, 0.0, 1.0), 1.0, atmosphereAlpha) * smoothstep(0.0, 1.0, czm_morphTime));\n\n    if (mieColor.b > 1.0)\n    {\n        // Fade atmosphere below the ellipsoid. As the camera zooms further away from the ellipsoid draw\n        // a larger atmosphere ring to cover empty space of lower LOD globe tiles.\n        float strength = mieColor.b;\n        float minDistance = outerRadius;\n        float maxDistance = outerRadius * 3.0;\n        float maxStrengthLerp = 1.0 - clamp((maxDistance - cameraHeight) / (maxDistance - minDistance), 0.0, 1.0);\n        float maxStrength = mix(100.0, 10000.0, maxStrengthLerp);\n        strength = min(strength, maxStrength);\n        float alpha = 1.0 - (strength / maxStrength);\n        finalColor.a = alpha;\n    }\n\n    return finalColor;\n}\n"},425686:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="varying vec3 v_outerPositionWC;\n\n#ifndef PER_FRAGMENT_ATMOSPHERE\nvarying vec3 v_mieColor;\nvarying vec3 v_rayleighColor;\n#endif\n\nvoid main (void)\n{\n    vec3 toCamera = czm_viewerPositionWC - v_outerPositionWC;\n    vec3 lightDirection = getLightDirection(czm_viewerPositionWC);\n    vec3 mieColor;\n    vec3 rayleighColor;\n\n#ifdef PER_FRAGMENT_ATMOSPHERE\n    calculateMieColorAndRayleighColor(v_outerPositionWC, mieColor, rayleighColor);\n#else\n    mieColor = v_mieColor;\n    rayleighColor = v_rayleighColor;\n#endif\n\n    gl_FragColor = calculateFinalColor(czm_viewerPositionWC, toCamera, lightDirection, mieColor, rayleighColor);\n}\n"},854259:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 position;\n\nvarying vec3 v_outerPositionWC;\n\n#ifndef PER_FRAGMENT_ATMOSPHERE\nvarying vec3 v_mieColor;\nvarying vec3 v_rayleighColor;\n#endif\n\nvoid main(void)\n{\n    vec4 positionWC = czm_model * position;\n\n#ifndef PER_FRAGMENT_ATMOSPHERE\n    calculateMieColorAndRayleighColor(positionWC.xyz, v_mieColor, v_rayleighColor);\n#endif\n    v_outerPositionWC = positionWC.xyz;\n    gl_Position = czm_modelViewProjection * position;\n}\n"},304725:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform samplerCube u_cubeMap;\n\nvarying vec3 v_texCoord;\n\nvoid main()\n{\n    vec4 color = textureCube(u_cubeMap, normalize(v_texCoord));\n    gl_FragColor = vec4(czm_gammaCorrect(color).rgb, czm_morphTime);\n}\n"},295697:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position;\n\nvarying vec3 v_texCoord;\n\nvoid main()\n{\n    vec3 p = czm_viewRotation * (czm_temeToPseudoFixed * (czm_entireFrustum.y * position));\n    gl_Position = czm_projection * vec4(p, 1.0);\n    v_texCoord = position.xyz;\n}\n"},737569:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform sampler2D u_texture;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    vec4 color = texture2D(u_texture, v_textureCoordinates);\n    gl_FragColor = czm_gammaCorrect(color);\n}\n"},808943:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="uniform float u_radiusTS;\n\nvarying vec2 v_textureCoordinates;\n\nvec2 rotate(vec2 p, vec2 direction)\n{\n    return vec2(p.x * direction.x - p.y * direction.y, p.x * direction.y + p.y * direction.x);\n}\n\nvec4 addBurst(vec2 position, vec2 direction, float lengthScalar)\n{\n    vec2 rotatedPosition = rotate(position, direction) * vec2(25.0, 0.75);\n    float radius = length(rotatedPosition) * lengthScalar;\n    float burst = 1.0 - smoothstep(0.0, 0.55, radius);\n    return vec4(burst);\n}\n\nvoid main()\n{\n    float lengthScalar = 2.0 / sqrt(2.0);\n    vec2 position = v_textureCoordinates - vec2(0.5);\n    float radius = length(position) * lengthScalar;\n    float surface = step(radius, u_radiusTS);\n    vec4 color = vec4(vec2(1.0), surface + 0.2, surface);\n\n    float glow = 1.0 - smoothstep(0.0, 0.55, radius);\n    color.ba += mix(vec2(0.0), vec2(1.0), glow) * 0.75;\n\n    vec4 burst = vec4(0.0);\n\n    // The following loop has been manually unrolled for speed, to\n    // avoid sin() and cos().\n    //\n    //for (float i = 0.4; i < 3.2; i += 1.047) {\n    //    vec2 direction = vec2(sin(i), cos(i));\n    //    burst += 0.4 * addBurst(position, direction, lengthScalar);\n    //\n    //    direction = vec2(sin(i - 0.08), cos(i - 0.08));\n    //    burst += 0.3 * addBurst(position, direction, lengthScalar);\n    //}\n\n    burst += 0.4 * addBurst(position, vec2(0.38942,  0.92106), lengthScalar);  // angle == 0.4\n    burst += 0.4 * addBurst(position, vec2(0.99235,  0.12348), lengthScalar);  // angle == 0.4 + 1.047\n    burst += 0.4 * addBurst(position, vec2(0.60327, -0.79754), lengthScalar);  // angle == 0.4 + 1.047 * 2.0\n\n    burst += 0.3 * addBurst(position, vec2(0.31457,  0.94924), lengthScalar);  // angle == 0.4 - 0.08\n    burst += 0.3 * addBurst(position, vec2(0.97931,  0.20239), lengthScalar);  // angle == 0.4 + 1.047 - 0.08\n    burst += 0.3 * addBurst(position, vec2(0.66507, -0.74678), lengthScalar);  // angle == 0.4 + 1.047 * 2.0 - 0.08\n\n    // End of manual loop unrolling.\n\n    color += clamp(burst, vec4(0.0), vec4(1.0)) * 0.15;\n\n    gl_FragColor = clamp(color, vec4(0.0), vec4(1.0));\n}\n"},412949:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec2 direction;\n\nuniform float u_size;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main() \n{\n    vec4 position;\n    if (czm_morphTime == 1.0)\n    {\n        position = vec4(czm_sunPositionWC, 1.0);\n    }\n    else\n    {\n        position = vec4(czm_sunPositionColumbusView.zxy, 1.0);\n    }\n    \n    vec4 positionEC = czm_view * position;\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\n    \n    vec2 halfSize = vec2(u_size * 0.5);\n    halfSize *= ((direction * 2.0) - 1.0);\n    \n    gl_Position = czm_viewportOrthographic * vec4(positionWC.xy + halfSize, -positionWC.z, 1.0);\n    \n    v_textureCoordinates = direction;\n}\n"},196777:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n#endif\n\nvarying vec4 v_startPlaneEC;\nvarying vec4 v_endPlaneEC;\nvarying vec4 v_rightPlaneEC;\nvarying float v_halfWidth;\nvarying vec3 v_volumeUpEC;\n\nuniform vec4 u_highlightColor;\nvoid main()\n{\n    float logDepthOrDepth = czm_branchFreeTernary(czm_sceneMode == czm_sceneMode2D, gl_FragCoord.z, czm_unpackDepth(texture2D(czm_globeDepthTexture, gl_FragCoord.xy / czm_viewport.zw)));\n\n    // Discard for sky\n    if (logDepthOrDepth == 0.0) {\n#ifdef DEBUG_SHOW_VOLUME\n        gl_FragColor = vec4(0.0, 0.0, 1.0, 0.5);\n        return;\n#else // DEBUG_SHOW_VOLUME\n        discard;\n#endif // DEBUG_SHOW_VOLUME\n    }\n\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\n    eyeCoordinate /= eyeCoordinate.w;\n\n    float halfMaxWidth = v_halfWidth * czm_metersPerPixel(eyeCoordinate);\n\n    // Expand halfMaxWidth if direction to camera is almost perpendicular with the volume's up direction\n    halfMaxWidth += halfMaxWidth * (1.0 - dot(-normalize(eyeCoordinate.xyz), v_volumeUpEC));\n\n    // Check distance of the eye coordinate against the right-facing plane\n    float widthwiseDistance = czm_planeDistance(v_rightPlaneEC, eyeCoordinate.xyz);\n\n    // Check eye coordinate against the mitering planes\n    float distanceFromStart = czm_planeDistance(v_startPlaneEC, eyeCoordinate.xyz);\n    float distanceFromEnd = czm_planeDistance(v_endPlaneEC, eyeCoordinate.xyz);\n\n    if (abs(widthwiseDistance) > halfMaxWidth || distanceFromStart < 0.0 || distanceFromEnd < 0.0) {\n#ifdef DEBUG_SHOW_VOLUME\n        gl_FragColor = vec4(logDepthOrDepth, 0.0, 0.0, 0.5);\n        return;\n#else // DEBUG_SHOW_VOLUME\n        discard;\n#endif // DEBUG_SHOW_VOLUME\n    }\n    gl_FragColor = u_highlightColor;\n\n    czm_writeDepthClamp();\n}\n"},367695:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o='attribute vec3 startEllipsoidNormal;\nattribute vec3 endEllipsoidNormal;\nattribute vec4 startPositionAndHeight;\nattribute vec4 endPositionAndHeight;\nattribute vec4 startFaceNormalAndVertexCorner;\nattribute vec4 endFaceNormalAndHalfWidth;\nattribute float a_batchId;\n\nuniform mat4 u_modifiedModelView;\nuniform vec2 u_minimumMaximumVectorHeights;\n\nvarying vec4 v_startPlaneEC;\nvarying vec4 v_endPlaneEC;\nvarying vec4 v_rightPlaneEC;\nvarying float v_halfWidth;\nvarying vec3 v_volumeUpEC;\n\nvoid main()\n{\n    // vertex corner IDs\n    //          3-----------7\n    //         /|   left   /|\n    //        / | 1       / |\n    //       2-----------6  5  end\n    //       | /         | /\n    // start |/  right   |/\n    //       0-----------4\n    //\n    float isEnd = floor(startFaceNormalAndVertexCorner.w * 0.251); // 0 for front, 1 for end\n    float isTop = floor(startFaceNormalAndVertexCorner.w * mix(0.51, 0.19, isEnd)); // 0 for bottom, 1 for top\n\n    vec3 forward = endPositionAndHeight.xyz - startPositionAndHeight.xyz;\n    vec3 right = normalize(cross(forward, startEllipsoidNormal));\n\n    vec4 position = vec4(startPositionAndHeight.xyz, 1.0);\n    position.xyz += forward * isEnd;\n\n    v_volumeUpEC = czm_normal * normalize(cross(right, forward));\n\n    // Push for volume height\n    float offset;\n    vec3 ellipsoidNormal = mix(startEllipsoidNormal, endEllipsoidNormal, isEnd);\n\n    // offset height to create volume\n    offset = mix(startPositionAndHeight.w, endPositionAndHeight.w, isEnd);\n    offset = mix(u_minimumMaximumVectorHeights.y, u_minimumMaximumVectorHeights.x, isTop) - offset;\n    position.xyz += offset * ellipsoidNormal;\n\n    // move from RTC to EC\n    position = u_modifiedModelView * position;\n    right = czm_normal * right;\n\n    // Push for width in a direction that is in the start or end plane and in a plane with right\n    // N = normalEC ("right-facing" direction for push)\n    // R = right\n    // p = angle between N and R\n    // w = distance to push along R if R == N\n    // d = distance to push along N\n    //\n    //   N   R\n    //  {  p| }      * cos(p) = dot(N, R) = w / d\n    //  d  |  |w    * d = w / dot(N, R)\n    //    { | }\n    //       o---------- polyline segment ----\x3e\n    //\n    vec3 scratchNormal = mix(-startFaceNormalAndVertexCorner.xyz, endFaceNormalAndHalfWidth.xyz, isEnd);\n    scratchNormal = cross(scratchNormal, mix(startEllipsoidNormal, endEllipsoidNormal, isEnd));\n    vec3 miterPushNormal = czm_normal * normalize(scratchNormal);\n\n    offset = 2.0 * endFaceNormalAndHalfWidth.w * max(0.0, czm_metersPerPixel(position)); // offset = widthEC\n    offset = offset / dot(miterPushNormal, right);\n    position.xyz += miterPushNormal * (offset * sign(0.5 - mod(startFaceNormalAndVertexCorner.w, 2.0)));\n\n    gl_Position = czm_depthClamp(czm_projection * position);\n\n    position = u_modifiedModelView * vec4(startPositionAndHeight.xyz, 1.0);\n    vec3 startNormalEC = czm_normal * startFaceNormalAndVertexCorner.xyz;\n    v_startPlaneEC = vec4(startNormalEC, -dot(startNormalEC, position.xyz));\n    v_rightPlaneEC = vec4(right, -dot(right, position.xyz));\n\n    position = u_modifiedModelView * vec4(endPositionAndHeight.xyz, 1.0);\n    vec3 endNormalEC = czm_normal * endFaceNormalAndHalfWidth.xyz;\n    v_endPlaneEC = vec4(endNormalEC, -dot(endNormalEC, position.xyz));\n    v_halfWidth = endFaceNormalAndHalfWidth.w;\n}\n'},767293:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 currentPosition;\nattribute vec4 previousPosition;\nattribute vec4 nextPosition;\nattribute vec2 expandAndWidth;\nattribute float a_batchId;\n\nuniform mat4 u_modifiedModelView;\n\nvoid main()\n{\n    float expandDir = expandAndWidth.x;\n    float width = abs(expandAndWidth.y) + 0.5;\n    bool usePrev = expandAndWidth.y < 0.0;\n\n    vec4 p = u_modifiedModelView * currentPosition;\n    vec4 prev = u_modifiedModelView * previousPosition;\n    vec4 next = u_modifiedModelView * nextPosition;\n\n    float angle;\n    vec4 positionWC = getPolylineWindowCoordinatesEC(p, prev, next, expandDir, width, usePrev, angle);\n    gl_Position = czm_viewportOrthographic * positionWC;\n}\n"},870782:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec3 position;\nattribute float a_batchId;\n\nuniform mat4 u_modifiedModelViewProjection;\n\nvoid main()\n{\n    gl_Position = czm_depthClamp(u_modifiedModelViewProjection * vec4(position, 1.0));\n}\n"},885231:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="\nvarying vec2 v_textureCoordinates;\n\nvoid main()\n{\n    czm_materialInput materialInput;\n    \n    materialInput.s = v_textureCoordinates.s;\n    materialInput.st = v_textureCoordinates;\n    materialInput.str = vec3(v_textureCoordinates, 0.0);\n    materialInput.normalEC = vec3(0.0, 0.0, -1.0);\n    \n    czm_material material = czm_getMaterial(materialInput);\n\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\n}\n"},450583:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o="attribute vec4 position;\nattribute vec2 textureCoordinates;\n\nvarying vec2 v_textureCoordinates;\n\nvoid main() \n{\n    gl_Position = position;\n    v_textureCoordinates = textureCoordinates;\n}\n"},681167:(e,n,t)=>{"use strict";t.d(n,{a:()=>o,c:()=>i});var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e,n,t){return e(t={path:n,exports:{},require:function(e,n){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==n&&t.path)}},t.exports),t.exports}},45607:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var o=function(e,n){n||(n={});var t,o,r,s,l,c,d,m,u,p,f,h=null==n.cutoff?.25:n.cutoff,g=null==n.radius?8:n.radius,_=n.channel||0;if(ArrayBuffer.isView(e)||Array.isArray(e)){if(!n.width||!n.height)throw Error("For raw data width and height should be provided by options");t=n.width,o=n.height,s=e,c=n.stride?n.stride:Math.floor(e.length/t/o)}else window.HTMLCanvasElement&&e instanceof window.HTMLCanvasElement?(d=(m=e).getContext("2d"),t=m.width,o=m.height,s=(u=d.getImageData(0,0,t,o)).data,c=4):window.CanvasRenderingContext2D&&e instanceof window.CanvasRenderingContext2D?(d=e,t=(m=e.canvas).width,o=m.height,s=(u=d.getImageData(0,0,t,o)).data,c=4):window.ImageData&&e instanceof window.ImageData&&(u=e,t=e.width,o=e.height,s=u.data,c=4);if(r=Math.max(t,o),window.Uint8ClampedArray&&s instanceof window.Uint8ClampedArray||window.Uint8Array&&s instanceof window.Uint8Array)for(l=s,s=Array(t*o),p=0,f=l.length;p<f;p++)s[p]=l[p*c+_]/255;else if(1!==c)throw Error("Raw data can have only 1 value per pixel");var v=Array(t*o),y=Array(t*o),x=Array(r),C=Array(r),Z=Array(r+1),T=Array(r);for(p=0,f=t*o;p<f;p++){var E=s[p];v[p]=1===E?0:0===E?i:Math.pow(Math.max(0,.5-E),2),y[p]=1===E?i:0===E?0:Math.pow(Math.max(0,E-.5),2)}a(v,t,o,x,C,T,Z),a(y,t,o,x,C,T,Z);var w,S,z,A=window.Float32Array?new Float32Array(t*o):new Array(t*o);for(p=0,f=t*o;p<f;p++)A[p]=(w=1-((v[p]-y[p])/g+h),(S=0)<(z=1)?w<S?S:w>z?z:w:w<z?z:w>S?S:w);return A},i=1e20;function a(e,n,t,o,i,a,s){for(var l=0;l<n;l++){for(var c=0;c<t;c++)o[c]=e[c*n+l];for(r(o,i,a,s,t),c=0;c<t;c++)e[c*n+l]=i[c]}for(c=0;c<t;c++){for(l=0;l<n;l++)o[l]=e[c*n+l];for(r(o,i,a,s,n),l=0;l<n;l++)e[c*n+l]=Math.sqrt(i[l])}}function r(e,n,t,o,a){t[0]=0,o[0]=-i,o[1]=+i;for(var r=1,s=0;r<a;r++){for(var l=(e[r]+r*r-(e[t[s]]+t[s]*t[s]))/(2*r-2*t[s]);l<=o[s];)s--,l=(e[r]+r*r-(e[t[s]]+t[s]*t[s]))/(2*r-2*t[s]);t[++s]=r,o[s]=l,o[s+1]=+i}for(r=0,s=0;r<a;r++){for(;o[s+1]<r;)s++;n[r]=(r-t[s])*(r-t[s])+e[t[s]]}}},468032:(e,n,t)=>{"use strict";function o(e,n,t,a,r,s){if(r-a<=t)return;const l=a+r>>1;i(e,n,l,a,r,s%2),o(e,n,t,a,l-1,s+1),o(e,n,t,l+1,r,s+1)}function i(e,n,t,o,r,s){for(;r>o;){if(r-o>600){const a=r-o+1,l=t-o+1,c=Math.log(a),d=.5*Math.exp(2*c/3),m=.5*Math.sqrt(c*d*(a-d)/a)*(l-a/2<0?-1:1);i(e,n,t,Math.max(o,Math.floor(t-l*d/a+m)),Math.min(r,Math.floor(t+(a-l)*d/a+m)),s)}const l=n[2*t+s];let c=o,d=r;for(a(e,n,o,t),n[2*r+s]>l&&a(e,n,o,r);c<d;){for(a(e,n,c,d),c++,d--;n[2*c+s]<l;)c++;for(;n[2*d+s]>l;)d--}n[2*o+s]===l?a(e,n,o,d):(d++,a(e,n,d,r)),d<=t&&(o=d+1),t<=d&&(r=d-1)}}function a(e,n,t,o){r(e,t,o),r(n,2*t,2*o),r(n,2*t+1,2*o+1)}function r(e,n,t){const o=e[n];e[n]=e[t],e[t]=o}function s(e,n,t,o){const i=e-t,a=n-o;return i*i+a*a}t.d(n,{Z:()=>d});const l=e=>e[0],c=e=>e[1];class d{constructor(e,n=l,t=c,i=64,a=Float64Array){this.nodeSize=i,this.points=e;const r=e.length<65536?Uint16Array:Uint32Array,s=this.ids=new r(e.length),d=this.coords=new a(2*e.length);for(let o=0;o<e.length;o++)s[o]=o,d[2*o]=n(e[o]),d[2*o+1]=t(e[o]);o(s,d,i,0,s.length-1,0)}range(e,n,t,o){return function(e,n,t,o,i,a,r){const s=[0,e.length-1,0],l=[];let c,d;for(;s.length;){const m=s.pop(),u=s.pop(),p=s.pop();if(u-p<=r){for(let r=p;r<=u;r++)c=n[2*r],d=n[2*r+1],c>=t&&c<=i&&d>=o&&d<=a&&l.push(e[r]);continue}const f=Math.floor((p+u)/2);c=n[2*f],d=n[2*f+1],c>=t&&c<=i&&d>=o&&d<=a&&l.push(e[f]);const h=(m+1)%2;(0===m?t<=c:o<=d)&&(s.push(p),s.push(f-1),s.push(h)),(0===m?i>=c:a>=d)&&(s.push(f+1),s.push(u),s.push(h))}return l}(this.ids,this.coords,e,n,t,o,this.nodeSize)}within(e,n,t){return function(e,n,t,o,i,a){const r=[0,e.length-1,0],l=[],c=i*i;for(;r.length;){const d=r.pop(),m=r.pop(),u=r.pop();if(m-u<=a){for(let i=u;i<=m;i++)s(n[2*i],n[2*i+1],t,o)<=c&&l.push(e[i]);continue}const p=Math.floor((u+m)/2),f=n[2*p],h=n[2*p+1];s(f,h,t,o)<=c&&l.push(e[p]);const g=(d+1)%2;(0===d?t-i<=f:o-i<=h)&&(r.push(u),r.push(p-1),r.push(g)),(0===d?t+i>=f:o+i>=h)&&(r.push(p+1),r.push(m),r.push(g))}return l}(this.ids,this.coords,e,n,t,this.nodeSize)}}},425232:(e,n,t)=>{"use strict";function o(e,n,t,o,a){i(e,n,t||0,o||e.length-1,a||r)}function i(e,n,t,o,r){for(;o>t;){if(o-t>600){var s=o-t+1,l=n-t+1,c=Math.log(s),d=.5*Math.exp(2*c/3),m=.5*Math.sqrt(c*d*(s-d)/s)*(l-s/2<0?-1:1);i(e,n,Math.max(t,Math.floor(n-l*d/s+m)),Math.min(o,Math.floor(n+(s-l)*d/s+m)),r)}var u=e[n],p=t,f=o;for(a(e,t,n),r(e[o],u)>0&&a(e,t,o);p<f;){for(a(e,p,f),p++,f--;r(e[p],u)<0;)p++;for(;r(e[f],u)>0;)f--}0===r(e[t],u)?a(e,t,f):a(e,++f,o),f<=n&&(t=f+1),n<=f&&(o=f-1)}}function a(e,n,t){var o=e[n];e[n]=e[t],e[t]=o}function r(e,n){return e<n?-1:e>n?1:0}t.d(n,{Z:()=>s});class s{constructor(e=9){this._maxEntries=Math.max(4,e),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()}all(){return this._all(this.data,[])}search(e){let n=this.data;const t=[];if(!v(e,n))return t;const o=this.toBBox,i=[];for(;n;){for(let a=0;a<n.children.length;a++){const r=n.children[a],s=n.leaf?o(r):r;v(e,s)&&(n.leaf?t.push(r):_(e,s)?this._all(r,t):i.push(r))}n=i.pop()}return t}collides(e){let n=this.data;if(!v(e,n))return!1;const t=[];for(;n;){for(let o=0;o<n.children.length;o++){const i=n.children[o],a=n.leaf?this.toBBox(i):i;if(v(e,a)){if(n.leaf||_(e,a))return!0;t.push(i)}}n=t.pop()}return!1}load(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(let n=0;n<e.length;n++)this.insert(e[n]);return this}let n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){const e=this.data;this.data=n,n=e}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this}insert(e){return e&&this._insert(e,this.data.height-1),this}clear(){return this.data=y([]),this}remove(e,n){if(!e)return this;let t=this.data;const o=this.toBBox(e),i=[],a=[];let r,s,c;for(;t||i.length;){if(t||(t=i.pop(),s=i[i.length-1],r=a.pop(),c=!0),t.leaf){const o=l(e,t.children,n);if(-1!==o)return t.children.splice(o,1),i.push(t),this._condense(i),this}c||t.leaf||!_(t,o)?s?(r++,t=s.children[r],c=!1):t=null:(i.push(t),a.push(r),r=0,s=t,t=t.children[0])}return this}toBBox(e){return e}compareMinX(e,n){return e.minX-n.minX}compareMinY(e,n){return e.minY-n.minY}toJSON(){return this.data}fromJSON(e){return this.data=e,this}_all(e,n){const t=[];for(;e;)e.leaf?n.push(...e.children):t.push(...e.children),e=t.pop();return n}_build(e,n,t,o){const i=t-n+1;let a,r=this._maxEntries;if(i<=r)return a=y(e.slice(n,t+1)),c(a,this.toBBox),a;o||(o=Math.ceil(Math.log(i)/Math.log(r)),r=Math.ceil(i/Math.pow(r,o-1))),a=y([]),a.leaf=!1,a.height=o;const s=Math.ceil(i/r),l=s*Math.ceil(Math.sqrt(r));x(e,n,t,l,this.compareMinX);for(let i=n;i<=t;i+=l){const n=Math.min(i+l-1,t);x(e,i,n,s,this.compareMinY);for(let t=i;t<=n;t+=s){const i=Math.min(t+s-1,n);a.children.push(this._build(e,t,i,o-1))}}return c(a,this.toBBox),a}_chooseSubtree(e,n,t,o){for(;o.push(n),!n.leaf&&o.length-1!==t;){let t,o=1/0,r=1/0;for(let s=0;s<n.children.length;s++){const l=n.children[s],c=f(l),d=(i=e,a=l,(Math.max(a.maxX,i.maxX)-Math.min(a.minX,i.minX))*(Math.max(a.maxY,i.maxY)-Math.min(a.minY,i.minY))-c);d<r?(r=d,o=c<o?c:o,t=l):d===r&&c<o&&(o=c,t=l)}n=t||n.children[0]}var i,a;return n}_insert(e,n,t){const o=t?e:this.toBBox(e),i=[],a=this._chooseSubtree(o,this.data,n,i);for(a.children.push(e),m(a,o);n>=0&&i[n].children.length>this._maxEntries;)this._split(i,n),n--;this._adjustParentBBoxes(o,i,n)}_split(e,n){const t=e[n],o=t.children.length,i=this._minEntries;this._chooseSplitAxis(t,i,o);const a=this._chooseSplitIndex(t,i,o),r=y(t.children.splice(a,t.children.length-a));r.height=t.height,r.leaf=t.leaf,c(t,this.toBBox),c(r,this.toBBox),n?e[n-1].children.push(r):this._splitRoot(t,r)}_splitRoot(e,n){this.data=y([e,n]),this.data.height=e.height+1,this.data.leaf=!1,c(this.data,this.toBBox)}_chooseSplitIndex(e,n,t){let o,i=1/0,a=1/0;for(let r=n;r<=t-n;r++){const n=d(e,0,r,this.toBBox),s=d(e,r,t,this.toBBox),l=g(n,s),c=f(n)+f(s);l<i?(i=l,o=r,a=c<a?c:a):l===i&&c<a&&(a=c,o=r)}return o||t-n}_chooseSplitAxis(e,n,t){const o=e.leaf?this.compareMinX:u,i=e.leaf?this.compareMinY:p;this._allDistMargin(e,n,t,o)<this._allDistMargin(e,n,t,i)&&e.children.sort(o)}_allDistMargin(e,n,t,o){e.children.sort(o);const i=this.toBBox,a=d(e,0,n,i),r=d(e,t-n,t,i);let s=h(a)+h(r);for(let o=n;o<t-n;o++){const n=e.children[o];m(a,e.leaf?i(n):n),s+=h(a)}for(let o=t-n-1;o>=n;o--){const n=e.children[o];m(r,e.leaf?i(n):n),s+=h(r)}return s}_adjustParentBBoxes(e,n,t){for(let o=t;o>=0;o--)m(n[o],e)}_condense(e){for(let n,t=e.length-1;t>=0;t--)0===e[t].children.length?t>0?(n=e[t-1].children,n.splice(n.indexOf(e[t]),1)):this.clear():c(e[t],this.toBBox)}}function l(e,n,t){if(!t)return n.indexOf(e);for(let o=0;o<n.length;o++)if(t(e,n[o]))return o;return-1}function c(e,n){d(e,0,e.children.length,n,e)}function d(e,n,t,o,i){i||(i=y(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(let a=n;a<t;a++){const n=e.children[a];m(i,e.leaf?o(n):n)}return i}function m(e,n){return e.minX=Math.min(e.minX,n.minX),e.minY=Math.min(e.minY,n.minY),e.maxX=Math.max(e.maxX,n.maxX),e.maxY=Math.max(e.maxY,n.maxY),e}function u(e,n){return e.minX-n.minX}function p(e,n){return e.minY-n.minY}function f(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function h(e){return e.maxX-e.minX+(e.maxY-e.minY)}function g(e,n){const t=Math.max(e.minX,n.minX),o=Math.max(e.minY,n.minY),i=Math.min(e.maxX,n.maxX),a=Math.min(e.maxY,n.maxY);return Math.max(0,i-t)*Math.max(0,a-o)}function _(e,n){return e.minX<=n.minX&&e.minY<=n.minY&&n.maxX<=e.maxX&&n.maxY<=e.maxY}function v(e,n){return n.minX<=e.maxX&&n.minY<=e.maxY&&n.maxX>=e.minX&&n.maxY>=e.minY}function y(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function x(e,n,t,i,a){const r=[n,t];for(;r.length;){if((t=r.pop())-(n=r.pop())<=i)continue;const s=n+Math.ceil((t-n)/i/2)*i;o(e,s,n,t,a),r.push(n,s,s,t)}}},720316:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const o="http://www.w3.org/2000/svg",i="cesium-svgPath-svg",a={register:function(e){e.bindingHandlers.cesiumSvgPath={init:function(n,t){const a=document.createElementNS(o,"svg:svg");a.setAttribute("class",i);const r=document.createElementNS(o,"path");return a.appendChild(r),e.virtualElements.setDomNodeChildren(n,[a]),e.computed({read:function(){const n=e.unwrap(t());r.setAttribute("d",e.unwrap(n.path));const o=e.unwrap(n.width),s=e.unwrap(n.height);a.setAttribute("width",o),a.setAttribute("height",s),a.setAttribute("viewBox","0 0 "+o+" "+s),n.css&&a.setAttribute("class",i+" "+e.unwrap(n.css))},disposeWhenNodeIsRemoved:n}),{controlsDescendantBindings:!0}}},e.virtualElements.allowedBindings.cesiumSvgPath=!0}}}}]);